<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_idle_event" kind="class" language="C++" prot="public">
    <compoundname>wxIdleEvent</compoundname>
    <basecompoundref refid="classwx_event" prot="public" virt="non-virtual">wxEvent</basecompoundref>
    <includes local="no">wx/event.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_idle_event_1a32e646bcae35740990449b6a5387d0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxIdleEvent::wxIdleEvent</definition>
        <argsstring>()</argsstring>
        <name>wxIdleEvent</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="3727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_idle_event_1a455ecec06a87eec2188d8e4984cf99ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxIdleEvent::MoreRequested</definition>
        <argsstring>() const</argsstring>
        <name>MoreRequested</name>
        <briefdescription>
<para>Returns true if the OnIdle function processing this event requested more processing time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" kindref="member">RequestMore()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="3744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxIdleEvent::RequestMore</definition>
        <argsstring>(bool needMore=true)</argsstring>
        <name>RequestMore</name>
        <param>
          <type>bool</type>
          <declname>needMore</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Tells wxWidgets that more processing is required. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be called by an OnIdle handler for a window or window event handler to indicate that wxApp::OnIdle should forward the OnIdle event once more to the application windows.</para><para>If no window calls this function during OnIdle, then the application will remain in a passive event loop (not calling OnIdle) until a new event is posted to the application by the windowing system.</para><para><simplesect kind="see"><para><ref refid="classwx_idle_event_1a455ecec06a87eec2188d8e4984cf99ff" kindref="member">MoreRequested()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="3759" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_idle_event_1a087228d3f36f8ce0ba86f84cec2e3138" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event_8h_1af8b16f71b9b38095fe9f7f6244665a80" kindref="member">wxIdleMode</ref></type>
        <definition>static wxIdleMode wxIdleEvent::GetMode</definition>
        <argsstring>()</argsstring>
        <name>GetMode</name>
        <briefdescription>
<para>Static function returning a value specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" kindref="member">SetMode()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="3736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxIdleEvent::SetMode</definition>
        <argsstring>(wxIdleMode mode)</argsstring>
        <name>SetMode</name>
        <param>
          <type><ref refid="event_8h_1af8b16f71b9b38095fe9f7f6244665a80" kindref="member">wxIdleMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Static function for specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Can be one of the <ref refid="event_8h_1af8b16f71b9b38095fe9f7f6244665a80" kindref="member">wxIdleMode</ref> values. The default is wxIDLE_PROCESS_ALL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="3769" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is used for idle events, which are generated when the system becomes idle. </para>    </briefdescription>
    <detaileddescription>
<para>Note that, unless you do something specifically, the idle events are not sent if the system remains idle once it has become it, e.g. only a single idle event will be generated until something else resulting in more normal events happens and only then is the next idle event sent again.</para><para>If you need to ensure a continuous stream of idle events, you can either use <ref refid="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" kindref="member">wxIdleEvent::RequestMore</ref> method in your handler or call <ref refid="group__group__funcmacro__appinitterm_1ga97206743f70b5382f9e2615217604d15" kindref="member">wxWakeUpIdle()</ref> periodically (for example from a timer event handler), but note that both of these approaches (and especially the first one) increase the system load and so should be avoided if possible.</para><para>By default, idle events are sent to all windows, including even the hidden ones because they may be shown if some condition is met from their <computeroutput>wxEVT_IDLE</computeroutput> (or related <computeroutput>wxEVT_UPDATE_UI</computeroutput>) handler. The children of hidden windows do not receive idle events however as they can&apos;t change their state in any way noticeable by the user. Finally, the global <ref refid="classwx_app" kindref="compound">wxApp</ref> object also receives these events, as usual, so it can be used for any global idle time processing.</para><para>If sending idle events to all windows is causing a significant overhead in your application, you can call <ref refid="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" kindref="member">wxIdleEvent::SetMode</ref> with the value wxIDLE_PROCESS_SPECIFIED, and set the wxWS_EX_PROCESS_IDLE extra window style for every window which should receive idle events, all the other ones will not receive them in this case.</para><para><linebreak/>
<heading level="2">Events using this class</heading>
</para><para>The following event handler macros redirect the events to member function handlers &apos;<bold>func</bold>&apos; with prototypes like: void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_idle_event" kindref="compound">wxIdleEvent</ref>&amp;<nonbreakablespace/>event)</para><para>Event macros: <itemizedlist>
<listitem><para>EVT_IDLE(func): Process a <computeroutput>wxEVT_IDLE</computeroutput> event. <linebreak/>
 <heading level="2"></heading>
</para></listitem>
</itemizedlist>
Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><sect1 id="classwx_idle_event_1sec_delayed_action">
<title>Delayed Action Mechanism</title>
<para><ref refid="classwx_idle_event" kindref="compound">wxIdleEvent</ref> can be used to perform some action &quot;at slightly later time&quot;. This can be necessary in several circumstances when, for whatever reason, something can&apos;t be done in the current event handler. For example, if a mouse event handler is called with the mouse button pressed, the mouse can be currently captured and some operations with it <ndash/> notably capturing it again <ndash/> might be impossible or lead to undesirable results. If you still want to capture it, you can do it from <computeroutput>wxEVT_IDLE</computeroutput> handler when it is called the next time instead of doing it immediately.</para><para>This can be achieved in two different ways: when using static event tables, you will need a flag indicating to the (always connected) idle event handler whether the desired action should be performed. The originally called handler would then set it to indicate that it should indeed be done and the idle handler itself would reset it to prevent it from doing the same action again.</para><para>Using dynamically connected event handlers things are even simpler as the original event handler can simply <ref refid="classwx_evt_handler_1a78719e8b82c9f9c6e4056b3449df1943" kindref="member">wxEvtHandler::Connect()</ref> or <ref refid="classwx_evt_handler_1a0f30c8fa5583b4a5f661897d63de3b62" kindref="member">wxEvtHandler::Bind()</ref> the idle event handler which would only be executed then and could <ref refid="classwx_evt_handler_1a13061cf0ed01ac10a804ac057ef4bdbc" kindref="member">wxEvtHandler::Disconnect()</ref> or <ref refid="classwx_evt_handler_1a2b7df8272075a96daea78cdd799c00da" kindref="member">wxEvtHandler::Unbind()</ref> itself.</para><para><simplesect kind="see"><para><ref refid="overview_events" kindref="compound">Events and Event Handling</ref>, <ref refid="classwx_update_u_i_event" kindref="compound">wxUpdateUIEvent</ref>, <ref refid="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" kindref="member">wxWindow::OnInternalIdle</ref> </para></simplesect>
</para></sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="3634">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="3632">
        <label>wxIdleEvent</label>
        <link refid="classwx_idle_event"/>
        <childnode refid="3633" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3633">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="3634" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3637">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="3638" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="3635">
        <label>wxIdleEvent</label>
        <link refid="classwx_idle_event"/>
        <childnode refid="3636" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3636">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="3637" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3638">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/event.h" line="3722" column="1" bodyfile="interface/wx/event.h" bodystart="3721" bodyend="3770"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxIdleEvent</scope><name>AllocExclusive</name></member>
      <member refid="classwx_event_1a26878097a702e8d0368da150125d4158" prot="public" virt="pure-virtual"><scope>wxIdleEvent</scope><name>Clone</name></member>
      <member refid="classwx_object_1a436fc8fe68cf8a31000296d9cd3d2427" prot="protected" virt="virtual"><scope>wxIdleEvent</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a3f4f497c65cef611e121c41f21dd5ccc" prot="protected" virt="virtual"><scope>wxIdleEvent</scope><name>CreateRefData</name></member>
      <member refid="classwx_object_1ae6d365f2556b26767ced8410c5e839d0" prot="public" virt="virtual"><scope>wxIdleEvent</scope><name>GetClassInfo</name></member>
      <member refid="classwx_event_1ac4958ff6ec32b7f4b23066932d611131" prot="public" virt="virtual"><scope>wxIdleEvent</scope><name>GetEventCategory</name></member>
      <member refid="classwx_event_1a424a4ffaaaf95164d8952ef9ab2ef444" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetEventObject</name></member>
      <member refid="classwx_event_1a01c89719ef6241a6e612a313a259c1c2" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetEventType</name></member>
      <member refid="classwx_event_1ae7d3e088f0f165ad0421717dd33e4460" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetEventUserData</name></member>
      <member refid="classwx_event_1ac5fa5c10d4845d903e58026a42b403c7" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetId</name></member>
      <member refid="classwx_idle_event_1a087228d3f36f8ce0ba86f84cec2e3138" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetMode</name></member>
      <member refid="classwx_object_1af3c6c76a775864832f1536d3c0de3a2b" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetRefData</name></member>
      <member refid="classwx_event_1aa770dbcd0f1714ba097836af6534b4c5" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetSkipped</name></member>
      <member refid="classwx_event_1a48662230971127737d2500cef7be549d" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>GetTimestamp</name></member>
      <member refid="classwx_event_1a31f6a4377d6d36964b8eae4e56ec43e0" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>IsCommandEvent</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>IsSameAs</name></member>
      <member refid="classwx_event_1ac81911194f1f59e1454c0397b87975d4" prot="protected" virt="non-virtual"><scope>wxIdleEvent</scope><name>m_propagationLevel</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxIdleEvent</scope><name>m_refData</name></member>
      <member refid="classwx_idle_event_1a455ecec06a87eec2188d8e4984cf99ff" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>MoreRequested</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>operator new</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>Ref</name></member>
      <member refid="classwx_idle_event_1a6fbe979090c15ba40e6509d9c41f2f78" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>RequestMore</name></member>
      <member refid="classwx_event_1a0acb5c75f6e67b8822ad8ba3c5bdc4fe" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>ResumePropagation</name></member>
      <member refid="classwx_event_1a3460217d04c36393ab868ba453fde13d" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetEventObject</name></member>
      <member refid="classwx_event_1aa29fb7459d64602e09837fea1e516d27" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetEventType</name></member>
      <member refid="classwx_event_1ab9973f687bfa8a60318d8d9bd629d0d4" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetId</name></member>
      <member refid="classwx_idle_event_1a655610b1a5a1c668efc7d475313af2e3" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetMode</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetRefData</name></member>
      <member refid="classwx_event_1ad4380dff3144a986cb960473051a1d8d" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>SetTimestamp</name></member>
      <member refid="classwx_event_1ac7a178c3c781c80f1308945042f76e7f" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>ShouldPropagate</name></member>
      <member refid="classwx_event_1a98eb20b76106f9a933c2eb3ee119f66c" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>Skip</name></member>
      <member refid="classwx_event_1a060a7d222404daff4d3cef30cddeaae3" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>StopPropagation</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>UnShare</name></member>
      <member refid="classwx_event_1aaf2a5cf056d006859cea36689ba13d36" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxEvent</name></member>
      <member refid="classwx_idle_event_1a32e646bcae35740990449b6a5387d0e8" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxIdleEvent</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxIdleEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxIdleEvent</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
