<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_html_tag" kind="class" language="C++" prot="public">
    <compoundname>wxHtmlTag</compoundname>
    <includes local="no">wx/html/htmltag.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_html_tag_1ac1d8125416ce5f0a6fd4c029e13fc75a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxHtmlTag::ScanParam</definition>
        <argsstring>(const wxString &amp;par, const wchar_t *format, void *value) const</argsstring>
        <name>ScanParam</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This method scans the given parameter. </para>        </briefdescription>
        <detaileddescription>
<para>Usage is exactly the same as sscanf&apos;s usage except that you don&apos;t pass a string but a parameter name as the first argument and you can only retrieve one value (i.e. you can use only one &quot;%&quot; element in <emphasis>format</emphasis>).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the tag you want to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>scanf()-like format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a variable to store the value in </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1ac9d85599a7b9bb294afb9b783289fdac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxHtmlTag::ScanParam</definition>
        <argsstring>(const wxString &amp;par, const char *format, void *value) const</argsstring>
        <name>ScanParam</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This method scans the given parameter. </para>        </briefdescription>
        <detaileddescription>
<para>Usage is exactly the same as sscanf&apos;s usage except that you don&apos;t pass a string but a parameter name as the first argument and you can only retrieve one value (i.e. you can use only one &quot;%&quot; element in <emphasis>format</emphasis>).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the tag you want to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>scanf()-like format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a variable to store the value in </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="201" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_html_tag_1ab1c1e1b3bfd2a1aab3e683fa0a84cae8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxHtmlTag::wxHtmlTag</definition>
        <argsstring>(wxHtmlTag *parent, const wxString *source, const const_iterator &amp;pos, const const_iterator &amp;end_pos, wxHtmlTagsCache *cache, wxHtmlEntitiesParser *entParser)</argsstring>
        <name>wxHtmlTag</name>
        <param>
          <type><ref refid="classwx_html_tag" kindref="compound">wxHtmlTag</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const const_iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const const_iterator &amp;</type>
          <declname>end_pos</declname>
        </param>
        <param>
          <type>wxHtmlTagsCache *</type>
          <declname>cache</declname>
        </param>
        <param>
          <type>wxHtmlEntitiesParser *</type>
          <declname>entParser</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>You will probably never have to construct a <ref refid="classwx_html_tag" kindref="compound">wxHtmlTag</ref> object yourself. Feel free to ignore the constructor parameters. Have a look at <computeroutput>src/html/htmlpars.cpp</computeroutput> if you&apos;re interested in creating it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="25" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_html_tag_1ae9cfba22ccfaacc33bff26ade1156dfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxHtmlTag::GetAllParams</definition>
        <argsstring>() const</argsstring>
        <name>GetAllParams</name>
        <briefdescription>
<para>Returns a string containing all parameters. </para>        </briefdescription>
        <detaileddescription>
<para>Example: tag contains &lt;FONT SIZE=+2 COLOR=&quot;#000000&quot;&gt;. Call to tag.GetAllParams() would return <computeroutput>&apos;SIZE=+2</computeroutput> COLOR=&quot;#000000&quot;&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1ab404b3defb527cded69458f15687ab19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxHtmlTag::GetBeginPos</definition>
        <argsstring>() const</argsstring>
        <name>GetBeginPos</name>
        <briefdescription>
<para>Returns beginning position of the text <emphasis>between</emphasis> this tag and paired ending tag. </para>        </briefdescription>
        <detaileddescription>
<para>See explanation (returned position is marked with &apos;|&apos;): <programlisting><codeline><highlight class="normal">bla<sp/>bla<sp/>bla<sp/>&lt;MYTAG&gt;<sp/>bla<sp/>bla<sp/>internal<sp/>text&lt;/MYTAG&gt;<sp/>bla<sp/>bla</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
</programlisting></para><para><xrefsect id="deprecated_1_deprecated000021"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><xrefsect id="todo_1_todo000024"><xreftitle>Todo</xreftitle><xrefdescription><para>provide deprecation description </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1a0d750710492a9b3f2c4f35a8a4ae8573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxHtmlTag::GetEndPos1</definition>
        <argsstring>() const</argsstring>
        <name>GetEndPos1</name>
        <briefdescription>
<para>Returns ending position of the text <emphasis>between</emphasis> this tag and paired ending tag. </para>        </briefdescription>
        <detaileddescription>
<para>See explanation (returned position is marked with &apos;|&apos;): <programlisting><codeline><highlight class="normal">bla<sp/>bla<sp/>bla<sp/>&lt;MYTAG&gt;<sp/>bla<sp/>bla<sp/>internal<sp/>text&lt;/MYTAG&gt;<sp/>bla<sp/>bla</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
</programlisting></para><para><xrefsect id="deprecated_1_deprecated000022"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><xrefsect id="todo_1_todo000025"><xreftitle>Todo</xreftitle><xrefdescription><para>provide deprecation description </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1a6d1a3a5b349ac37c05303f38b81bbfc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxHtmlTag::GetEndPos2</definition>
        <argsstring>() const</argsstring>
        <name>GetEndPos2</name>
        <briefdescription>
<para>Returns ending position 2 of the text <emphasis>between</emphasis> this tag and paired ending tag. </para>        </briefdescription>
        <detaileddescription>
<para>See explanation (returned position is marked with &apos;|&apos;): <programlisting><codeline><highlight class="normal">bla<sp/>bla<sp/>bla<sp/>&lt;MYTAG&gt;<sp/>bla<sp/>bla<sp/>internal<sp/>text&lt;/MYTAG&gt;<sp/>bla<sp/>bla</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
</programlisting></para><para><xrefsect id="deprecated_1_deprecated000023"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><xrefsect id="todo_1_todo000026"><xreftitle>Todo</xreftitle><xrefdescription><para>provide deprecation description </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1a80da2df90941a490d91df5cc7d7fb53c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxHtmlTag::GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns tag&apos;s name. </para>        </briefdescription>
        <detaileddescription>
<para>The name is always in uppercase and it doesn&apos;t contain " or &apos;/&apos; characters. (So the name of &lt;FONT SIZE=+2&gt; tag is &quot;FONT&quot; and name of &lt;/table&gt; is &quot;TABLE&quot;). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1a5e538fce024e8361862b63a688928a45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxHtmlTag::GetParam</definition>
        <argsstring>(const wxString &amp;par, bool with_quotes=false) const</argsstring>
        <name>GetParam</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_quotes</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the value of the parameter. </para>        </briefdescription>
        <detaileddescription>
<para>You should check whether the parameter exists or not (use <ref refid="classwx_html_tag_1a2899d1fcf2e4c98e81324470612c1057" kindref="member">wxHtmlTag::HasParam</ref>) first or use <ref refid="classwx_html_tag_1a024c3659eaee2f733e38ac8944722664" kindref="member">GetParamAsString()</ref> if you need to distinguish between non-specified and empty parameter values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter&apos;s name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_quotes</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you want to get quotes as well. See example.</para></parameterdescription>
</parameteritem>
</parameterlist>
Example: <programlisting><codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">//<sp/>you<sp/>have<sp/>wxHtmlTag<sp/>variable<sp/>tag<sp/>which<sp/>is<sp/>equal<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">//<sp/>HTML<sp/>tag<sp/>&lt;FONT<sp/>SIZE=+2<sp/>COLOR=&quot;#0000FF&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal">dummy<sp/>=<sp/>tag.GetParam(&quot;SIZE&quot;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>dummy<sp/>==<sp/>&quot;+2&quot;</highlight></codeline>
<codeline><highlight class="normal">dummy<sp/>=<sp/>tag.GetParam(&quot;COLOR&quot;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>dummy<sp/>==<sp/>&quot;#0000FF&quot;</highlight></codeline>
<codeline><highlight class="normal">dummy<sp/>=<sp/>tag.GetParam(&quot;COLOR&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>dummy<sp/>==<sp/>&quot;\&quot;#0000FF\&quot;&quot;<sp/>--<sp/>see<sp/>the<sp/>difference!!</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1ab6e8ed643b452ee869a1fdfd907f3dea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxHtmlTag::GetParamAsColour</definition>
        <argsstring>(const wxString &amp;par, wxColour *clr) const</argsstring>
        <name>GetParamAsColour</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type><ref refid="classwx_colour" kindref="compound">wxColour</ref> *</type>
          <declname>clr</declname>
        </param>
        <briefdescription>
<para>Interprets tag parameter <emphasis>par</emphasis> as colour specification and saves its value into <ref refid="classwx_colour" kindref="compound">wxColour</ref> variable pointed by <emphasis>clr</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true on success and false if <emphasis>par</emphasis> is not colour specification or if the tag has no such parameter.</para><para><simplesect kind="see"><para><ref refid="classwx_html_tag_1a32b6f3516fe795ed20988232cd56e3f5" kindref="member">ParseAsColour()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1af483e960613cecf55a94f3ba63f3815b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxHtmlTag::GetParamAsInt</definition>
        <argsstring>(const wxString &amp;par, int *value) const</argsstring>
        <name>GetParamAsInt</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Interprets tag parameter <emphasis>par</emphasis> as an integer and saves its value into int variable pointed by <emphasis>value</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true on success and false if <emphasis>par</emphasis> is not an integer or if the tag has no such parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1a024c3659eaee2f733e38ac8944722664" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxHtmlTag::GetParamAsString</definition>
        <argsstring>(const wxString &amp;par, wxString *value) const</argsstring>
        <name>GetParamAsString</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get the value of the parameter. </para>        </briefdescription>
        <detaileddescription>
<para>If the tag doesn&apos;t have such parameter at all, simply returns false. Otherwise, fills <emphasis>value</emphasis> with the parameter value and returns true.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter&apos;s name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the string to be filled with the parameter value, must be non-NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1ae9e52aca4d5361ebb59cb0bb8a310a66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxHtmlTag::HasEnding</definition>
        <argsstring>() const</argsstring>
        <name>HasEnding</name>
        <briefdescription>
<para>Returns true if this tag is paired with ending tag, false otherwise. </para>        </briefdescription>
        <detaileddescription>
<para>See the example of HTML document: <programlisting><codeline><highlight class="normal">&lt;html&gt;&lt;body&gt;</highlight></codeline>
<codeline><highlight class="normal">Hello&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal">How<sp/>are<sp/>you?</highlight></codeline>
<codeline><highlight class="normal">&lt;p<sp/>align=center&gt;This<sp/>is<sp/>centered...&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">Oops&lt;br&gt;Oooops!</highlight></codeline>
<codeline><highlight class="normal">&lt;/body&gt;&lt;/html&gt;</highlight></codeline>
</programlisting></para><para>In this example tags HTML and BODY have ending tags, first P and BR doesn&apos;t have ending tag while the second P has. The third P tag (which is ending itself) of course doesn&apos;t have ending tag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_html_tag_1a2899d1fcf2e4c98e81324470612c1057" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxHtmlTag::HasParam</definition>
        <argsstring>(const wxString &amp;par) const</argsstring>
        <name>HasParam</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <briefdescription>
<para>Returns true if the tag has a parameter of the given name. </para>        </briefdescription>
        <detaileddescription>
<para>Example: &lt;FONT SIZE=+2 COLOR=&quot;\#FF00FF&quot;&gt; has two parameters named &quot;SIZE&quot; and &quot;COLOR&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter you&apos;re looking for. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="169" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_html_tag_1a32b6f3516fe795ed20988232cd56e3f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wxHtmlTag::ParseAsColour</definition>
        <argsstring>(const wxString &amp;str, wxColour *clr)</argsstring>
        <name>ParseAsColour</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classwx_colour" kindref="compound">wxColour</ref> *</type>
          <declname>clr</declname>
        </param>
        <briefdescription>
<para>Parses the given string as an HTML colour. </para>        </briefdescription>
        <detaileddescription>
<para>This function recognizes the standard named HTML 4 colours as well as the usual RGB syntax.</para><para><simplesect kind="since"><para>2.9.1</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_colour_1a362d7d0a873b770d6623d4cd547868a0" kindref="member">wxColour::Set()</ref></para></simplesect>
<simplesect kind="return"><para>true if the string was successfully parsed and <emphasis>clr</emphasis> was filled with the result or false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/html/htmltag.h" line="184" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents a single HTML tag. </para>    </briefdescription>
    <detaileddescription>
<para>It is used by <ref refid="overview_html_1overview_html_handlers" kindref="member">tag handlers</ref>.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxhtml" kindref="member">wxHTML</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt; </para>    </detaileddescription>
    <location file="interface/wx/html/htmltag.h" line="18" column="1" bodyfile="interface/wx/html/htmltag.h" bodystart="17" bodyend="203"/>
    <listofallmembers>
      <member refid="classwx_html_tag_1ae9cfba22ccfaacc33bff26ade1156dfa" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetAllParams</name></member>
      <member refid="classwx_html_tag_1ab404b3defb527cded69458f15687ab19" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetBeginPos</name></member>
      <member refid="classwx_html_tag_1a0d750710492a9b3f2c4f35a8a4ae8573" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetEndPos1</name></member>
      <member refid="classwx_html_tag_1a6d1a3a5b349ac37c05303f38b81bbfc1" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetEndPos2</name></member>
      <member refid="classwx_html_tag_1a80da2df90941a490d91df5cc7d7fb53c" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetName</name></member>
      <member refid="classwx_html_tag_1a5e538fce024e8361862b63a688928a45" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetParam</name></member>
      <member refid="classwx_html_tag_1ab6e8ed643b452ee869a1fdfd907f3dea" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetParamAsColour</name></member>
      <member refid="classwx_html_tag_1af483e960613cecf55a94f3ba63f3815b" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetParamAsInt</name></member>
      <member refid="classwx_html_tag_1a024c3659eaee2f733e38ac8944722664" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>GetParamAsString</name></member>
      <member refid="classwx_html_tag_1ae9e52aca4d5361ebb59cb0bb8a310a66" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>HasEnding</name></member>
      <member refid="classwx_html_tag_1a2899d1fcf2e4c98e81324470612c1057" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>HasParam</name></member>
      <member refid="classwx_html_tag_1a32b6f3516fe795ed20988232cd56e3f5" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>ParseAsColour</name></member>
      <member refid="classwx_html_tag_1ac1d8125416ce5f0a6fd4c029e13fc75a" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>ScanParam</name></member>
      <member refid="classwx_html_tag_1ac9d85599a7b9bb294afb9b783289fdac" prot="public" virt="non-virtual"><scope>wxHtmlTag</scope><name>ScanParam</name></member>
      <member refid="classwx_html_tag_1ab1c1e1b3bfd2a1aab3e683fa0a84cae8" prot="protected" virt="non-virtual"><scope>wxHtmlTag</scope><name>wxHtmlTag</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
