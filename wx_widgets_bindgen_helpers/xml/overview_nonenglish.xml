<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="overview_nonenglish" kind="page">
    <compoundname>overview_nonenglish</compoundname>
    <title>Writing Non-English Applications</title>
    <tableofcontents/>
    <briefdescription>
<para><linebreak/>
 This article describes how to write applications that communicate with the user in a language other than English. </para>    </briefdescription>
    <detaileddescription>
<para><linebreak/>
 This article describes how to write applications that communicate with the user in a language other than English.</para><para>Unfortunately many languages use different charsets under Unix and Windows (and other platforms, to make the situation even more complicated). These charsets usually differ in so many characters that it is impossible to use the same texts under all platforms.</para><para>The wxWidgets library provides a mechanism that helps you avoid distributing many identical, only differently encoded, packages with your application (e.g. help files and menu items in iso8859-13 and windows-1257). Thanks to this mechanism you can, for example, distribute only iso8859-13 data and it will be handled transparently under all systems.</para><para>Please read the <ref refid="overview_i18n" kindref="compound">Internationalization</ref> which describes the locales concept.</para><para>In the following text, wherever <emphasis>iso8859-2</emphasis> and <emphasis>windows-1250</emphasis> are used, any encodings are meant and any encodings may be substituted there.</para><sect1 id="overview_nonenglish_1overview_nonenglish_locales">
<title>Locales</title>
<para>The best way to ensure correctly displayed texts in a GUI across platforms is to use locales. Write your in-code messages in English or without diacritics and put real messages into the message catalog (see <ref refid="overview_i18n" kindref="compound">Internationalization</ref>).</para><para>A standard .po file begins with a header like this:</para><para><programlisting><codeline><highlight class="normal">#<sp/>SOME<sp/>DESCRIPTIVE<sp/>TITLE.</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Copyright<sp/>(C)<sp/>YEAR<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight></codeline>
<codeline><highlight class="normal">#<sp/>FIRST<sp/>AUTHOR<sp/>&lt;EMAIL@ADDRESS&gt;,<sp/>YEAR.</highlight></codeline>
<codeline><highlight class="normal">#</highlight></codeline>
<codeline><highlight class="normal">msgid<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">msgstr<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Project-Id-Version:<sp/>PACKAGE<sp/>VERSION\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;POT-Creation-Date:<sp/>1999-02-19<sp/>16:03+0100\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;PO-Revision-Date:<sp/>YEAR-MO-DA<sp/>HO:MI+ZONE\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Last-Translator:<sp/>FULL<sp/>NAME<sp/>&lt;EMAIL@ADDRESS&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Language-Team:<sp/>LANGUAGE<sp/>&lt;LL@li.org&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;MIME-Version:<sp/>1.0\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Content-Type:<sp/>text/plain;<sp/>charset=CHARSET\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Content-Transfer-Encoding:<sp/>ENCODING\n&quot;</highlight></codeline>
</programlisting></para><para>Note this particular line:</para><para><programlisting><codeline><highlight class="normal">&quot;Content-Type:<sp/>text/plain;<sp/>charset=CHARSET\n&quot;</highlight></codeline>
</programlisting></para><para>It specifies the charset used by the catalog. All strings in the catalog are encoded using this charset.</para><para>You have to fill in proper charset information. Your .po file may look like this after doing so:</para><para><programlisting><codeline><highlight class="normal">#<sp/>SOME<sp/>DESCRIPTIVE<sp/>TITLE.</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Copyright<sp/>(C)<sp/>YEAR<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight></codeline>
<codeline><highlight class="normal">#<sp/>FIRST<sp/>AUTHOR<sp/>&lt;EMAIL@ADDRESS&gt;,<sp/>YEAR.</highlight></codeline>
<codeline><highlight class="normal">#</highlight></codeline>
<codeline><highlight class="normal">msgid<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">msgstr<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Project-Id-Version:<sp/>PACKAGE<sp/>VERSION\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;POT-Creation-Date:<sp/>1999-02-19<sp/>16:03+0100\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;PO-Revision-Date:<sp/>YEAR-MO-DA<sp/>HO:MI+ZONE\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Last-Translator:<sp/>FULL<sp/>NAME<sp/>&lt;EMAIL@ADDRESS&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Language-Team:<sp/>LANGUAGE<sp/>&lt;LL@li.org&gt;\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;MIME-Version:<sp/>1.0\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Content-Type:<sp/>text/plain;<sp/>charset=iso8859-2\n&quot;</highlight></codeline>
<codeline><highlight class="normal">&quot;Content-Transfer-Encoding:<sp/>8bit\n&quot;</highlight></codeline>
</programlisting></para><para>(Make sure that the header is <bold>not</bold> marked as <emphasis>fuzzy</emphasis>.)</para><para>wxWidgets is able to use this catalog under any supported platform (although iso8859-2 is a Unix encoding and is normally not understood by Windows).</para><para>How is this done? When you tell the <ref refid="classwx_locale" kindref="compound">wxLocale</ref> class to load a message catalog that contains a correct header, it checks the charset. The catalog is then converted to the charset used (see <ref refid="classwx_locale_1aa807dd0db36c3bd6556c2a37014239d6" kindref="member">wxLocale::GetSystemEncoding</ref> and <ref refid="classwx_locale_1a301032f2ecdf0be5321fab2281c71206" kindref="member">wxLocale::GetSystemEncodingName</ref>) by the user&apos;s operating system.</para></sect1>
<sect1 id="overview_nonenglish_1overview_nonenglish_strings">
<title>Non-English Strings or 8-bit Characters in Source</title>
<para>By convention, you should only use characters without diacritics (i.e. 7-bit ASCII strings) for msgids in the source code and write them in English.</para><para>If you port software to wxWidgets, you may be confronted with legacy source code containing non-English string literals. Instead of translating the strings in the source code to English and putting the original strings into message catalog, you may configure wxWidgets to use non-English msgids and translate to English using message catalogs:</para><para><itemizedlist>
<listitem><para>If you use the program <computeroutput>xgettext</computeroutput> to extract the strings from the source code, specify the option <computeroutput><ndash/>from-code=&lt;source code charset&gt;</computeroutput>. </para></listitem>
<listitem><para>Specify the source code language and charset as arguments to <ref refid="classwx_locale_1a1e9eb6387646a94c65d1493b5be7641c" kindref="member">wxLocale::AddCatalog</ref>. For example: <programlisting><codeline><highlight class="normal">locale.AddCatalog(wxT(&quot;myapp&quot;),<sp/>wxLANGUAGE_GERMAN,<sp/>wxT(&quot;iso-8859-1&quot;));</highlight></codeline>
</programlisting></para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="overview_nonenglish_1overview_nonenglish_fontmapping">
<title>Font Mapping</title>
<para>You can use <ref refid="overview_mbconv" kindref="compound">wxMBConv Overview</ref> and <ref refid="classwx_font_mapper" kindref="compound">wxFontMapper</ref> to display text:</para><para><programlisting><codeline><highlight class="normal">if<sp/>(!wxFontMapper::Get()-&gt;IsEncodingAvailable(enc,<sp/>facename))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxFontEncoding<sp/>alternative;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(wxFontMapper::Get()-&gt;GetAltForEncoding(enc,<sp/>&amp;alternative,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>facename,<sp/>false))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxCSConv<sp/>convFrom(wxFontMapper::Get()-&gt;GetEncodingName(enc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxCSConv<sp/>convTo(wxFontMapper::Get()-&gt;GetEncodingName(alternative));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>wxString(text.mb_str(convFrom),<sp/>convTo);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...failure<sp/>(or<sp/>we<sp/>may<sp/>try<sp/>iso8859-1/7bit<sp/>ASCII)...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...display<sp/>text...</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_nonenglish_1overview_nonenglish_converting">
<title>Converting Data</title>
<para>You may want to store all program data (created documents etc.) in the same encoding, let&apos;s say <computeroutput>utf-8</computeroutput>. You can use <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref> to convert data to the encoding used by the system your application is running on (see <ref refid="classwx_locale_1aa807dd0db36c3bd6556c2a37014239d6" kindref="member">wxLocale::GetSystemEncoding</ref>).</para></sect1>
<sect1 id="overview_nonenglish_1overview_nonenglish_help">
<title>Help Files</title>
<para>If you&apos;re using <ref refid="classwx_html_help_controller" kindref="compound">wxHtmlHelpController</ref> there is no problem at all. You only need to make sure that all the HTML files contain the META tag:</para><para><programlisting><codeline><highlight class="normal">&lt;meta<sp/>http-equiv=&quot;Content-Type&quot;<sp/>content=&quot;text/html;<sp/>charset=iso8859-2&quot;&gt;</highlight></codeline>
</programlisting></para><para>Also, the hhp project file needs one additional line in the <computeroutput>OPTIONS</computeroutput> section:</para><para><programlisting><codeline><highlight class="normal">Charset=iso8859-2</highlight></codeline>
</programlisting></para><para>This additional entry tells the HTML help controller what encoding is used in contents and index tables. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
