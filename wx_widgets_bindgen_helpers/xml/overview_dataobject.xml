<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="overview_dataobject" kind="page">
    <compoundname>overview_dataobject</compoundname>
    <title>wxDataObject Overview</title>
    <tableofcontents/>
    <briefdescription>
<para><linebreak/>
 This overview discusses data transfer through clipboard or drag and drop. </para>    </briefdescription>
    <detaileddescription>
<para><linebreak/>
 This overview discusses data transfer through clipboard or drag and drop.</para><para>In wxWidgets, these two ways to transfer data (either between different applications or inside one and the same) are very similar which allows to implement both of them using almost the same code - or, in other words, if you implement drag and drop support for your application, you get clipboard support for free and vice versa.</para><para>At the heart of both clipboard and drag and drop operations lies the <ref refid="classwx_data_object" kindref="compound">wxDataObject</ref> class. The objects of this class (or, to be precise, classes derived from it) represent the data which is being carried by the mouse during drag and drop operation or copied to or pasted from the clipboard. <ref refid="classwx_data_object" kindref="compound">wxDataObject</ref> is a &quot;smart&quot; piece of data because it knows which formats it supports (see GetFormatCount and GetAllFormats) and knows how to render itself in any of them (see GetDataHere). It can also receive its value from the outside in a format it supports if it implements the SetData method. Please see the documentation of this class for more details.</para><para>Both clipboard and drag and drop operations have two sides: the source and target, the data provider and the data receiver. These which may be in the same application and even the same window when, for example, you drag some text from one position to another in a word processor. Let us describe what each of them should do.</para><para><simplesect kind="see"><para><ref refid="overview_dnd" kindref="compound">Drag and Drop Overview</ref>, <ref refid="group__group__class__dnd" kindref="compound">Clipboard and Drag &amp; Drop</ref>, <ref refid="page_samples_1page_samples_dnd" kindref="member">Drag &amp; Drop Sample</ref></para></simplesect>
</para><sect1 id="overview_dataobject_1overview_dataobject_source">
<title>The Data Provider (Source)</title>
<para>The data provider is responsible for creating a <ref refid="classwx_data_object" kindref="compound">wxDataObject</ref> containing the data to be transferred. Then it should either pass it to the clipboard using <ref refid="classwx_clipboard_1afae7236718f30437c15709a911d4bab6" kindref="member">wxClipboard::SetData</ref> function or to <ref refid="classwx_drop_source" kindref="compound">wxDropSource</ref> and call <ref refid="classwx_drop_source_1a7053f3286614a78d0fd8c282c286778d" kindref="member">wxDropSource::DoDragDrop</ref> function.</para><para>The only (but important) difference is that the object for the clipboard transfer must always be created on the heap (i.e. using <computeroutput>new</computeroutput>) and it will be freed by the clipboard when it is no longer needed (indeed, it is not known in advance when, if ever, the data will be pasted from the clipboard). On the other hand, the object for drag and drop operation must only exist while <ref refid="classwx_drop_source_1a7053f3286614a78d0fd8c282c286778d" kindref="member">wxDropSource::DoDragDrop</ref> executes and may be safely deleted afterwards and so can be created either on heap or on stack (i.e. as a local variable).</para><para>Another small difference is that in the case of clipboard operation, the application usually knows in advance whether it copies or cuts (i.e. copies and deletes) data - in fact, this usually depends on which menu item the user chose. But for drag and drop it can only know it after <ref refid="classwx_drop_source_1a7053f3286614a78d0fd8c282c286778d" kindref="member">wxDropSource::DoDragDrop</ref> returns (from its return value).</para></sect1>
<sect1 id="overview_dataobject_1overview_dataobject_target">
<title>The Data Receiver (Target)</title>
<para>To receive (paste in usual terminology) data from the clipboard, you should create a <ref refid="classwx_data_object" kindref="compound">wxDataObject</ref> derived class which supports the data formats you need and pass it as argument to <ref refid="classwx_clipboard_1af9edcd205c3749a317bd6b1e8a5716cc" kindref="member">wxClipboard::GetData</ref>. If it returns false, no data in (any of) the supported format(s) is available. If it returns true, the data has been successfully transferred to <ref refid="classwx_data_object" kindref="compound">wxDataObject</ref>.</para><para>For drag and drop case, the <ref refid="classwx_drop_target_1a127799d4bd9bb1bba28b17f3b161eae7" kindref="member">wxDropTarget::OnData</ref> virtual function will be called when a data object is dropped, from which the data itself may be requested by calling <ref refid="classwx_drop_target_1a179adb5f161e0a8abc17e65f4470c51d" kindref="member">wxDropTarget::GetData</ref> method which fills the data object. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
