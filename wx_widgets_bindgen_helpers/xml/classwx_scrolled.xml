<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_scrolled" kind="class" language="C++" prot="public">
    <compoundname>wxScrolled</compoundname>
    <basecompoundref prot="public" virt="non-virtual">T</basecompoundref>
    <derivedcompoundref refid="classwx_grid" prot="public" virt="non-virtual">wxGrid</derivedcompoundref>
    <derivedcompoundref refid="classwx_html_window" prot="public" virt="non-virtual">wxHtmlWindow</derivedcompoundref>
    <derivedcompoundref refid="classwx_preview_canvas" prot="public" virt="non-virtual">wxPreviewCanvas</derivedcompoundref>
    <includes local="no">wx/scrolwin.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_scrolled_1a01d0ecb5daa59ebb7a0806f16b7ac267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxScrolled&lt; T &gt;::wxScrolled</definition>
        <argsstring>()</argsstring>
        <name>wxScrolled</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1ae68b98d2386b81f413e08cd5410401fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxScrolled&lt; T &gt;::wxScrolled</definition>
        <argsstring>(wxWindow *parent, wxWindowID id=-1, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=wxHSCROLL|wxVSCROLL, const wxString &amp;name=&quot;scrolledWindow&quot;)</argsstring>
        <name>wxScrolled</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval><ref refid="defs_8h_1a138eed616dd15fd021e8cc838e26d589" kindref="member">wxHSCROLL</ref>|<ref refid="defs_8h_1a78a1371cbc8c3b8bb36f27b9d3c47ba9" kindref="member">wxVSCROLL</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>&quot;scrolledWindow&quot;</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent window. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Window identifier. The value <computeroutput>wxID_ANY</computeroutput> indicates a default value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Window position. If a position of <ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref> is specified then a default position is chosen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size. If a size of <ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref> is specified then the window is sized appropriately. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Window style. See <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Window name.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The window is initially created without visible scrollbars. Call <ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref> to specify how big the virtual window size should be. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a5beb86afd7eec414740ac5be2e80da33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::CalcScrolledPosition</definition>
        <argsstring>(int x, int y, int *xx, int *yy) const</argsstring>
        <name>CalcScrolledPosition</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>Translates the logical coordinates to the device ones. </para>        </briefdescription>
        <detaileddescription>
<para>For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcScrolledPosition(0, 10, xx, yy) will return 0 in yy.</para><para><bold>wxPerl Note:</bold> In wxPerl this method takes two parameters and returns a 2-element list (xx, yy).</para><para><simplesect kind="see"><para><ref refid="classwx_scrolled_1addb96196c8bc441934fb96c2b4e56a51" kindref="member">CalcUnscrolledPosition()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a86022a8d18b370380754e0ff0a101003" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxScrolled&lt; T &gt;::CalcScrolledPosition</definition>
        <argsstring>(const wxPoint &amp;pt) const</argsstring>
        <name>CalcScrolledPosition</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1addb96196c8bc441934fb96c2b4e56a51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::CalcUnscrolledPosition</definition>
        <argsstring>(int x, int y, int *xx, int *yy) const</argsstring>
        <name>CalcUnscrolledPosition</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>Translates the device coordinates to the logical ones. </para>        </briefdescription>
        <detaileddescription>
<para>For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcUnscrolledPosition(0, 0, xx, yy) will return 10 in yy.</para><para><bold>wxPerl Note:</bold> In wxPerl this method takes two parameters and returns a 2-element list (xx, yy).</para><para><simplesect kind="see"><para><ref refid="classwx_scrolled_1a5beb86afd7eec414740ac5be2e80da33" kindref="member">CalcScrolledPosition()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a538b168f093df93ced48d297b5599291" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxScrolled&lt; T &gt;::CalcUnscrolledPosition</definition>
        <argsstring>(const wxPoint &amp;pt) const</argsstring>
        <name>CalcUnscrolledPosition</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a9f03bd3bcbb96c84f90c2482f58f075a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxScrolled&lt; T &gt;::Create</definition>
        <argsstring>(wxWindow *parent, wxWindowID id=-1, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=wxHSCROLL|wxVSCROLL, const wxString &amp;name=&quot;scrolledWindow&quot;)</argsstring>
        <name>Create</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval><ref refid="defs_8h_1a138eed616dd15fd021e8cc838e26d589" kindref="member">wxHSCROLL</ref>|<ref refid="defs_8h_1a78a1371cbc8c3b8bb36f27b9d3c47ba9" kindref="member">wxVSCROLL</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>&quot;scrolledWindow&quot;</defval>
        </param>
        <briefdescription>
<para>Creates the window for two-step construction. </para>        </briefdescription>
        <detaileddescription>
<para>Derived classes should call or replace this function. See <ref refid="classwx_scrolled_1a01d0ecb5daa59ebb7a0806f16b7ac267" kindref="member">wxScrolled::wxScrolled()</ref> for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a294b1585caef1c22f5ea1ac6a6787164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::DisableKeyboardScrolling</definition>
        <argsstring>()</argsstring>
        <name>DisableKeyboardScrolling</name>
        <briefdescription>
<para>Disable use of keyboard keys for scrolling. </para>        </briefdescription>
        <detaileddescription>
<para>By default cursor movement keys (including Home, End, Page Up and Down) are used to scroll the window appropriately. If the derived class uses these keys for something else, e.g. changing the currently selected item, this function can be used to disable this behaviour as it&apos;s not only not necessary then but can actually be actively harmful if another object forwards a keyboard event corresponding to one of the above keys to us using ProcessWindowEvent() because the event will always be processed which can be undesirable.</para><para><simplesect kind="since"><para>2.9.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::DoPrepareDC</definition>
        <argsstring>(wxDC &amp;dc)</argsstring>
        <name>DoPrepareDC</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <briefdescription>
<para>Call this function to prepare the device context for drawing a scrolled image. </para>        </briefdescription>
        <detaileddescription>
<para>It sets the device origin according to the current scroll position. <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref> is called automatically within the default <computeroutput>wxEVT_PAINT</computeroutput> event handler, so your <ref refid="classwx_scrolled_1a52284d06a6160fb42b0899aedce2c880" kindref="member">OnDraw()</ref> override will be passed an already &apos;pre-scrolled&apos; device context. However, if you wish to draw from outside of <ref refid="classwx_scrolled_1a52284d06a6160fb42b0899aedce2c880" kindref="member">OnDraw()</ref> (e.g. from your own <computeroutput>wxEVT_PAINT</computeroutput> handler), you must call this function yourself.</para><para>For example: <programlisting><codeline><highlight class="normal">void<sp/>MyWindow::OnEvent(wxMouseEvent&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>wxClientDC<sp/>dc(this);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DoPrepareDC(dc);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>dc.SetPen(*wxBLACK_PEN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>float<sp/>x,<sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>event.Position(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(xpos<sp/>&gt;<sp/>-1<sp/>&amp;&amp;<sp/>ypos<sp/>&gt;<sp/>-1<sp/>&amp;&amp;<sp/>event.Dragging())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dc.DrawLine(xpos,<sp/>ypos,<sp/>x,<sp/>y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>xpos<sp/>=<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ypos<sp/>=<sp/>y;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Notice that the function sets the origin by moving it relatively to the current origin position, so you shouldn&apos;t change the origin before calling <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref> or, if you do, reset it to (0, 0) later. If you call <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref> immediately after device context creation, as in the example above, this problem doesn&apos;t arise, of course, so it is customary to do it like this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1ac5a023517721a5ad5b891527b437dd61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::EnableScrolling</definition>
        <argsstring>(bool xScrolling, bool yScrolling)</argsstring>
        <name>EnableScrolling</name>
        <param>
          <type>bool</type>
          <declname>xScrolling</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>yScrolling</declname>
        </param>
        <briefdescription>
<para>Enable or disable use of <ref refid="classwx_window_1ab7be4956ff22da37fff2b8aaa581045c" kindref="member">wxWindow::ScrollWindow()</ref> for scrolling. </para>        </briefdescription>
        <detaileddescription>
<para>By default, when a scrolled window is logically scrolled, <ref refid="classwx_window_1ab7be4956ff22da37fff2b8aaa581045c" kindref="member">wxWindow::ScrollWindow()</ref> is called on the underlying window which scrolls the window contents and only invalidates the part of the window newly brought into view. If false is passed as an argument, then this &quot;physical scrolling&quot; is disabled and the window is entirely invalidated whenever it is scrolled by calling <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">wxWindow::Refresh()</ref>.</para><para>It should be rarely necessary to disable physical scrolling, so this method shouldn&apos;t be called in normal circumstances.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xScrolling</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, enables physical scrolling in the x direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yScrolling</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, enables physical scrolling in the y direction. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a8590337dc643a64437c56031cf5f2e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::ShowScrollbars</definition>
        <argsstring>(wxScrollbarVisibility horz, wxScrollbarVisibility vert)</argsstring>
        <name>ShowScrollbars</name>
        <param>
          <type><ref refid="scrolwin_8h_1a4351a92a4d06bc722e0c604d6482a5a4" kindref="member">wxScrollbarVisibility</ref></type>
          <declname>horz</declname>
        </param>
        <param>
          <type><ref refid="scrolwin_8h_1a4351a92a4d06bc722e0c604d6482a5a4" kindref="member">wxScrollbarVisibility</ref></type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Set the scrollbar visibility. </para>        </briefdescription>
        <detaileddescription>
<para>By default the scrollbar in the corresponding direction is only shown if it is needed, i.e. if the virtual size of the scrolled window in this direction is greater than the current physical window size. Using this function the scrollbar visibility can be changed to be:<itemizedlist>
<listitem><para>wxSHOW_SB_ALWAYS: To always show the scrollbar, even if it is not needed currently (wxALWAYS_SHOW_SB style can be used during the window creation to achieve the same effect but it applies in both directions).</para></listitem><listitem><para>wxSHOW_SB_NEVER: To never show the scrollbar at all. In this case the program should presumably provide some other way for the user to scroll the window.</para></listitem><listitem><para>wxSHOW_SB_DEFAULT: To restore the default behaviour described above.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>horz</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired visibility for the horizontal scrollbar. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vert</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired visibility for the vertical scrollbar.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1ae57f966af767e2f99f486a3c45485370" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::GetScrollPixelsPerUnit</definition>
        <argsstring>(int *xUnit, int *yUnit) const</argsstring>
        <name>GetScrollPixelsPerUnit</name>
        <param>
          <type>int *</type>
          <declname>xUnit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>yUnit</declname>
        </param>
        <briefdescription>
<para>Get the number of pixels per scroll unit (line), in each direction, as set by <ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>A value of zero indicates no scrolling in that direction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the number of pixels per horizontal unit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the number of pixels per vertical unit.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 2-element list (xUnit, yUnit).</para><para><simplesect kind="see"><para><ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref>, <ref refid="classwx_scrolled_1a9e993dd807f71f622765ccc68c60082b" kindref="member">GetVirtualSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a01d57d0b9b81537dc011e3e8b3f4b43d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::GetViewStart</definition>
        <argsstring>(int *x, int *y) const</argsstring>
        <name>GetViewStart</name>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Get the position at which the visible portion of the window starts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the first visible x position in scroll units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the first visible y position in scroll units.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>If either of the scrollbars is not at the home position, <emphasis>x</emphasis> and/or <emphasis>y</emphasis> will be greater than zero. Combined with <ref refid="classwx_window_1ad34d4bbd6d3064aa56e7a2cc3ee97be3" kindref="member">wxWindow::GetClientSize()</ref>, the application can use this function to efficiently redraw only the visible portion of the window. The positions are in logical scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment.</para></simplesect>
<bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 2-element list (x, y).</para><para><simplesect kind="see"><para><ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref>, <ref refid="classwx_scrolled_1a601bcac37185a2d4a24164d065907f69" kindref="member">Scroll()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a3ced29907b1e914f841f979f272277c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_point" kindref="compound">wxPoint</ref></type>
        <definition>wxPoint wxScrolled&lt; T &gt;::GetViewStart</definition>
        <argsstring>() const</argsstring>
        <name>GetViewStart</name>
        <briefdescription>
<para>This is a simple overload of GetViewStart(int*,int*); see that function for more info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a9e993dd807f71f622765ccc68c60082b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::GetVirtualSize</definition>
        <argsstring>(int *x, int *y) const</argsstring>
        <name>GetVirtualSize</name>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Gets the size in device units of the scrollable window area (as opposed to the client size, which is the area of the window currently visible). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the length of the scrollable window, in pixels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the height of the scrollable window, in pixels.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Use <ref refid="classwx_d_c_1a17971d3a2e3834f5b261aedd493ae08e" kindref="member">wxDC::DeviceToLogicalX()</ref> and <ref refid="classwx_d_c_1af669c71c68fb759927ec2e5721a6793e" kindref="member">wxDC::DeviceToLogicalY()</ref> to translate these units to logical units.</para></simplesect>
<bold>wxPerl Note:</bold> In wxPerl this method takes no parameters and returns a 2-element list (xUnit, yUnit).</para><para><simplesect kind="see"><para><ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref>, <ref refid="classwx_scrolled_1ae57f966af767e2f99f486a3c45485370" kindref="member">GetScrollPixelsPerUnit()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a7047e92206a6e62675560fc394d9f4f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxScrolled&lt; T &gt;::IsRetained</definition>
        <argsstring>() const</argsstring>
        <name>IsRetained</name>
        <briefdescription>
<para>Motif only: true if the window has a backing bitmap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a52284d06a6160fb42b0899aedce2c880" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxScrolled&lt; T &gt;::OnDraw</definition>
        <argsstring>(wxDC &amp;dc)</argsstring>
        <name>OnDraw</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <briefdescription>
<para>Called by the default paint event handler to allow the application to define painting behaviour without having to worry about calling <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Instead of overriding this function you may also just process the paint event in the derived class as usual, but then you will have to call <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref> yourself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1ab33dbfe88be5ede4b04de4dcec4830f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::PrepareDC</definition>
        <argsstring>(wxDC &amp;dc)</argsstring>
        <name>PrepareDC</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <briefdescription>
<para>This function is for backwards compatibility only and simply calls <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref> now. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that it is not called by the default paint event handle (<ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref> is), so overriding this method in your derived class is useless. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a601bcac37185a2d4a24164d065907f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::Scroll</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>Scroll</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Scrolls a window so the view start is at the given point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position to scroll to, in scroll units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position to scroll to, in scroll units.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The positions are in scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment. If either parameter is <ref refid="defs_8h_1ae297119c813ec5d3328ce3f43f9ac6c1" kindref="member">wxDefaultCoord</ref> (-1), that position will be ignored (no change in that direction).</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref>, <ref refid="classwx_scrolled_1ae57f966af767e2f99f486a3c45485370" kindref="member">GetScrollPixelsPerUnit()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1affb3c1be4945c27b589439a1d47fbbb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::Scroll</definition>
        <argsstring>(const wxPoint &amp;pt)</argsstring>
        <name>Scroll</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="classwx_scrolled_1a601bcac37185a2d4a24164d065907f69" kindref="member">Scroll(int,int)</ref>; see that function for more info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a76286e2efa55d0ba85d37106a44a9401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::SetScrollRate</definition>
        <argsstring>(int xstep, int ystep)</argsstring>
        <name>SetScrollRate</name>
        <param>
          <type>int</type>
          <declname>xstep</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ystep</declname>
        </param>
        <briefdescription>
<para>Set the horizontal and vertical scrolling increment only. </para>        </briefdescription>
        <detaileddescription>
<para>See the pixelsPerUnit parameter in <ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::SetScrollbars</definition>
        <argsstring>(int pixelsPerUnitX, int pixelsPerUnitY, int noUnitsX, int noUnitsY, int xPos=0, int yPos=0, bool noRefresh=false)</argsstring>
        <name>SetScrollbars</name>
        <param>
          <type>int</type>
          <declname>pixelsPerUnitX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixelsPerUnitY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noUnitsX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noUnitsY</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xPos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>yPos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>noRefresh</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets up vertical and/or horizontal scrollbars. </para>        </briefdescription>
        <detaileddescription>
<para>The first pair of parameters give the number of pixels per &apos;scroll step&apos;, i.e. amount moved when the up or down scroll arrows are pressed. The second pair gives the length of scrollbar in scroll steps, which sets the size of the virtual window.</para><para><emphasis>xPos</emphasis> and <emphasis>yPos</emphasis> optionally specify a position to scroll to immediately.</para><para>For example, the following gives a window horizontal and vertical scrollbars with 20 pixels per scroll step, and a size of 50 steps (1000 pixels) in each direction: <programlisting><codeline><highlight class="normal">window-&gt;SetScrollbars(20,<sp/>20,<sp/>50,<sp/>50);</highlight></codeline>
</programlisting></para><para><ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> manages the page size itself, using the current client window size as the page size.</para><para>Note that for more sophisticated scrolling applications, for example where scroll steps may be variable according to the position in the document, it will be necessary to derive a new class from <ref refid="classwx_window" kindref="compound">wxWindow</ref>, overriding OnSize() and adjusting the scrollbars appropriately.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixelsPerUnitX</parametername>
</parameternamelist>
<parameterdescription>
<para>Pixels per scroll unit in the horizontal direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixelsPerUnitY</parametername>
</parameternamelist>
<parameterdescription>
<para>Pixels per scroll unit in the vertical direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noUnitsX</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of units in the horizontal direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noUnitsY</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of units in the vertical direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position to initialize the scrollbars in the horizontal direction, in scroll units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position to initialize the scrollbars in the vertical direction, in scroll units. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noRefresh</parametername>
</parameternamelist>
<parameterdescription>
<para>Will not refresh window if true.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_window_1a37f293b7904bc6668b86cccb0aea5669" kindref="member">wxWindow::SetVirtualSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a117dc8edabb3e1250199eab089e4fa5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::SetTargetWindow</definition>
        <argsstring>(wxWindow *window)</argsstring>
        <name>SetTargetWindow</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Call this function to tell <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> to perform the actual scrolling on a different window (and not on itself). </para>        </briefdescription>
        <detaileddescription>
<para>This method is useful when only a part of the window should be scrolled. A typical example is a control consisting of a fixed header and the scrollable contents window: the scrollbars are attached to the main window itself, hence it, and not the contents window must be derived from <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref>, but only the contents window scrolls when the scrollbars are used. To implement such setup, you need to call this method with the contents window as argument.</para><para>Notice that if this method is used, <ref refid="classwx_scrolled_1a81800886d1d5f094caeee683e707de12" kindref="member">GetSizeAvailableForScrollTarget()</ref> method must be overridden. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1aa48e3a4731d7e4dea26e89e9015e295d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxScrolled&lt; T &gt;::GetTargetWindow</definition>
        <argsstring>() const</argsstring>
        <name>GetTargetWindow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1aee90a87e1b3f7f0f70a89e085c0d9928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::SetTargetRect</definition>
        <argsstring>(const wxRect &amp;rect)</argsstring>
        <name>SetTargetRect</name>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1aa43a5283b564da82368b532b22971410" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxScrolled&lt; T &gt;::GetTargetRect</definition>
        <argsstring>() const</argsstring>
        <name>GetTargetRect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1ad41334fc7b0dcee5a53c97da4902d82a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxScrolled&lt; T &gt;::GetScrollPageSize</definition>
        <argsstring>(int orient) const</argsstring>
        <name>GetScrollPageSize</name>
        <param>
          <type>int</type>
          <declname>orient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1aa160351f31a0080784a00023947a06f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::SetScrollPageSize</definition>
        <argsstring>(int orient, int pageSize)</argsstring>
        <name>SetScrollPageSize</name>
        <param>
          <type>int</type>
          <declname>orient</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pageSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a981d158543584d2c4721d9f86587ccc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxScrolled&lt; T &gt;::GetScrollLines</definition>
        <argsstring>(int orient) const</argsstring>
        <name>GetScrollLines</name>
        <param>
          <type>int</type>
          <declname>orient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a5c8829d39d00ce53901a8b1a67d5d780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::SetScale</definition>
        <argsstring>(double xs, double ys)</argsstring>
        <name>SetScale</name>
        <param>
          <type>double</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a89bb0a54dc59ec7af02e1d08b2c8ce83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxScrolled&lt; T &gt;::GetScaleX</definition>
        <argsstring>() const</argsstring>
        <name>GetScaleX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a359410c6a60604225d03a5a490cc357e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wxScrolled&lt; T &gt;::GetScaleY</definition>
        <argsstring>() const</argsstring>
        <name>GetScaleY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a5b5e335677055e4107903f7d5dad042f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxScrolled&lt; T &gt;::AdjustScrollbars</definition>
        <argsstring>()</argsstring>
        <name>AdjustScrollbars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a9d76b612e041e10462a16a3648d09008" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxScrolled&lt; T &gt;::IsAutoScrolling</definition>
        <argsstring>() const</argsstring>
        <name>IsAutoScrolling</name>
        <briefdescription>
<para>Are we generating the autoscroll events? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a33c3daf5feb84c357357012e1b0e7a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxScrolled&lt; T &gt;::StopAutoScrolling</definition>
        <argsstring>()</argsstring>
        <name>StopAutoScrolling</name>
        <briefdescription>
<para>Stop generating the scroll events when mouse is held outside the window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_scrolled_1a2d44af932b964f1522d1c78d86cd4a27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxScrolled&lt; T &gt;::SendAutoScrollEvents</definition>
        <argsstring>(wxScrollWinEvent &amp;event) const</argsstring>
        <name>SendAutoScrollEvents</name>
        <param>
          <type><ref refid="classwx_scroll_win_event" kindref="compound">wxScrollWinEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>This method can be overridden in a derived class to forbid sending the auto scroll events - note that unlike <ref refid="classwx_scrolled_1a33c3daf5feb84c357357012e1b0e7a0a" kindref="member">StopAutoScrolling()</ref> it doesn&apos;t stop the timer, so it will be called repeatedly and will typically return different values depending on the current mouse position. </para>        </briefdescription>
        <detaileddescription>
<para>The base class version just returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="572" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_scrolled_1a81800886d1d5f094caeee683e707de12" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>virtual wxSize wxScrolled&lt; T &gt;::GetSizeAvailableForScrollTarget</definition>
        <argsstring>(const wxSize &amp;size)</argsstring>
        <name>GetSizeAvailableForScrollTarget</name>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function which must be overridden to implement the size available for the scroll target for the given size of the main window. </para>        </briefdescription>
        <detaileddescription>
<para>This method must be overridden if <ref refid="classwx_scrolled_1a117dc8edabb3e1250199eab089e4fa5b" kindref="member">SetTargetWindow()</ref> is used (it is never called otherwise). The implementation should decrease the <emphasis>size</emphasis> to account for the size of the non-scrollable parts of the main window and return only the size available for the scrollable window itself. E.g. in the example given in <ref refid="classwx_scrolled_1a117dc8edabb3e1250199eab089e4fa5b" kindref="member">SetTargetWindow()</ref> documentation the function would subtract the height of the header window from the vertical component of <emphasis>size</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/scrolwin.h" line="588" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> class manages scrolling for its client area, transforming the coordinates according to the scrollbar positions, and setting the scroll positions, thumb sizes and ranges according to the area in view. </para>    </briefdescription>
    <detaileddescription>
<para>There are two commonly used (but not the only possible!) specializations of this class:</para><para><itemizedlist>
<listitem><para><ref refid="group__group__class__miscwnd_1ga695bec5996cd4d5512d1a01cfdcf96a5" kindref="member">wxScrolledWindow</ref>, aka wxScrolled&lt;wxPanel&gt;, is equivalent to <ref refid="group__group__class__miscwnd_1ga695bec5996cd4d5512d1a01cfdcf96a5" kindref="member">wxScrolledWindow</ref> from earlier versions. Derived from <ref refid="classwx_panel" kindref="compound">wxPanel</ref>, it shares <ref refid="classwx_panel" kindref="compound">wxPanel</ref>&apos;s behaviour with regard to TAB traversal and focus handling. Use this if the scrolled window will have child controls.</para></listitem><listitem><para><ref refid="group__group__class__miscwnd_1ga6b205af0f8759231eab11f15f7d4a098" kindref="member">wxScrolledCanvas</ref>, aka wxScrolled&lt;wxWindow&gt;, derives from <ref refid="classwx_window" kindref="compound">wxWindow</ref> and so doesn&apos;t handle children specially. This is suitable e.g. for implementing scrollable controls such as tree or list controls.</para></listitem></itemizedlist>
</para><para>Starting from version 2.4 of wxWidgets, there are several ways to use a <ref refid="group__group__class__miscwnd_1ga695bec5996cd4d5512d1a01cfdcf96a5" kindref="member">wxScrolledWindow</ref> (and now <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref>). In particular, there are three ways to set the size of the scrolling area:</para><para>One way is to set the scrollbars directly using a call to <ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref>. This is the way it used to be in any previous version of wxWidgets and it will be kept for backwards compatibility.</para><para>An additional method of manual control, which requires a little less computation of your own, is to set the total size of the scrolling area by calling either <ref refid="classwx_window_1a37f293b7904bc6668b86cccb0aea5669" kindref="member">wxWindow::SetVirtualSize()</ref>, or <ref refid="classwx_window_1a55aca401aab29d59f7cc53f89ba2e38d" kindref="member">wxWindow::FitInside()</ref>, and setting the scrolling increments for it by calling <ref refid="classwx_scrolled_1a76286e2efa55d0ba85d37106a44a9401" kindref="member">SetScrollRate()</ref>. Scrolling in some orientation is enabled by setting a non-zero increment for it.</para><para>The most automatic and newest way is to simply let sizers determine the scrolling area. This is now the default when you set an interior sizer into a <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> with <ref refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" kindref="member">wxWindow::SetSizer()</ref>. The scrolling area will be set to the size requested by the sizer and the scrollbars will be assigned for each orientation according to the need for them and the scrolling increment set by <ref refid="classwx_scrolled_1a76286e2efa55d0ba85d37106a44a9401" kindref="member">SetScrollRate()</ref>. As above, scrolling is only enabled in orientations with a non-zero increment. You can influence the minimum size of the scrolled area controlled by a sizer by calling wxWindow::SetVirtualSizeHints(). (Calling <ref refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" kindref="member">SetScrollbars()</ref> has analogous effects in wxWidgets 2.4 <ndash/> in later versions it may not continue to override the sizer.)</para><para>Note that if maximum size hints are still supported by wxWindow::SetVirtualSizeHints(), use them at your own dire risk. They may or may not have been removed for 2.4, but it really only makes sense to set minimum size hints here. We should probably replace wxWindow::SetVirtualSizeHints() with wxWindow::SetMinVirtualSize() or similar and remove it entirely in future.</para><para><xrefsect id="todo_1_todo000044"><xreftitle>Todo</xreftitle><xrefdescription><para>review docs for this class replacing SetVirtualSizeHints() with SetMinClientSize().</para></xrefdescription></xrefsect></para><para>As with all windows, an application can draw onto a <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> using a <ref refid="overview_dc" kindref="compound">device context</ref>.</para><para>You have the option of handling the OnPaint handler or overriding the <ref refid="classwx_scrolled_1a52284d06a6160fb42b0899aedce2c880" kindref="member">wxScrolled::OnDraw()</ref> function, which is passed a pre-scrolled device context (prepared by <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">wxScrolled::DoPrepareDC()</ref>).</para><para>If you don&apos;t wish to calculate your own scrolling, you must call <ref refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" kindref="member">DoPrepareDC()</ref> when not drawing from within <ref refid="classwx_scrolled_1a52284d06a6160fb42b0899aedce2c880" kindref="member">OnDraw()</ref>, to set the device origin for the device context according to the current scroll position.</para><para>A <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> will normally scroll itself and therefore its child windows as well. It might however be desired to scroll a different window than itself: e.g. when designing a spreadsheet, you will normally only have to scroll the (usually white) cell area, whereas the (usually grey) label area will scroll very differently. For this special purpose, you can call <ref refid="classwx_scrolled_1a117dc8edabb3e1250199eab089e4fa5b" kindref="member">SetTargetWindow()</ref> which means that pressing the scrollbars will scroll a different window.</para><para>Note that the underlying system knows nothing about scrolling coordinates, so that all system functions (mouse events, expose events, refresh calls etc) as well as the position of subwindows are relative to the &quot;physical&quot; origin of the scrolled window. If the user insert a child window at position (10,10) and scrolls the window down 100 pixels (moving the child window out of the visible area), the child window will report a position of (10,-90).</para><para><linebreak/>
<heading level="2">Styles</heading>
</para><para>This class supports the following styles:</para><para> <itemizedlist>
<listitem><para>wxHSCROLL: If this style is specified and <ref refid="defs_8h_1a78a1371cbc8c3b8bb36f27b9d3c47ba9" kindref="member">wxVSCROLL</ref> isn&apos;t, the window will be scrollable only in horizontal direction (by default, i.e. if neither this style nor <ref refid="defs_8h_1a78a1371cbc8c3b8bb36f27b9d3c47ba9" kindref="member">wxVSCROLL</ref> is specified, it scrolls in both directions). </para></listitem>
<listitem><para>wxVSCROLL: If this style is specified and <ref refid="defs_8h_1a138eed616dd15fd021e8cc838e26d589" kindref="member">wxHSCROLL</ref> isn&apos;t, the window will be scrollable only in vertical direction (by default, i.e. if neither this style nor <ref refid="defs_8h_1a138eed616dd15fd021e8cc838e26d589" kindref="member">wxHSCROLL</ref> is specified, it scrolls in both directions). </para></listitem>
<listitem><para>wxALWAYS_SHOW_SB: Since wxWidgets 2.9.5, specifying this style makes the window always show its scrollbars, even if they are not used. See <ref refid="classwx_scrolled_1a8590337dc643a64437c56031cf5f2e71" kindref="member">ShowScrollbars()</ref>. </para></listitem>
<listitem><para>wxRETAINED: Uses a backing pixmap to speed refreshes. Motif only. <linebreak/>
</para></listitem>
</itemizedlist>
<linebreak/>
<heading level="2">Events emitted by this class</heading>
</para><para>The following event handler macros redirect the events to member function handlers &apos;<bold>func</bold>&apos; with prototypes like: void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_scroll_win_event" kindref="compound">wxScrollWinEvent</ref>&amp;<nonbreakablespace/>event)</para><para>Event macros for events emitted by this class: <itemizedlist>
<listitem><para>EVT_SCROLLWIN(func): Process all scroll events. </para></listitem>
<listitem><para>EVT_SCROLLWIN_TOP(func): Process <computeroutput>wxEVT_SCROLLWIN_TOP</computeroutput> scroll-to-top events. </para></listitem>
<listitem><para>EVT_SCROLLWIN_BOTTOM(func): Process <computeroutput>wxEVT_SCROLLWIN_BOTTOM</computeroutput> scroll-to-bottom events. </para></listitem>
<listitem><para>EVT_SCROLLWIN_LINEUP(func): Process <computeroutput>wxEVT_SCROLLWIN_LINEUP</computeroutput> line up events. </para></listitem>
<listitem><para>EVT_SCROLLWIN_LINEDOWN(func): Process <computeroutput>wxEVT_SCROLLWIN_LINEDOWN</computeroutput> line down events. </para></listitem>
<listitem><para>EVT_SCROLLWIN_PAGEUP(func): Process <computeroutput>wxEVT_SCROLLWIN_PAGEUP</computeroutput> page up events. </para></listitem>
<listitem><para>EVT_SCROLLWIN_PAGEDOWN(func): Process <computeroutput>wxEVT_SCROLLWIN_PAGEDOWN</computeroutput> page down events. </para></listitem>
<listitem><para>EVT_SCROLLWIN_THUMBTRACK(func): Process <computeroutput>wxEVT_SCROLLWIN_THUMBTRACK</computeroutput> thumbtrack events (frequent events sent as the user drags the thumbtrack). </para></listitem>
<listitem><para>EVT_SCROLLWIN_THUMBRELEASE(func): Process <computeroutput>wxEVT_SCROLLWIN_THUMBRELEASE</computeroutput> thumb release events. <linebreak/>
 <simplesect kind="note"><para>Don&apos;t confuse wxScrollWinEvents generated by this class with <ref refid="classwx_scroll_event" kindref="compound">wxScrollEvent</ref> objects generated by <ref refid="classwx_scroll_bar" kindref="compound">wxScrollBar</ref> and <ref refid="classwx_slider" kindref="compound">wxSlider</ref>.</para></simplesect>
<simplesect kind="remark"><para>Use <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> for applications where the user scrolls by a fixed amount, and where a &apos;page&apos; can be interpreted to be the current visible portion of the window. For more sophisticated applications, use the <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> implementation as a guide to build your own scroll behaviour or use <ref refid="classwx_v_scrolled_window" kindref="compound">wxVScrolledWindow</ref> or its variants.</para></simplesect>
<simplesect kind="since"><para>The <ref refid="classwx_scrolled" kindref="compound">wxScrolled</ref> template exists since version 2.9.0. In older versions, only <ref refid="group__group__class__miscwnd_1ga695bec5996cd4d5512d1a01cfdcf96a5" kindref="member">wxScrolledWindow</ref> (equivalent of wxScrolled&lt;wxPanel&gt;) was available.</para></simplesect>
<heading level="2"></heading>
</para></listitem>
</itemizedlist>
Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="classwx_scroll_bar" kindref="compound">wxScrollBar</ref>, <ref refid="classwx_client_d_c" kindref="compound">wxClientDC</ref>, <ref refid="classwx_paint_d_c" kindref="compound">wxPaintDC</ref>, <ref refid="classwx_v_scrolled_window" kindref="compound">wxVScrolledWindow</ref>, <ref refid="classwx_h_scrolled_window" kindref="compound">wxHScrolledWindow</ref>, <ref refid="classwx_h_v_scrolled_window" kindref="compound">wxHVScrolledWindow</ref>, </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="7141">
        <label>wxScrolled&lt; T &gt;</label>
        <link refid="classwx_scrolled"/>
        <childnode refid="7142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7142">
        <label>T</label>
      </node>
      <node id="7143">
        <label>wxGrid&lt; wxPanel &gt;</label>
        <link refid="classwx_grid"/>
        <childnode refid="7141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7145">
        <label>wxPreviewCanvas&lt; wxPanel &gt;</label>
        <link refid="classwx_preview_canvas"/>
        <childnode refid="7141" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7144">
        <label>wxHtmlWindow&lt; wxPanel &gt;</label>
        <link refid="classwx_html_window"/>
        <childnode refid="7141" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7146">
        <label>wxScrolled&lt; T &gt;</label>
        <link refid="classwx_scrolled"/>
        <childnode refid="7147" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7147">
        <label>T</label>
      </node>
    </collaborationgraph>
    <location file="interface/wx/scrolwin.h" line="165" column="1" bodyfile="interface/wx/scrolwin.h" bodystart="164" bodyend="589"/>
    <listofallmembers>
      <member refid="classwx_scrolled_1a5b5e335677055e4107903f7d5dad042f" prot="public" virt="virtual"><scope>wxScrolled</scope><name>AdjustScrollbars</name></member>
      <member refid="classwx_scrolled_1a5beb86afd7eec414740ac5be2e80da33" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>CalcScrolledPosition</name></member>
      <member refid="classwx_scrolled_1a86022a8d18b370380754e0ff0a101003" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>CalcScrolledPosition</name></member>
      <member refid="classwx_scrolled_1addb96196c8bc441934fb96c2b4e56a51" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>CalcUnscrolledPosition</name></member>
      <member refid="classwx_scrolled_1a538b168f093df93ced48d297b5599291" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>CalcUnscrolledPosition</name></member>
      <member refid="classwx_scrolled_1a9f03bd3bcbb96c84f90c2482f58f075a" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>Create</name></member>
      <member refid="classwx_scrolled_1a294b1585caef1c22f5ea1ac6a6787164" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>DisableKeyboardScrolling</name></member>
      <member refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>DoPrepareDC</name></member>
      <member refid="classwx_scrolled_1ac5a023517721a5ad5b891527b437dd61" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>EnableScrolling</name></member>
      <member refid="classwx_scrolled_1a89bb0a54dc59ec7af02e1d08b2c8ce83" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetScaleX</name></member>
      <member refid="classwx_scrolled_1a359410c6a60604225d03a5a490cc357e" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetScaleY</name></member>
      <member refid="classwx_scrolled_1a981d158543584d2c4721d9f86587ccc6" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetScrollLines</name></member>
      <member refid="classwx_scrolled_1ad41334fc7b0dcee5a53c97da4902d82a" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetScrollPageSize</name></member>
      <member refid="classwx_scrolled_1ae57f966af767e2f99f486a3c45485370" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetScrollPixelsPerUnit</name></member>
      <member refid="classwx_scrolled_1a81800886d1d5f094caeee683e707de12" prot="protected" virt="virtual"><scope>wxScrolled</scope><name>GetSizeAvailableForScrollTarget</name></member>
      <member refid="classwx_scrolled_1aa43a5283b564da82368b532b22971410" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetTargetRect</name></member>
      <member refid="classwx_scrolled_1aa48e3a4731d7e4dea26e89e9015e295d" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetTargetWindow</name></member>
      <member refid="classwx_scrolled_1a01d57d0b9b81537dc011e3e8b3f4b43d" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetViewStart</name></member>
      <member refid="classwx_scrolled_1a3ced29907b1e914f841f979f272277c8" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetViewStart</name></member>
      <member refid="classwx_scrolled_1a9e993dd807f71f622765ccc68c60082b" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_scrolled_1a9d76b612e041e10462a16a3648d09008" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>IsAutoScrolling</name></member>
      <member refid="classwx_scrolled_1a7047e92206a6e62675560fc394d9f4f8" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>IsRetained</name></member>
      <member refid="classwx_scrolled_1a52284d06a6160fb42b0899aedce2c880" prot="public" virt="virtual"><scope>wxScrolled</scope><name>OnDraw</name></member>
      <member refid="classwx_scrolled_1ab33dbfe88be5ede4b04de4dcec4830f0" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>PrepareDC</name></member>
      <member refid="classwx_scrolled_1a601bcac37185a2d4a24164d065907f69" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>Scroll</name></member>
      <member refid="classwx_scrolled_1affb3c1be4945c27b589439a1d47fbbb8" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>Scroll</name></member>
      <member refid="classwx_scrolled_1a2d44af932b964f1522d1c78d86cd4a27" prot="public" virt="virtual"><scope>wxScrolled</scope><name>SendAutoScrollEvents</name></member>
      <member refid="classwx_scrolled_1a5c8829d39d00ce53901a8b1a67d5d780" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>SetScale</name></member>
      <member refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>SetScrollbars</name></member>
      <member refid="classwx_scrolled_1aa160351f31a0080784a00023947a06f6" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>SetScrollPageSize</name></member>
      <member refid="classwx_scrolled_1a76286e2efa55d0ba85d37106a44a9401" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>SetScrollRate</name></member>
      <member refid="classwx_scrolled_1aee90a87e1b3f7f0f70a89e085c0d9928" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>SetTargetRect</name></member>
      <member refid="classwx_scrolled_1a117dc8edabb3e1250199eab089e4fa5b" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>SetTargetWindow</name></member>
      <member refid="classwx_scrolled_1a8590337dc643a64437c56031cf5f2e71" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>ShowScrollbars</name></member>
      <member refid="classwx_scrolled_1a33c3daf5feb84c357357012e1b0e7a0a" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>StopAutoScrolling</name></member>
      <member refid="classwx_scrolled_1a01d0ecb5daa59ebb7a0806f16b7ac267" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>wxScrolled</name></member>
      <member refid="classwx_scrolled_1ae68b98d2386b81f413e08cd5410401fc" prot="public" virt="non-virtual"><scope>wxScrolled</scope><name>wxScrolled</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
