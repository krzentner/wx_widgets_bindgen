<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="overview_ipc" kind="page">
    <compoundname>overview_ipc</compoundname>
    <title>Interprocess Communication</title>
    <tableofcontents/>
    <briefdescription>
<para><linebreak/>
 wxWidgets has a number of different classes to help with interprocess communication and network programming. </para>    </briefdescription>
    <detaileddescription>
<para><linebreak/>
 wxWidgets has a number of different classes to help with interprocess communication and network programming.</para><para>This section only discusses one family of classes <ndash/> the DDE-like protocol <ndash/> but here&apos;s a list of other useful classes:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_socket_event" kindref="compound">wxSocketEvent</ref>, <ref refid="classwx_socket_base" kindref="compound">wxSocketBase</ref>, <ref refid="classwx_socket_client" kindref="compound">wxSocketClient</ref>, <ref refid="classwx_socket_server" kindref="compound">wxSocketServer</ref> - Classes for the low-level TCP/IP API. </para></listitem>
<listitem><para><ref refid="classwx_protocol" kindref="compound">wxProtocol</ref>, <ref refid="classwx_u_r_l" kindref="compound">wxURL</ref>, <ref refid="classwx_f_t_p" kindref="compound">wxFTP</ref>, <ref refid="classwx_h_t_t_p" kindref="compound">wxHTTP</ref> - Classes for programming popular Internet protocols.</para></listitem>
</itemizedlist>
wxWidgets&apos; DDE-like protocol is a high-level protocol based on Windows DDE. There are two implementations of this DDE-like protocol: one using real DDE running on Windows only, and another using TCP/IP (sockets) that runs on most platforms. Since the API and virtually all of the behaviour is the same apart from the names of the classes, you should find it easy to switch between the two implementations.</para><para>Notice that by including <computeroutput>&lt;<ref refid="interface_2wx_2ipc_8h" kindref="compound">wx/ipc.h</ref>&gt;</computeroutput> you may define convenient synonyms for the IPC classes: <ref refid="classwx_server" kindref="compound">wxServer</ref> for either <ref refid="classwx_d_d_e_server" kindref="compound">wxDDEServer</ref> or <ref refid="classwx_t_c_p_server" kindref="compound">wxTCPServer</ref> depending on whether DDE-based or socket-based implementation is used and the same thing for <ref refid="classwx_client" kindref="compound">wxClient</ref> and <ref refid="classwx_connection" kindref="compound">wxConnection</ref>.</para><para>By default, the DDE implementation is used under Windows. DDE works within one computer only. If you want to use IPC between different workstations you should define <computeroutput>wxUSE_DDE_FOR_IPC</computeroutput> as 0 before including this header <ndash/> this will force using TCP/IP implementation even under Windows.</para><para>The following description refers to wxWidgets, but remember that the equivalent wxTCP* and wxDDE* classes can be used in much the same way.</para><para>Three classes are central to the DDE-like API:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_client" kindref="compound">wxClient</ref> - This represents the client application, and is used only within a client program. </para></listitem>
<listitem><para><ref refid="classwx_server" kindref="compound">wxServer</ref> - This represents the server application, and is used only within a server program. </para></listitem>
<listitem><para><ref refid="classwx_connection" kindref="compound">wxConnection</ref> - This represents the connection from the client to the server. Both the client and the server use an instance of this class, one per connection. Most DDE transactions operate on this object.</para></listitem>
</itemizedlist>
Messages between applications are usually identified by three variables: connection object, topic name and item name. A data string is a fourth element of some messages. To create a connection (a conversation in Windows parlance), the client application uses <ref refid="classwx_client_1a6ca1cef89e834a724d34edf9872f545d" kindref="member">wxClient::MakeConnection</ref> to send a message to the server object, with a string service name to identify the server and a topic name to identify the topic for the duration of the connection. Under Unix, the service name may be either an integer port identifier in which case an Internet domain socket will be used for the communications or a valid file name (which shouldn&apos;t exist and will be deleted afterwards) in which case a Unix domain socket is created.</para><para><bold>SECURITY NOTE:</bold> Using Internet domain sockets is extremely insecure for IPC as there is absolutely no access control for them, use Unix domain sockets whenever possible!</para><para>The server then responds and either vetoes the connection or allows it. If allowed, both the server and client objects create <ref refid="classwx_connection" kindref="compound">wxConnection</ref> objects which persist until the connection is closed. The connection object is then used for sending and receiving subsequent messages between client and server - overriding virtual functions in your class derived from <ref refid="classwx_connection" kindref="compound">wxConnection</ref> allows you to handle the DDE messages.</para><para>To create a working server, the programmer must:</para><para><itemizedlist>
<listitem><para>Derive a class from <ref refid="classwx_connection" kindref="compound">wxConnection</ref>, providing handlers for various messages sent to the server side of a <ref refid="classwx_connection" kindref="compound">wxConnection</ref> (e.g. OnExecute, OnRequest, OnPoke). Only the handlers actually required by the application need to be overridden. </para></listitem>
<listitem><para>Derive a class from <ref refid="classwx_server" kindref="compound">wxServer</ref>, overriding OnAcceptConnection to accept or reject a connection on the basis of the topic argument. This member must create and return an instance of the derived connection class if the connection is accepted. </para></listitem>
<listitem><para>Create an instance of your server object and call Create to activate it, giving it a service name.</para></listitem>
</itemizedlist>
To create a working client, the programmer must:</para><para><itemizedlist>
<listitem><para>Derive a class from <ref refid="classwx_connection" kindref="compound">wxConnection</ref>, providing handlers for various messages sent to the client side of a <ref refid="classwx_connection" kindref="compound">wxConnection</ref> (e.g. OnAdvise). Only the handlers actually required by the application need to be overridden. </para></listitem>
<listitem><para>Derive a class from <ref refid="classwx_client" kindref="compound">wxClient</ref>, overriding OnMakeConnection to create and return an instance of the derived connection class. </para></listitem>
<listitem><para>Create an instance of your client object. </para></listitem>
<listitem><para>When appropriate, create a new connection using <ref refid="classwx_client_1a6ca1cef89e834a724d34edf9872f545d" kindref="member">wxClient::MakeConnection</ref>, with arguments host name (processed in Unix only, use &apos;localhost&apos; for local computer), service name, and topic name for this connection. The client object will call OnMakeConnection to create a connection object of the derived class if the connection is successful. </para></listitem>
<listitem><para>Use the <ref refid="classwx_connection" kindref="compound">wxConnection</ref> member functions to send messages to the server.</para></listitem>
</itemizedlist>
</para><sect1 id="overview_ipc_1overview_ipc_datatransfer">
<title>Data Transfer</title>
<para>These are the ways that data can be transferred from one application to another. These are methods of <ref refid="classwx_connection" kindref="compound">wxConnection</ref>.</para><para><itemizedlist>
<listitem><para><bold>Execute:</bold> the client calls the server with a data string representing a command to be executed. This succeeds or fails, depending on the server&apos;s willingness to answer. If the client wants to find the result of the Execute command other than success or failure, it has to explicitly call Request. </para></listitem>
<listitem><para><bold>Request:</bold> the client asks the server for a particular data string associated with a given item string. If the server is unwilling to reply, the return value is NULL. Otherwise, the return value is a string (actually a pointer to the connection buffer, so it should not be deallocated by the application). </para></listitem>
<listitem><para><bold>Poke:</bold> The client sends a data string associated with an item string directly to the server. This succeeds or fails. </para></listitem>
<listitem><para><bold>Advise:</bold> The client asks to be advised of any change in data associated with a particular item. If the server agrees, the server will send an OnAdvise message to the client along with the item and data.</para></listitem>
</itemizedlist>
The default data type is wxCF_TEXT (ASCII text), and the default data size is the length of the null-terminated string. Windows-specific data types could also be used on the PC.</para></sect1>
<sect1 id="overview_ipc_1overview_ipc_examples">
<title>Examples</title>
<para>See the sample programs <emphasis>server</emphasis> and <emphasis>client</emphasis> in the IPC samples directory. Run the server, then the client. This demonstrates using the Execute, Request, and Poke commands from the client, together with an Advise loop: selecting an item in the server list box causes that item to be highlighted in the client list box.</para></sect1>
<sect1 id="overview_ipc_1overview_ipc_dde">
<title>More DDE Details</title>
<para>A <ref refid="classwx_client" kindref="compound">wxClient</ref> object initiates the client part of a client-server DDE-like (Dynamic Data Exchange) conversation (available in both Windows and Unix).</para><para>To create a client which can communicate with a suitable server, you need to derive a class from <ref refid="classwx_connection" kindref="compound">wxConnection</ref> and another from <ref refid="classwx_client" kindref="compound">wxClient</ref>. The custom <ref refid="classwx_connection" kindref="compound">wxConnection</ref> class will receive communications in a &apos;conversation&apos; with a server. and the custom <ref refid="classwx_server" kindref="compound">wxServer</ref> is required so that a user-overridden <ref refid="classwx_client_1a71328614681f8f50de8a561b5dcfbbde" kindref="member">wxClient::OnMakeConnection</ref> member can return a <ref refid="classwx_connection" kindref="compound">wxConnection</ref> of the required class, when a connection is made.</para><para>For example:</para><para><programlisting><codeline><highlight class="normal">class<sp/>MyConnection:<sp/>public<sp/>wxConnection</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyConnection(void)::wxConnection()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>~MyConnection(void)<sp/>{<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>OnAdvise(const<sp/>wxString&amp;<sp/>topic,<sp/>const<sp/>wxString&amp;<sp/>item,<sp/>char<sp/>*data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>size,<sp/>wxIPCFormat<sp/>format)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxMessageBox(topic,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MyClient:<sp/>public<sp/>wxClient</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MyClient(void)<sp/>{<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxConnectionBase*<sp/>OnMakeConnection(void)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>new<sp/>MyConnection;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Here, <emphasis>MyConnection</emphasis> will respond to OnAdvise messages sent by the server by displaying a message box.</para><para>When the client application starts, it must create an instance of the derived <ref refid="classwx_client" kindref="compound">wxClient</ref>. In the following, command line arguments are used to pass the host name (the name of the machine the server is running on) and the server name (identifying the server process). Calling <ref refid="classwx_client_1a6ca1cef89e834a724d34edf9872f545d" kindref="member">wxClient::MakeConnection</ref> implicitly creates an instance of <emphasis>MyConnection</emphasis> if the request for a connection is accepted, and the client then requests an <emphasis>Advise</emphasis> loop from the server (an Advise loop is where the server calls the client when data has changed).</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>server<sp/>=<sp/>&quot;4242&quot;;</highlight></codeline>
<codeline><highlight class="normal">wxString<sp/>hostName;</highlight></codeline>
<codeline><highlight class="normal">wxGetHostName(hostName);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>new<sp/>client</highlight></codeline>
<codeline><highlight class="normal">MyClient<sp/>*client<sp/>=<sp/>new<sp/>MyClient;</highlight></codeline>
<codeline><highlight class="normal">connection<sp/>=<sp/>(MyConnection<sp/>*)client-&gt;MakeConnection(hostName,<sp/>server,<sp/>&quot;IPC<sp/>TEST&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!connection)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxMessageBox(&quot;Failed<sp/>to<sp/>make<sp/>connection<sp/>to<sp/>server&quot;,<sp/>&quot;Client<sp/>Demo<sp/>Error&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">connection-&gt;StartAdvise(&quot;Item&quot;);</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
