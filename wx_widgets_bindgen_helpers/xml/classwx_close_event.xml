<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_close_event" kind="class" language="C++" prot="public">
    <compoundname>wxCloseEvent</compoundname>
    <basecompoundref refid="classwx_event" prot="public" virt="non-virtual">wxEvent</basecompoundref>
    <includes local="no">wx/event.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_close_event_1a5955c62800e7f4b0f046b9123705cffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxCloseEvent::wxCloseEvent</definition>
        <argsstring>(wxEventType commandEventType=wxEVT_NULL, int id=0)</argsstring>
        <name>wxCloseEvent</name>
        <param>
          <type><ref refid="group__group__funcmacro__events_1ga6a7fd172612c0d6d9029bfa3aa91aca0" kindref="member">wxEventType</ref></type>
          <declname>commandEventType</declname>
          <defval><ref refid="group__group__funcmacro__events_1ga310bc3f7977ae79ac1198c7a287dbffe" kindref="member">wxEVT_NULL</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="4053" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_close_event_1acb23de85447edb56bf806cc382f311ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxCloseEvent::CanVeto</definition>
        <argsstring>() const</argsstring>
        <name>CanVeto</name>
        <briefdescription>
<para>Returns true if you can veto a system shutdown or a window close event. </para>        </briefdescription>
        <detaileddescription>
<para>Vetoing a window close event is not possible if the calling code wishes to force the application to exit, and so this function must be called to check this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="4060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_close_event_1ac366162fc32083e502090a9d75c4bf16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxCloseEvent::GetLoggingOff</definition>
        <argsstring>() const</argsstring>
        <name>GetLoggingOff</name>
        <briefdescription>
<para>Returns true if the user is just logging off or false if the system is shutting down. </para>        </briefdescription>
        <detaileddescription>
<para>This method can only be called for end session and query end session events, it doesn&apos;t make sense for close window event. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="4067" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_close_event_1a25150c209983febf02b80a6f93dfc6ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxCloseEvent::SetCanVeto</definition>
        <argsstring>(bool canVeto)</argsstring>
        <name>SetCanVeto</name>
        <param>
          <type>bool</type>
          <declname>canVeto</declname>
        </param>
        <briefdescription>
<para>Sets the &apos;can veto&apos; flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="4072" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_close_event_1af8059e703d942f5962a0b2f6dedc3bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxCloseEvent::SetLoggingOff</definition>
        <argsstring>(bool loggingOff)</argsstring>
        <name>SetLoggingOff</name>
        <param>
          <type>bool</type>
          <declname>loggingOff</declname>
        </param>
        <briefdescription>
<para>Sets the &apos;logging off&apos; flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="4077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_close_event_1a0ec337c77613d5d8407831cd64e16417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxCloseEvent::Veto</definition>
        <argsstring>(bool veto=true)</argsstring>
        <name>Veto</name>
        <param>
          <type>bool</type>
          <declname>veto</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Call this from your event handler to veto a system shutdown or to signal to the calling application that a window close did not happen. </para>        </briefdescription>
        <detaileddescription>
<para>You can only veto a shutdown if <ref refid="classwx_close_event_1acb23de85447edb56bf806cc382f311ec" kindref="member">CanVeto()</ref> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="4085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_close_event_1a35320f500ee6c929198ef94534227a64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxCloseEvent::GetVeto</definition>
        <argsstring>() const</argsstring>
        <name>GetVeto</name>
        <briefdescription>
<para>Returns whether the Veto flag was set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/event.h" line="4090" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This event class contains information about window and session close events. </para>    </briefdescription>
    <detaileddescription>
<para>The handler function for EVT_CLOSE is called when the user has tried to close a a frame or dialog box using the window manager (X) or system menu (Windows). It can also be invoked by the application itself programmatically, for example by calling the <ref refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" kindref="member">wxWindow::Close</ref> function.</para><para>You should check whether the application is forcing the deletion of the window using <ref refid="classwx_close_event_1acb23de85447edb56bf806cc382f311ec" kindref="member">wxCloseEvent::CanVeto</ref>. If this is false, you <emphasis>must</emphasis> destroy the window using <ref refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" kindref="member">wxWindow::Destroy</ref>.</para><para>If the return value is true, it is up to you whether you respond by destroying the window.</para><para>If you don&apos;t destroy the window, you should call <ref refid="classwx_close_event_1a0ec337c77613d5d8407831cd64e16417" kindref="member">wxCloseEvent::Veto</ref> to let the calling code know that you did not destroy the window. This allows the <ref refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" kindref="member">wxWindow::Close</ref> function to return true or false depending on whether the close instruction was honoured or not.</para><para>Example of a <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref> handler:</para><para><programlisting><codeline><highlight class="normal">void<sp/>MyFrame::OnClose(wxCloseEvent&amp;<sp/>event)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>event.CanVeto()<sp/>&amp;&amp;<sp/>m_bFileNotSaved<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>wxMessageBox(&quot;The<sp/>file<sp/>has<sp/>not<sp/>been<sp/>saved...<sp/>continue<sp/>closing?&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Please<sp/>confirm&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxICON_QUESTION<sp/>|<sp/>wxYES_NO)<sp/>!=<sp/>wxYES<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event.Veto();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Destroy();<sp/><sp/>//<sp/>you<sp/>may<sp/>also<sp/>do:<sp/><sp/>event.Skip();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>since<sp/>the<sp/>default<sp/>event<sp/>handler<sp/>does<sp/>call<sp/>Destroy(),<sp/>too</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The EVT_END_SESSION event is slightly different as it is sent by the system when the user session is ending (e.g. because of log out or shutdown) and so all windows are being forcefully closed. At least under MSW, after the handler for this event is executed the program is simply killed by the system. Because of this, the default handler for this event provided by wxWidgets calls all the usual cleanup code (including <ref refid="classwx_app_console_1a5ee60051c92b0b2933258799626a0485" kindref="member">wxApp::OnExit()</ref>) so that it could still be executed and exit()s the process itself, without waiting for being killed. If this behaviour is for some reason undesirable, make sure that you define a handler for this event in your wxApp-derived class and do not call <computeroutput>event.Skip()</computeroutput> in it (but be aware that the system will still kill your application).</para><para><linebreak/>
<heading level="2">Events using this class</heading>
</para><para>The following event handler macros redirect the events to member function handlers &apos;<bold>func</bold>&apos; with prototypes like: void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref>&amp;<nonbreakablespace/>event)</para><para>Event macros: <itemizedlist>
<listitem><para>EVT_CLOSE(func): Process a <computeroutput>wxEVT_CLOSE_WINDOW</computeroutput> command event, supplying the member function. This event applies to <ref refid="classwx_frame" kindref="compound">wxFrame</ref> and <ref refid="classwx_dialog" kindref="compound">wxDialog</ref> classes. </para></listitem>
<listitem><para>EVT_QUERY_END_SESSION(func): Process a <computeroutput>wxEVT_QUERY_END_SESSION</computeroutput> session event, supplying the member function. This event can be handled in wxApp-derived class only. </para></listitem>
<listitem><para>EVT_END_SESSION(func): Process a <computeroutput>wxEVT_END_SESSION</computeroutput> session event, supplying the member function. This event can be handled in wxApp-derived class only. <linebreak/>
 <heading level="2"></heading>
</para></listitem>
</itemizedlist>
Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" kindref="member">wxWindow::Close</ref>, <ref refid="overview_windowdeletion" kindref="compound">Window Deletion</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="841">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="839">
        <label>wxCloseEvent</label>
        <link refid="classwx_close_event"/>
        <childnode refid="840" relation="public-inheritance">
        </childnode>
      </node>
      <node id="840">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="841" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="844">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="845" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="842">
        <label>wxCloseEvent</label>
        <link refid="classwx_close_event"/>
        <childnode refid="843" relation="public-inheritance">
        </childnode>
      </node>
      <node id="843">
        <label>wxEvent</label>
        <link refid="classwx_event"/>
        <childnode refid="844" relation="public-inheritance">
        </childnode>
      </node>
      <node id="845">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/event.h" line="4048" column="1" bodyfile="interface/wx/event.h" bodystart="4047" bodyend="4091"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxCloseEvent</scope><name>AllocExclusive</name></member>
      <member refid="classwx_close_event_1acb23de85447edb56bf806cc382f311ec" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>CanVeto</name></member>
      <member refid="classwx_event_1a26878097a702e8d0368da150125d4158" prot="public" virt="pure-virtual"><scope>wxCloseEvent</scope><name>Clone</name></member>
      <member refid="classwx_object_1a436fc8fe68cf8a31000296d9cd3d2427" prot="protected" virt="virtual"><scope>wxCloseEvent</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a3f4f497c65cef611e121c41f21dd5ccc" prot="protected" virt="virtual"><scope>wxCloseEvent</scope><name>CreateRefData</name></member>
      <member refid="classwx_object_1ae6d365f2556b26767ced8410c5e839d0" prot="public" virt="virtual"><scope>wxCloseEvent</scope><name>GetClassInfo</name></member>
      <member refid="classwx_event_1ac4958ff6ec32b7f4b23066932d611131" prot="public" virt="virtual"><scope>wxCloseEvent</scope><name>GetEventCategory</name></member>
      <member refid="classwx_event_1a424a4ffaaaf95164d8952ef9ab2ef444" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetEventObject</name></member>
      <member refid="classwx_event_1a01c89719ef6241a6e612a313a259c1c2" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetEventType</name></member>
      <member refid="classwx_event_1ae7d3e088f0f165ad0421717dd33e4460" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetEventUserData</name></member>
      <member refid="classwx_event_1ac5fa5c10d4845d903e58026a42b403c7" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetId</name></member>
      <member refid="classwx_close_event_1ac366162fc32083e502090a9d75c4bf16" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetLoggingOff</name></member>
      <member refid="classwx_object_1af3c6c76a775864832f1536d3c0de3a2b" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetRefData</name></member>
      <member refid="classwx_event_1aa770dbcd0f1714ba097836af6534b4c5" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetSkipped</name></member>
      <member refid="classwx_event_1a48662230971127737d2500cef7be549d" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetTimestamp</name></member>
      <member refid="classwx_close_event_1a35320f500ee6c929198ef94534227a64" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>GetVeto</name></member>
      <member refid="classwx_event_1a31f6a4377d6d36964b8eae4e56ec43e0" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>IsCommandEvent</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>IsSameAs</name></member>
      <member refid="classwx_event_1ac81911194f1f59e1454c0397b87975d4" prot="protected" virt="non-virtual"><scope>wxCloseEvent</scope><name>m_propagationLevel</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxCloseEvent</scope><name>m_refData</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>operator new</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>Ref</name></member>
      <member refid="classwx_event_1a0acb5c75f6e67b8822ad8ba3c5bdc4fe" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>ResumePropagation</name></member>
      <member refid="classwx_close_event_1a25150c209983febf02b80a6f93dfc6ba" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>SetCanVeto</name></member>
      <member refid="classwx_event_1a3460217d04c36393ab868ba453fde13d" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>SetEventObject</name></member>
      <member refid="classwx_event_1aa29fb7459d64602e09837fea1e516d27" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>SetEventType</name></member>
      <member refid="classwx_event_1ab9973f687bfa8a60318d8d9bd629d0d4" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>SetId</name></member>
      <member refid="classwx_close_event_1af8059e703d942f5962a0b2f6dedc3bd6" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>SetLoggingOff</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>SetRefData</name></member>
      <member refid="classwx_event_1ad4380dff3144a986cb960473051a1d8d" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>SetTimestamp</name></member>
      <member refid="classwx_event_1ac7a178c3c781c80f1308945042f76e7f" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>ShouldPropagate</name></member>
      <member refid="classwx_event_1a98eb20b76106f9a933c2eb3ee119f66c" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>Skip</name></member>
      <member refid="classwx_event_1a060a7d222404daff4d3cef30cddeaae3" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>StopPropagation</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>UnShare</name></member>
      <member refid="classwx_close_event_1a0ec337c77613d5d8407831cd64e16417" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>Veto</name></member>
      <member refid="classwx_close_event_1a5955c62800e7f4b0f046b9123705cffe" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>wxCloseEvent</name></member>
      <member refid="classwx_event_1aaf2a5cf056d006859cea36689ba13d36" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>wxEvent</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxCloseEvent</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxCloseEvent</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
