<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_data_output_stream" kind="class" language="C++" prot="public">
    <compoundname>wxDataOutputStream</compoundname>
    <includes local="no">wx/datstrm.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_data_output_stream_1a7fb37c717609de9f339321d186afe547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDataOutputStream::wxDataOutputStream</definition>
        <argsstring>(wxOutputStream &amp;stream, const wxMBConv &amp;conv=wxConvUTF8)</argsstring>
        <name>wxDataOutputStream</name>
        <param>
          <type><ref refid="classwx_output_stream" kindref="compound">wxOutputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
          <defval>wxConvUTF8</defval>
        </param>
        <briefdescription>
<para>Constructs a datastream object from an output stream. </para>        </briefdescription>
        <detaileddescription>
<para>Only write methods will be available.</para><para>Note that the <emphasis>conv</emphasis> parameter is only available in Unicode builds of wxWidgets.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conv</parametername>
</parameternamelist>
<parameterdescription>
<para>Charset conversion object used to encoding Unicode strings before writing them to the stream in Unicode mode (see <ref refid="classwx_data_output_stream_1ad59954476921dd0f4a480e4d212ed61a" kindref="member">WriteString()</ref> for a detailed description). Note that you must not destroy <emphasis>conv</emphasis> before you destroy this <ref refid="classwx_data_output_stream" kindref="compound">wxDataOutputStream</ref> instance! It is recommended to use the default value (UTF-8). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a8373bef51ad9b57f635ad6d66055ef65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDataOutputStream::~wxDataOutputStream</definition>
        <argsstring>()</argsstring>
        <name>~wxDataOutputStream</name>
        <briefdescription>
<para>Destroys the <ref refid="classwx_data_output_stream" kindref="compound">wxDataOutputStream</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a2e81f24ae13610bcc4adc566946a47d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::BigEndianOrdered</definition>
        <argsstring>(bool be_order)</argsstring>
        <name>BigEndianOrdered</name>
        <param>
          <type>bool</type>
          <declname>be_order</declname>
        </param>
        <briefdescription>
<para>If <emphasis>be_order</emphasis> is true, all data will be written in big-endian order, e.g. </para>        </briefdescription>
        <detaileddescription>
<para>for reading on a Sparc or from Java-Streams (which always use big-endian order), otherwise data will be written in little-endian order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a2b6e0960cfa79bcb2cf854f03f707c8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> *</type>
        <definition>wxMBConv* wxDataOutputStream::GetConv</definition>
        <argsstring>() const</argsstring>
        <name>GetConv</name>
        <briefdescription>
<para>Returns the current text conversion class used for writing strings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a3e585f43a9c1127d93316c5b9d1b3da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::SetConv</definition>
        <argsstring>(const wxMBConv &amp;conv)</argsstring>
        <name>SetConv</name>
        <param>
          <type>const <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> &amp;</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
<para>Sets the text conversion class used for writing strings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a4c5edb15cb2b5e1e16fcaeb3ccf91dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::UseBasicPrecisions</definition>
        <argsstring>()</argsstring>
        <name>UseBasicPrecisions</name>
        <briefdescription>
<para>Disables the use of extended precision format for floating point numbers. </para>        </briefdescription>
        <detaileddescription>
<para>This method disables the use of 80 bit extended precision format for the <computeroutput>float</computeroutput> and <computeroutput>double</computeroutput> values written to the stream, which is used by default (unless <computeroutput>wxUSE_APPLE_IEEE</computeroutput> was set to <computeroutput>0</computeroutput> when building the library, in which case the extended format support is not available at all and this function does nothing).</para><para>After calling it, <computeroutput>float</computeroutput> values will be written out in one of IEEE 754 &quot;basic formats&quot;, i.e. 32 bit single precision format for floats and 64 bit double precision format for doubles.</para><para><simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a3567889a28566ece070de26a4af6d084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::UseExtendedPrecision</definition>
        <argsstring>()</argsstring>
        <name>UseExtendedPrecision</name>
        <briefdescription>
<para>Explicitly request the use of extended precision for floating point numbers. </para>        </briefdescription>
        <detaileddescription>
<para>This function allows the application code to explicitly request the use of 80 bit extended precision format for the floating point numbers. This is the case by default but using this function explicitly ensures that the compilation of code relying on producing the output stream using extended precision would fail when using a version of wxWidgets compiled with <computeroutput>wxUSE_APPLE_IEEE==0</computeroutput> and so not supporting this format at all.</para><para><simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a51e3e2bafdd4023dfa216c27993603f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write8</definition>
        <argsstring>(wxUint8 i8)</argsstring>
        <name>Write8</name>
        <param>
          <type><ref refid="defs_8h_1aad88e290b822df511ad8025ee2e45263" kindref="member">wxUint8</ref></type>
          <declname>i8</declname>
        </param>
        <briefdescription>
<para>Writes the single byte <emphasis>i8</emphasis> to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1af5edf80d17cf04c0de64b3cf45c8e4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write8</definition>
        <argsstring>(const wxUint8 *buffer, size_t size)</argsstring>
        <name>Write8</name>
        <param>
          <type>const <ref refid="defs_8h_1aad88e290b822df511ad8025ee2e45263" kindref="member">wxUint8</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes an array of bytes to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>The number of bytes to write is specified with the <emphasis>size</emphasis> variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a71b069b0ae19f613c1f14214790c7f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write16</definition>
        <argsstring>(wxUint16 i16)</argsstring>
        <name>Write16</name>
        <param>
          <type><ref refid="defs_8h_1a8e9363c460a79dd550df544fab96e16d" kindref="member">wxUint16</ref></type>
          <declname>i16</declname>
        </param>
        <briefdescription>
<para>Writes the 16 bit unsigned integer <emphasis>i16</emphasis> to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a7f9993d71c30a18cc75daa82d1bbd7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write16</definition>
        <argsstring>(const wxUint16 *buffer, size_t size)</argsstring>
        <name>Write16</name>
        <param>
          <type>const <ref refid="defs_8h_1a8e9363c460a79dd550df544fab96e16d" kindref="member">wxUint16</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes an array of 16 bit unsigned integer to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>The number of 16 bit unsigned integer to write is specified with the <emphasis>size</emphasis> variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a8ed33d4489e1c9e477b3ebd4cba17e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write32</definition>
        <argsstring>(wxUint32 i32)</argsstring>
        <name>Write32</name>
        <param>
          <type><ref refid="defs_8h_1afdb12e5345c3fae4b537e813df9f02a3" kindref="member">wxUint32</ref></type>
          <declname>i32</declname>
        </param>
        <briefdescription>
<para>Writes the 32 bit unsigned integer <emphasis>i32</emphasis> to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1acd99b68c389f6d8bd0f9dfb09a53ed87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write32</definition>
        <argsstring>(const wxUint32 *buffer, size_t size)</argsstring>
        <name>Write32</name>
        <param>
          <type>const <ref refid="defs_8h_1afdb12e5345c3fae4b537e813df9f02a3" kindref="member">wxUint32</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes an array of 32 bit unsigned integer to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>The number of 32 bit unsigned integer to write is specified with the <emphasis>size</emphasis> variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1ab603dcaeb8a41c109d95799a7e44dc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write64</definition>
        <argsstring>(wxUint64 i64)</argsstring>
        <name>Write64</name>
        <param>
          <type><ref refid="defs_8h_1a356b5511a759210b8138b6433ed8b1fc" kindref="member">wxUint64</ref></type>
          <declname>i64</declname>
        </param>
        <briefdescription>
<para>Writes the 64 bit unsigned integer <emphasis>i64</emphasis> to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1ab79689966c8f09118c5fdfbcf98f90c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::Write64</definition>
        <argsstring>(const wxUint64 *buffer, size_t size)</argsstring>
        <name>Write64</name>
        <param>
          <type>const <ref refid="defs_8h_1a356b5511a759210b8138b6433ed8b1fc" kindref="member">wxUint64</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes an array of 64 bit unsigned integer to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>The number of 64 bit unsigned integer to write is specified with the <emphasis>size</emphasis> variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1ad3abc552c947509c7f0b69d9449abbe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::WriteFloat</definition>
        <argsstring>(float f)</argsstring>
        <name>WriteFloat</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Writes the float <emphasis>f</emphasis> to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>If <ref refid="classwx_data_output_stream_1a4c5edb15cb2b5e1e16fcaeb3ccf91dfb" kindref="member">UseBasicPrecisions()</ref> had been called, the value is written out using the standard IEEE 754 32 bit single precision format. Otherwise, this method uses the same format as <ref refid="classwx_data_output_stream_1ac4446de313514ca452c5adf75f13964c" kindref="member">WriteDouble()</ref>, i.e. 80 bit extended precision representation.</para><para><simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1ac05b830a50acb4929c18807b518612af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::WriteFloat</definition>
        <argsstring>(const float *buffer, size_t size)</argsstring>
        <name>WriteFloat</name>
        <param>
          <type>const float *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes an array of float to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>The number of floats to write is specified by the <emphasis>size</emphasis> variable.</para><para><simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1ac4446de313514ca452c5adf75f13964c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::WriteDouble</definition>
        <argsstring>(double d)</argsstring>
        <name>WriteDouble</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Writes the double <emphasis>d</emphasis> to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>The output format is either 80 bit extended precision or, if <ref refid="classwx_data_output_stream_1a4c5edb15cb2b5e1e16fcaeb3ccf91dfb" kindref="member">UseBasicPrecisions()</ref> had been called, standard IEEE 754 64 bit double precision. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1a6c7a2a4f07cc05b391cf0fe8a726fba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::WriteDouble</definition>
        <argsstring>(const double *buffer, size_t size)</argsstring>
        <name>WriteDouble</name>
        <param>
          <type>const double *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes an array of double to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>The number of doubles to write is specified by the <emphasis>size</emphasis> variable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_output_stream_1ad59954476921dd0f4a480e4d212ed61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataOutputStream::WriteString</definition>
        <argsstring>(const wxString &amp;string)</argsstring>
        <name>WriteString</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Writes <emphasis>string</emphasis> to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>Actually, this method writes the size of the string before writing <emphasis>string</emphasis> itself.</para><para>In ANSI build of wxWidgets, the string is written to the stream in exactly same way it is represented in memory. In Unicode build, however, the string is first converted to multibyte representation with <emphasis>conv</emphasis> object passed to stream&apos;s constructor (consequently, ANSI applications can read data written by Unicode application, as long as they agree on encoding) and this representation is written to the stream. UTF-8 is used by default. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/datstrm.h" line="203" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class provides functions that write binary data types in a portable way. </para>    </briefdescription>
    <detaileddescription>
<para>Data can be written in either big-endian or little-endian format, little-endian being the default on all architectures but <ref refid="classwx_data_output_stream_1a2e81f24ae13610bcc4adc566946a47d1" kindref="member">BigEndianOrdered()</ref> can be used to change this. The default format for the floating point types is 80 bit &quot;extended precision&quot; unless <computeroutput>wxUSE_APPLE_IEEE</computeroutput> was turned off during the library compilation, in which case extended precision is not available at all. You can call <ref refid="classwx_data_output_stream_1a4c5edb15cb2b5e1e16fcaeb3ccf91dfb" kindref="member">UseBasicPrecisions()</ref> to change this and use the standard IEEE 754 32 bit single precision format for floats and standard 64 bit double precision format for doubles. This is recommended for the new code for better interoperability with other software that typically uses standard IEEE 754 formats for its data, the use of extended precision by default is solely due to backwards compatibility.</para><para>If you want to write data to text files (or streams) use <ref refid="classwx_text_output_stream" kindref="compound">wxTextOutputStream</ref> instead.</para><para>The &quot;&lt;&lt;&quot; operator is overloaded and you can use this class like a standard C++ iostream. See <ref refid="classwx_data_input_stream" kindref="compound">wxDataInputStream</ref> for its usage and caveats.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="classwx_data_input_stream" kindref="compound">wxDataInputStream</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="interface/wx/datstrm.h" line="38" column="1" bodyfile="interface/wx/datstrm.h" bodystart="37" bodyend="204"/>
    <listofallmembers>
      <member refid="classwx_data_output_stream_1a2e81f24ae13610bcc4adc566946a47d1" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>BigEndianOrdered</name></member>
      <member refid="classwx_data_output_stream_1a2b6e0960cfa79bcb2cf854f03f707c8e" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>GetConv</name></member>
      <member refid="classwx_data_output_stream_1a3e585f43a9c1127d93316c5b9d1b3da8" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>SetConv</name></member>
      <member refid="classwx_data_output_stream_1a4c5edb15cb2b5e1e16fcaeb3ccf91dfb" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>UseBasicPrecisions</name></member>
      <member refid="classwx_data_output_stream_1a3567889a28566ece070de26a4af6d084" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>UseExtendedPrecision</name></member>
      <member refid="classwx_data_output_stream_1a71b069b0ae19f613c1f14214790c7f62" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write16</name></member>
      <member refid="classwx_data_output_stream_1a7f9993d71c30a18cc75daa82d1bbd7f9" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write16</name></member>
      <member refid="classwx_data_output_stream_1a8ed33d4489e1c9e477b3ebd4cba17e0b" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write32</name></member>
      <member refid="classwx_data_output_stream_1acd99b68c389f6d8bd0f9dfb09a53ed87" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write32</name></member>
      <member refid="classwx_data_output_stream_1ab603dcaeb8a41c109d95799a7e44dc0f" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write64</name></member>
      <member refid="classwx_data_output_stream_1ab79689966c8f09118c5fdfbcf98f90c0" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write64</name></member>
      <member refid="classwx_data_output_stream_1a51e3e2bafdd4023dfa216c27993603f0" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write8</name></member>
      <member refid="classwx_data_output_stream_1af5edf80d17cf04c0de64b3cf45c8e4be" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>Write8</name></member>
      <member refid="classwx_data_output_stream_1ac4446de313514ca452c5adf75f13964c" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>WriteDouble</name></member>
      <member refid="classwx_data_output_stream_1a6c7a2a4f07cc05b391cf0fe8a726fba5" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>WriteDouble</name></member>
      <member refid="classwx_data_output_stream_1ad3abc552c947509c7f0b69d9449abbe4" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>WriteFloat</name></member>
      <member refid="classwx_data_output_stream_1ac05b830a50acb4929c18807b518612af" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>WriteFloat</name></member>
      <member refid="classwx_data_output_stream_1ad59954476921dd0f4a480e4d212ed61a" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>WriteString</name></member>
      <member refid="classwx_data_output_stream_1a7fb37c717609de9f339321d186afe547" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>wxDataOutputStream</name></member>
      <member refid="classwx_data_output_stream_1a8373bef51ad9b57f635ad6d66055ef65" prot="public" virt="non-virtual"><scope>wxDataOutputStream</scope><name>~wxDataOutputStream</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
