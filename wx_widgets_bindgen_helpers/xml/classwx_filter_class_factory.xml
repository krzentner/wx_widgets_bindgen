<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_filter_class_factory" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>wxFilterClassFactory</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <includes local="no">wx/stream.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_filter_class_factory_1a0b6fa811a762e7860e68bc7cd7e31e81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_filter_class_factory" kindref="compound">wxFilterClassFactory</ref> *</type>
        <definition>const wxFilterClassFactory* wxFilterClassFactory::GetNext</definition>
        <argsstring>() const</argsstring>
        <name>GetNext</name>
        <briefdescription>
<para>GetFirst and GetNext can be used to enumerate the available factories. </para>        </briefdescription>
        <detaileddescription>
<para>For example, to list them:</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>list;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>wxFilterClassFactory<sp/>*factory<sp/>=<sp/>wxFilterClassFactory::GetFirst();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>(factory)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>&lt;&lt;<sp/>factory-&gt;GetProtocol()<sp/>&lt;&lt;<sp/>wxT(&quot;\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>factory<sp/>=<sp/>factory-&gt;GetNext();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><ref refid="classwx_filter_class_factory_1a215d8ac7d40509cca70c94462c8e9da4" kindref="member">GetFirst()</ref>/GetNext() return a pointer to a factory or NULL if no more are available. They do not give away ownership of the factory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1a215d8ac7d40509cca70c94462c8e9da4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_filter_class_factory" kindref="compound">wxFilterClassFactory</ref> *</type>
        <definition>static const wxFilterClassFactory* wxFilterClassFactory::GetFirst</definition>
        <argsstring>()</argsstring>
        <name>GetFirst</name>
        <briefdescription>
<para>GetFirst and GetNext can be used to enumerate the available factories. </para>        </briefdescription>
        <detaileddescription>
<para>For example, to list them:</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>list;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>wxFilterClassFactory<sp/>*factory<sp/>=<sp/>wxFilterClassFactory::GetFirst();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>(factory)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>&lt;&lt;<sp/>factory-&gt;GetProtocol()<sp/>&lt;&lt;<sp/>wxT(&quot;\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>factory<sp/>=<sp/>factory-&gt;GetNext();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><ref refid="classwx_filter_class_factory_1a215d8ac7d40509cca70c94462c8e9da4" kindref="member">GetFirst()</ref>/GetNext() return a pointer to a factory or NULL if no more are available. They do not give away ownership of the factory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="898" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classwx_filter_class_factory_1a8e6dae81ce0b876db269f74b299b5132" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classwx_filter_input_stream" kindref="compound">wxFilterInputStream</ref> *</type>
        <definition>virtual wxFilterInputStream* wxFilterClassFactory::NewStream</definition>
        <argsstring>(wxInputStream &amp;stream) const =0</argsstring>
        <name>NewStream</name>
        <param>
          <type><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create a new input or output stream to decompress or compress a given stream. </para>        </briefdescription>
        <detaileddescription>
<para>If the parent stream is passed as a pointer then the new filter stream takes ownership of it. If it is passed by reference then it does not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1ab623f008dd9b9ae1c84fc3d25597c5e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classwx_filter_output_stream" kindref="compound">wxFilterOutputStream</ref> *</type>
        <definition>virtual wxFilterOutputStream* wxFilterClassFactory::NewStream</definition>
        <argsstring>(wxOutputStream &amp;stream) const =0</argsstring>
        <name>NewStream</name>
        <param>
          <type><ref refid="classwx_output_stream" kindref="compound">wxOutputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create a new input or output stream to decompress or compress a given stream. </para>        </briefdescription>
        <detaileddescription>
<para>If the parent stream is passed as a pointer then the new filter stream takes ownership of it. If it is passed by reference then it does not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="933" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1a7e044c88499700024abd14d87480b6dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classwx_filter_input_stream" kindref="compound">wxFilterInputStream</ref> *</type>
        <definition>virtual wxFilterInputStream* wxFilterClassFactory::NewStream</definition>
        <argsstring>(wxInputStream *stream) const =0</argsstring>
        <name>NewStream</name>
        <param>
          <type><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create a new input or output stream to decompress or compress a given stream. </para>        </briefdescription>
        <detaileddescription>
<para>If the parent stream is passed as a pointer then the new filter stream takes ownership of it. If it is passed by reference then it does not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="934" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1a9fb9a9a7f629579760f8535bc9f194e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classwx_filter_output_stream" kindref="compound">wxFilterOutputStream</ref> *</type>
        <definition>virtual wxFilterOutputStream* wxFilterClassFactory::NewStream</definition>
        <argsstring>(wxOutputStream *stream) const =0</argsstring>
        <name>NewStream</name>
        <param>
          <type><ref refid="classwx_output_stream" kindref="compound">wxOutputStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create a new input or output stream to decompress or compress a given stream. </para>        </briefdescription>
        <detaileddescription>
<para>If the parent stream is passed as a pointer then the new filter stream takes ownership of it. If it is passed by reference then it does not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="935" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_filter_class_factory_1ae0f9c6de77f26e3eef4e6f37c6cab5b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFilterClassFactory::CanHandle</definition>
        <argsstring>(const wxString &amp;protocol, wxStreamProtocolType type=wxSTREAM_PROTOCOL) const</argsstring>
        <name>CanHandle</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8" kindref="member">wxStreamProtocolType</ref></type>
          <declname>type</declname>
          <defval><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a4149acac8ba8afeec2994b101840893b" kindref="member">wxSTREAM_PROTOCOL</ref></defval>
        </param>
        <briefdescription>
<para>Returns true if this factory can handle the given protocol, MIME type, HTTP encoding or file extension. </para>        </briefdescription>
        <detaileddescription>
<para>When using <computeroutput>wxSTREAM_FILEEXT</computeroutput> for the second parameter, the first parameter can be a complete filename rather than just an extension. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="865" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1a9ed58cae1aee3d369eda28abd65739c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxFilterClassFactory::GetProtocol</definition>
        <argsstring>() const</argsstring>
        <name>GetProtocol</name>
        <briefdescription>
<para>Returns the <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> protocol supported by this factory. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to<programlisting><codeline><highlight class="normal">wxString(*GetProtocols())<sp/></highlight></codeline>
</programlisting>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="906" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1a6a94c7e3ab639d435ed854224347e239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref> *const  *</type>
        <definition>virtual const wxChar* const* wxFilterClassFactory::GetProtocols</definition>
        <argsstring>(wxStreamProtocolType type=wxSTREAM_PROTOCOL) const =0</argsstring>
        <name>GetProtocols</name>
        <param>
          <type><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8" kindref="member">wxStreamProtocolType</ref></type>
          <declname>type</declname>
          <defval><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a4149acac8ba8afeec2994b101840893b" kindref="member">wxSTREAM_PROTOCOL</ref></defval>
        </param>
        <briefdescription>
<para>Returns the protocols, MIME types, HTTP encodings or file extensions supported by this factory, as an array of null terminated strings. </para>        </briefdescription>
        <detaileddescription>
<para>It does not give away ownership of the array or strings.</para><para>For example, to list the file extensions a factory supports:</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>list;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>wxChar<sp/>*const<sp/>*p;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">for<sp/>(p<sp/>=<sp/>factory-&gt;GetProtocols(wxSTREAM_FILEEXT);<sp/>*p;<sp/>p++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>&lt;&lt;<sp/>*p<sp/>&lt;&lt;<sp/>wxT(&quot;\n&quot;);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="923" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1a4aebd8ef1a9e9e0b5f27ce9b3aee9c31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxFilterClassFactory::PopExtension</definition>
        <argsstring>(const wxString &amp;location) const</argsstring>
        <name>PopExtension</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Remove the file extension of <emphasis>location</emphasis> if it is one of the file extensions handled by this factory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="942" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1ab77910d8ef5facb85625edcaa2051ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxFilterClassFactory::PushFront</definition>
        <argsstring>()</argsstring>
        <name>PushFront</name>
        <briefdescription>
<para>Adds this class factory to the list returned by <ref refid="classwx_filter_class_factory_1a215d8ac7d40509cca70c94462c8e9da4" kindref="member">GetFirst()</ref>/GetNext(). </para>        </briefdescription>
        <detaileddescription>
<para>It is not necessary to do this to use the filter streams. It is usually used when implementing streams, typically the implementation will add a static instance of its factory class.</para><para>It can also be used to change the order of a factory already in the list, bringing it to the front. This isn&apos;t a thread safe operation so can&apos;t be done when other threads are running that will be using the list.</para><para>The list does not take ownership of the factory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_filter_class_factory_1a9484af1ed9f30d5be1d40274e02db24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxFilterClassFactory::Remove</definition>
        <argsstring>()</argsstring>
        <name>Remove</name>
        <briefdescription>
<para>Removes this class factory from the list returned by <ref refid="classwx_filter_class_factory_1a215d8ac7d40509cca70c94462c8e9da4" kindref="member">GetFirst()</ref>/GetNext(). </para>        </briefdescription>
        <detaileddescription>
<para>Removing from the list isn&apos;t a thread safe operation so can&apos;t be done when other threads are running that will be using the list.</para><para>The list does not own the factories, so removing a factory does not delete it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="966" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_filter_class_factory_1a689a3e8a0ea3bd8678f020cfb723f54f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_filter_class_factory" kindref="compound">wxFilterClassFactory</ref> *</type>
        <definition>static const wxFilterClassFactory* wxFilterClassFactory::Find</definition>
        <argsstring>(const wxString &amp;protocol, wxStreamProtocolType type=wxSTREAM_PROTOCOL)</argsstring>
        <name>Find</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8" kindref="member">wxStreamProtocolType</ref></type>
          <declname>type</declname>
          <defval><ref refid="interface_2wx_2stream_8h_1af43964582cc2e87658bf792727dceff8a4149acac8ba8afeec2994b101840893b" kindref="member">wxSTREAM_PROTOCOL</ref></defval>
        </param>
        <briefdescription>
<para>A static member that finds a factory that can handle a given protocol, MIME type, HTTP encoding or file extension. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the class factory if found, or NULL otherwise. It does not give away ownership of the factory.</para><para>When using <computeroutput>wxSTREAM_FILEEXT</computeroutput> for the second parameter, the first parameter can be a complete filename rather than just an extension. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/stream.h" line="877" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows the creation of filter streams to handle compression formats such as gzip and bzip2. </para>    </briefdescription>
    <detaileddescription>
<para>For example, given a filename you can search for a factory that will handle it and create a stream to decompress it:</para><para><programlisting><codeline><highlight class="normal">factory<sp/>=<sp/>wxFilterClassFactory::Find(filename,<sp/>wxSTREAM_FILEEXT);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(factory)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>factory-&gt;NewStream(new<sp/>wxFFileInputStream(filename));</highlight></codeline>
</programlisting></para><para><ref refid="classwx_filter_class_factory_1a689a3e8a0ea3bd8678f020cfb723f54f" kindref="member">wxFilterClassFactory::Find</ref> can also search for a factory by MIME type, HTTP encoding or by <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> protocol. The available factories can be enumerated using <ref refid="classwx_filter_class_factory_1a215d8ac7d40509cca70c94462c8e9da4" kindref="member">wxFilterClassFactory::GetFirst()</ref> and <ref refid="classwx_filter_class_factory_1a0b6fa811a762e7860e68bc7cd7e31e81" kindref="member">wxFilterClassFactory::GetNext()</ref>.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="classwx_filter_input_stream" kindref="compound">wxFilterInputStream</ref>, <ref refid="classwx_filter_output_stream" kindref="compound">wxFilterOutputStream</ref>, <ref refid="classwx_archive_class_factory" kindref="compound">wxArchiveClassFactory</ref>, <ref refid="overview_archive" kindref="compound">Archive Formats</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2453">
        <label>wxFilterClassFactory</label>
        <link refid="classwx_filter_class_factory"/>
        <childnode refid="2454" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2454">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2455">
        <label>wxFilterClassFactory</label>
        <link refid="classwx_filter_class_factory"/>
        <childnode refid="2456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2456">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="2457" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="2457">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/stream.h" line="856" column="1" bodyfile="interface/wx/stream.h" bodystart="855" bodyend="967"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>AllocExclusive</name></member>
      <member refid="classwx_filter_class_factory_1ae0f9c6de77f26e3eef4e6f37c6cab5b2" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>CanHandle</name></member>
      <member refid="classwx_object_1a436fc8fe68cf8a31000296d9cd3d2427" prot="protected" virt="virtual"><scope>wxFilterClassFactory</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a3f4f497c65cef611e121c41f21dd5ccc" prot="protected" virt="virtual"><scope>wxFilterClassFactory</scope><name>CreateRefData</name></member>
      <member refid="classwx_filter_class_factory_1a689a3e8a0ea3bd8678f020cfb723f54f" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>Find</name></member>
      <member refid="classwx_object_1ae6d365f2556b26767ced8410c5e839d0" prot="public" virt="virtual"><scope>wxFilterClassFactory</scope><name>GetClassInfo</name></member>
      <member refid="classwx_filter_class_factory_1a215d8ac7d40509cca70c94462c8e9da4" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>GetFirst</name></member>
      <member refid="classwx_filter_class_factory_1a0b6fa811a762e7860e68bc7cd7e31e81" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>GetNext</name></member>
      <member refid="classwx_filter_class_factory_1a9ed58cae1aee3d369eda28abd65739c1" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>GetProtocol</name></member>
      <member refid="classwx_filter_class_factory_1a6a94c7e3ab639d435ed854224347e239" prot="public" virt="pure-virtual"><scope>wxFilterClassFactory</scope><name>GetProtocols</name></member>
      <member refid="classwx_object_1af3c6c76a775864832f1536d3c0de3a2b" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>GetRefData</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>IsSameAs</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>m_refData</name></member>
      <member refid="classwx_filter_class_factory_1a8e6dae81ce0b876db269f74b299b5132" prot="public" virt="pure-virtual"><scope>wxFilterClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_filter_class_factory_1ab623f008dd9b9ae1c84fc3d25597c5e2" prot="public" virt="pure-virtual"><scope>wxFilterClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_filter_class_factory_1a7e044c88499700024abd14d87480b6dc" prot="public" virt="pure-virtual"><scope>wxFilterClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_filter_class_factory_1a9fb9a9a7f629579760f8535bc9f194e9" prot="public" virt="pure-virtual"><scope>wxFilterClassFactory</scope><name>NewStream</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>operator new</name></member>
      <member refid="classwx_filter_class_factory_1a4aebd8ef1a9e9e0b5f27ce9b3aee9c31" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>PopExtension</name></member>
      <member refid="classwx_filter_class_factory_1ab77910d8ef5facb85625edcaa2051ac3" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>PushFront</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>Ref</name></member>
      <member refid="classwx_filter_class_factory_1a9484af1ed9f30d5be1d40274e02db24f" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>Remove</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>SetRefData</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>UnShare</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxFilterClassFactory</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxFilterClassFactory</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
