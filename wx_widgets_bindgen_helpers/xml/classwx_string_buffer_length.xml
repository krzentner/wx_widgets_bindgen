<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_string_buffer_length" kind="class" language="C++" prot="public">
    <compoundname>wxStringBufferLength</compoundname>
    <includes local="no">wx/string.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_string_buffer_length_1ab5781d700200c2f7bd5fb3a620d11f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxStringBufferLength::wxStringBufferLength</definition>
        <argsstring>(const wxString &amp;str, size_t len)</argsstring>
        <name>wxStringBufferLength</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Constructs a writable string buffer object associated with the given string and containing enough space for at least <emphasis>len</emphasis> characters. </para>        </briefdescription>
        <detaileddescription>
<para>Basically, this is equivalent to calling <ref refid="classwx_string_1a0c87e85cee09e65d314457379e5aba19" kindref="member">wxString::GetWriteBuf</ref> and saving the result. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_buffer_length_1adb3669db3097da59589bce0dd9a432d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxStringBufferLength::~wxStringBufferLength</definition>
        <argsstring>()</argsstring>
        <name>~wxStringBufferLength</name>
        <briefdescription>
<para>Restores the string passed to the constructor to the usable state by calling <ref refid="classwx_string_1a3783b441b540bac783a8e5a2cceaae7d" kindref="member">wxString::UngetWriteBuf</ref> on it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1958" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_buffer_length_1a99d1d8c26b452528a05723e713e98077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxStringBufferLength::SetLength</definition>
        <argsstring>(size_t nLength)</argsstring>
        <name>SetLength</name>
        <param>
          <type>size_t</type>
          <declname>nLength</declname>
        </param>
        <briefdescription>
<para>Sets the internal length of the string referred to by <ref refid="classwx_string_buffer_length" kindref="compound">wxStringBufferLength</ref> to <emphasis>nLength</emphasis> characters. </para>        </briefdescription>
        <detaileddescription>
<para>Must be called before <ref refid="classwx_string_buffer_length" kindref="compound">wxStringBufferLength</ref> destructs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_string_buffer_length_1aabee47fbe9384792d8e9d876ec9a8f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref> *</type>
        <definition>wxChar* wxStringBufferLength::operator wxChar *</definition>
        <argsstring>()</argsstring>
        <name>operator wxChar *</name>
        <briefdescription>
<para>Returns the writable pointer to a buffer of the size at least equal to the length specified in the constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="1972" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This tiny class allows you to conveniently access the <ref refid="classwx_string" kindref="compound">wxString</ref> internal buffer as a writable pointer without any risk of forgetting to restore the string to the usable state later, and allows the user to set the internal length of the string. </para>    </briefdescription>
    <detaileddescription>
<para>For example, assuming you have a low-level OS function called <computeroutput>&quot;int GetMeaningOfLifeAsString(char *)&quot;</computeroutput> copying the value in the provided buffer (which must be writable, of course), and returning the actual length of the string, you might call it like this:</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>theAnswer;</highlight></codeline>
<codeline><highlight class="normal">wxStringBufferLength<sp/>theAnswerBuffer(theAnswer,<sp/>1024);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>nLength<sp/>=<sp/>GetMeaningOfLifeAsString(theAnswerBuffer);</highlight></codeline>
<codeline><highlight class="normal">theAnswerBuffer.SetLength(nLength);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(<sp/>theAnswer<sp/>!=<sp/>&quot;42&quot;<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxLogError(&quot;Something<sp/>is<sp/>very<sp/>wrong!&quot;);</highlight></codeline>
</programlisting></para><para>Note that the exact usage of this depends on whether or not wxUSE_STL is enabled. If wxUSE_STL is enabled, <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref> creates a separate empty character buffer, and if wxUSE_STL is disabled, it uses GetWriteBuf() from <ref refid="classwx_string" kindref="compound">wxString</ref>, keeping the same buffer <ref refid="classwx_string" kindref="compound">wxString</ref> uses intact. In other words, relying on <ref refid="classwx_string_buffer" kindref="compound">wxStringBuffer</ref> containing the old <ref refid="classwx_string" kindref="compound">wxString</ref> data is not a good idea if you want to build your program both with and without wxUSE_STL.</para><para>Note that wxStringBuffer::SetLength <bold>must</bold> be called before <ref refid="classwx_string_buffer_length" kindref="compound">wxStringBufferLength</ref> destructs.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt; </para>    </detaileddescription>
    <location file="interface/wx/string.h" line="1943" column="1" bodyfile="interface/wx/string.h" bodystart="1942" bodyend="1973"/>
    <listofallmembers>
      <member refid="classwx_string_buffer_length_1aabee47fbe9384792d8e9d876ec9a8f5b" prot="public" virt="non-virtual"><scope>wxStringBufferLength</scope><name>operator wxChar *</name></member>
      <member refid="classwx_string_buffer_length_1a99d1d8c26b452528a05723e713e98077" prot="public" virt="non-virtual"><scope>wxStringBufferLength</scope><name>SetLength</name></member>
      <member refid="classwx_string_buffer_length_1ab5781d700200c2f7bd5fb3a620d11f75" prot="public" virt="non-virtual"><scope>wxStringBufferLength</scope><name>wxStringBufferLength</name></member>
      <member refid="classwx_string_buffer_length_1adb3669db3097da59589bce0dd9a432d6" prot="public" virt="non-virtual"><scope>wxStringBufferLength</scope><name>~wxStringBufferLength</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
