<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_data_format" kind="class" language="C++" prot="public">
    <compoundname>wxDataFormat</compoundname>
    <includes local="no">wx/dataobj.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_data_format_1add51a8562152c7925113829dc297c43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDataFormat::wxDataFormat</definition>
        <argsstring>(wxDataFormatId format=wxDF_INVALID)</argsstring>
        <name>wxDataFormat</name>
        <param>
          <type><ref refid="defs_8h_1a263109c79f708754bf656c7768b27047" kindref="member">wxDataFormatId</ref></type>
          <declname>format</declname>
          <defval><ref refid="defs_8h_1a263109c79f708754bf656c7768b27047a8e449ff1cdf3fe95c9af901bb89d4053" kindref="member">wxDF_INVALID</ref></defval>
        </param>
        <briefdescription>
<para>Constructs a data format object for one of the standard data formats or an empty data object (use <ref refid="classwx_data_format_1a9400041e82a194b015bdf9d90805f701" kindref="member">SetType()</ref> or <ref refid="classwx_data_format_1a3b3748f25fc57f360b3ea5f68c238ee7" kindref="member">SetId()</ref> later in this case). </para>        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl use Wx::Bitmap-&gt;newNative(format). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1a6c08911611be5e3a5dd35528b4d091db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxDataFormat::wxDataFormat</definition>
        <argsstring>(const wxString &amp;format)</argsstring>
        <name>wxDataFormat</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Constructs a data format object for a custom format identified by its name <emphasis>format</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl use Wx::Bitmap-&gt;newUser(format). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1a3cfb41966f4e1392a474c383696374dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxDataFormat::GetId</definition>
        <argsstring>() const</argsstring>
        <name>GetId</name>
        <briefdescription>
<para>Returns the name of a custom format (this function will fail for a standard format). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1a13f0232b00f06aef1dc81f91d8b40d03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a263109c79f708754bf656c7768b27047" kindref="member">wxDataFormatId</ref></type>
        <definition>wxDataFormatId wxDataFormat::GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <briefdescription>
<para>Returns the platform-specific number identifying the format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1a3b3748f25fc57f360b3ea5f68c238ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataFormat::SetId</definition>
        <argsstring>(const wxString &amp;format)</argsstring>
        <name>SetId</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Sets the format to be the custom format identified by the given name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1a9400041e82a194b015bdf9d90805f701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxDataFormat::SetType</definition>
        <argsstring>(wxDataFormatId type)</argsstring>
        <name>SetType</name>
        <param>
          <type><ref refid="defs_8h_1a263109c79f708754bf656c7768b27047" kindref="member">wxDataFormatId</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Sets the format to the given value, which should be one of wxDF_XXX constants. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1a7d0cfbb13caaf0318d9b8cff837b8688" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDataFormat::operator!=</definition>
        <argsstring>(const wxDataFormat &amp;format) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Returns true if the formats are different. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1ae603bc27c62d99d7628efcdf6834070f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDataFormat::operator!=</definition>
        <argsstring>(wxDataFormatId format) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="defs_8h_1a263109c79f708754bf656c7768b27047" kindref="member">wxDataFormatId</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Returns true if the formats are different. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1aca1d037a8b2e584248025db8688c4b89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDataFormat::operator==</definition>
        <argsstring>(const wxDataFormat &amp;format) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Returns true if the formats are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_data_format_1a4ab6f89df1b1fe828974f53945bcdaf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxDataFormat::operator==</definition>
        <argsstring>(wxDataFormatId format) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="defs_8h_1a263109c79f708754bf656c7768b27047" kindref="member">wxDataFormatId</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Returns true if the formats are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/dataobj.h" line="124" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> is an encapsulation of a platform-specific format handle which is used by the system for the clipboard and drag and drop operations. </para>    </briefdescription>
    <detaileddescription>
<para>The applications are usually only interested in, for example, pasting data from the clipboard only if the data is in a format the program understands and a data format is something which uniquely identifies this format.</para><para>On the system level, a data format is usually just a number (<computeroutput>CLIPFORMAT</computeroutput> under Windows or <computeroutput>Atom</computeroutput> under X11, for example) and the standard formats are, indeed, just numbers which can be implicitly converted to <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref>. The standard formats are:</para><para><table rows="6" cols="2"><row>
<entry thead="no"><para>wxDF_INVALID </para></entry><entry thead="no"><para>An invalid format - used as default argument for functions taking a <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> argument sometimes. </para></entry></row>
<row>
<entry thead="no"><para>wxDF_TEXT </para></entry><entry thead="no"><para>Text format (<ref refid="classwx_string" kindref="compound">wxString</ref>). </para></entry></row>
<row>
<entry thead="no"><para>wxDF_BITMAP </para></entry><entry thead="no"><para>A bitmap (<ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref>). </para></entry></row>
<row>
<entry thead="no"><para>wxDF_METAFILE </para></entry><entry thead="no"><para>A metafile (<ref refid="classwx_metafile" kindref="compound">wxMetafile</ref>, Windows only). </para></entry></row>
<row>
<entry thead="no"><para>wxDF_FILENAME </para></entry><entry thead="no"><para>A list of filenames. </para></entry></row>
<row>
<entry thead="no"><para>wxDF_HTML </para></entry><entry thead="no"><para>An HTML string. This is currently only valid on Mac and MSW. </para></entry></row>
</table>
</para><para>As mentioned above, these standard formats may be passed to any function taking <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> argument because <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> has an implicit conversion from them (or, to be precise from the type <computeroutput>wxDataFormat::NativeFormat</computeroutput> which is the type used by the underlying platform for data formats).</para><para>Aside the standard formats, the application may also use custom formats which are identified by their names (strings) and not numeric identifiers. Although internally custom format must be created (or <emphasis>registered</emphasis>) first, you shouldn&apos;t care about it because it is done automatically the first time the <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> object corresponding to a given format name is created. The only implication of this is that you should avoid having global <ref refid="classwx_data_format" kindref="compound">wxDataFormat</ref> objects with non-default constructor because their constructors are executed before the program has time to perform all necessary initialisations and so an attempt to do clipboard format registration at this time will usually lead to a crash!</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="overview_dnd" kindref="compound">Drag and Drop Overview</ref>, <ref refid="page_samples_1page_samples_dnd" kindref="member">Drag &amp; Drop Sample</ref>, <ref refid="classwx_data_object" kindref="compound">wxDataObject</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="interface/wx/dataobj.h" line="62" column="1" bodyfile="interface/wx/dataobj.h" bodystart="61" bodyend="125"/>
    <listofallmembers>
      <member refid="classwx_data_format_1a3cfb41966f4e1392a474c383696374dc" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>GetId</name></member>
      <member refid="classwx_data_format_1a13f0232b00f06aef1dc81f91d8b40d03" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>GetType</name></member>
      <member refid="classwx_data_format_1a7d0cfbb13caaf0318d9b8cff837b8688" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>operator!=</name></member>
      <member refid="classwx_data_format_1ae603bc27c62d99d7628efcdf6834070f" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>operator!=</name></member>
      <member refid="classwx_data_format_1aca1d037a8b2e584248025db8688c4b89" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>operator==</name></member>
      <member refid="classwx_data_format_1a4ab6f89df1b1fe828974f53945bcdaf6" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>operator==</name></member>
      <member refid="classwx_data_format_1a3b3748f25fc57f360b3ea5f68c238ee7" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>SetId</name></member>
      <member refid="classwx_data_format_1a9400041e82a194b015bdf9d90805f701" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>SetType</name></member>
      <member refid="classwx_data_format_1add51a8562152c7925113829dc297c43f" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>wxDataFormat</name></member>
      <member refid="classwx_data_format_1a6c08911611be5e3a5dd35528b4d091db" prot="public" virt="non-virtual"><scope>wxDataFormat</scope><name>wxDataFormat</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
