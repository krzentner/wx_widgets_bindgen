<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_grid" kind="class" language="C++" prot="public">
    <compoundname>wxGrid</compoundname>
    <basecompoundref refid="classwx_scrolled" prot="public" virt="non-virtual">wxScrolled&lt; wxPanel &gt;</basecompoundref>
    <includes local="no">wx/grid.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors and Initialization</header>
      <memberdef kind="function" id="classwx_grid_1ae2f7231fe2b518966b5698c8513bf66a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxGrid::wxGrid</definition>
        <argsstring>()</argsstring>
        <name>wxGrid</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>You must call <ref refid="classwx_grid_1a234438774fe788b4121b5b7dd269d0a5" kindref="member">Create()</ref> to really create the grid window and also call <ref refid="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" kindref="member">CreateGrid()</ref> or <ref refid="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" kindref="member">SetTable()</ref> to initialize the grid contents. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2093" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a484d6912058684ebc262af49d9486064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxGrid::wxGrid</definition>
        <argsstring>(wxWindow *parent, wxWindowID id, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=wxWANTS_CHARS, const wxString &amp;name=wxGridNameStr)</argsstring>
        <name>wxGrid</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval><ref refid="defs_8h_1a9fefaef352af381851b2b78eb5979a95" kindref="member">wxWANTS_CHARS</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxGridNameStr</defval>
        </param>
        <briefdescription>
<para>Constructor creating the grid window. </para>        </briefdescription>
        <detaileddescription>
<para>You must call either <ref refid="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" kindref="member">CreateGrid()</ref> or <ref refid="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" kindref="member">SetTable()</ref> to initialize the grid contents before using it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a38a39bf514eb5c96d85b0ecfe2f6f8c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxGrid::~wxGrid</definition>
        <argsstring>()</argsstring>
        <name>~wxGrid</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>This will also destroy the associated grid table unless you passed a table object to the grid and specified that the grid should not take ownership of the table (see <ref refid="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" kindref="member">SetTable()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a234438774fe788b4121b5b7dd269d0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::Create</definition>
        <argsstring>(wxWindow *parent, wxWindowID id, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=wxWANTS_CHARS, const wxString &amp;name=wxGridNameStr)</argsstring>
        <name>Create</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval><ref refid="defs_8h_1a9fefaef352af381851b2b78eb5979a95" kindref="member">wxWANTS_CHARS</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxGridNameStr</defval>
        </param>
        <briefdescription>
<para>Creates the grid window for an object initialized using the default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>You must call either <ref refid="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" kindref="member">CreateGrid()</ref> or <ref refid="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" kindref="member">SetTable()</ref> to initialize the grid contents before using it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CreateGrid</definition>
        <argsstring>(int numRows, int numCols, wxGridSelectionModes selmode=wxGridSelectCells)</argsstring>
        <name>CreateGrid</name>
        <param>
          <type>int</type>
          <declname>numRows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numCols</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6" kindref="member">wxGridSelectionModes</ref></type>
          <declname>selmode</declname>
          <defval><ref refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6a328a6fa22102d968dde6f4d480f71309" kindref="member">wxGridSelectCells</ref></defval>
        </param>
        <briefdescription>
<para>Creates a grid with the specified initial number of rows and columns. </para>        </briefdescription>
        <detaileddescription>
<para>Call this directly after the grid constructor. When you use this function <ref refid="classwx_grid" kindref="compound">wxGrid</ref> will create and manage a simple table of string values for you. All of the grid data will be stored in memory.</para><para>For applications with more complex data types or relationships, or for dealing with very large datasets, you should derive your own grid table class and pass a table object to the grid with <ref refid="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" kindref="member">SetTable()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::SetTable</definition>
        <argsstring>(wxGridTableBase *table, bool takeOwnership=false, wxGridSelectionModes selmode=wxGridSelectCells)</argsstring>
        <name>SetTable</name>
        <param>
          <type><ref refid="classwx_grid_table_base" kindref="compound">wxGridTableBase</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeOwnership</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6" kindref="member">wxGridSelectionModes</ref></type>
          <declname>selmode</declname>
          <defval><ref refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6a328a6fa22102d968dde6f4d480f71309" kindref="member">wxGridSelectCells</ref></defval>
        </param>
        <briefdescription>
<para>Passes a pointer to a custom grid table to be used by the grid. </para>        </briefdescription>
        <detaileddescription>
<para>This should be called after the grid constructor and before using the grid object. If <emphasis>takeOwnership</emphasis> is set to true then the table will be deleted by the <ref refid="classwx_grid" kindref="compound">wxGrid</ref> destructor.</para><para>Use this function instead of <ref refid="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" kindref="member">CreateGrid()</ref> when your application involves complex or non-string data or data sets that are too large to fit wholly in memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa1b4e5e1ddbf300364beb7c2a5526580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::ProcessTableMessage</definition>
        <argsstring>(wxGridTableMessage &amp;msg)</argsstring>
        <name>ProcessTableMessage</name>
        <param>
          <type><ref refid="classwx_grid_table_message" kindref="compound">wxGridTableMessage</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Receive and handle a message from the table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2159" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Grid Line Formatting</header>
      <memberdef kind="function" id="classwx_grid_1a0423953fad4490d33cbac7ae0e1fdcb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableGridLines</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableGridLines</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Turns the drawing of grid lines on or off. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2934bfeb1402636dbbe79528e63aaa2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_pen" kindref="compound">wxPen</ref></type>
        <definition>virtual wxPen wxGrid::GetColGridLinePen</definition>
        <argsstring>(int col)</argsstring>
        <name>GetColGridLinePen</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the pen used for vertical grid lines. </para>        </briefdescription>
        <detaileddescription>
<para>This virtual function may be overridden in derived classes in order to change the appearance of individual grid lines for the given column <emphasis>col</emphasis>.</para><para>See <ref refid="classwx_grid_1a18eab062ecf18a735222153502cf7462" kindref="member">GetRowGridLinePen()</ref> for an example. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae9d60a3730af481783f94a51c0fb64ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_pen" kindref="compound">wxPen</ref></type>
        <definition>virtual wxPen wxGrid::GetDefaultGridLinePen</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultGridLinePen</name>
        <briefdescription>
<para>Returns the pen used for grid lines. </para>        </briefdescription>
        <detaileddescription>
<para>This virtual function may be overridden in derived classes in order to change the appearance of grid lines. Note that currently the pen width must be 1.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a2934bfeb1402636dbbe79528e63aaa2f" kindref="member">GetColGridLinePen()</ref>, <ref refid="classwx_grid_1a18eab062ecf18a735222153502cf7462" kindref="member">GetRowGridLinePen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a73988313324597d83ce70d84c775ce67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetGridLineColour</definition>
        <argsstring>() const</argsstring>
        <name>GetGridLineColour</name>
        <briefdescription>
<para>Returns the colour used for grid lines. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1ae9d60a3730af481783f94a51c0fb64ef" kindref="member">GetDefaultGridLinePen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a18eab062ecf18a735222153502cf7462" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_pen" kindref="compound">wxPen</ref></type>
        <definition>virtual wxPen wxGrid::GetRowGridLinePen</definition>
        <argsstring>(int row)</argsstring>
        <name>GetRowGridLinePen</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Returns the pen used for horizontal grid lines. </para>        </briefdescription>
        <detaileddescription>
<para>This virtual function may be overridden in derived classes in order to change the appearance of individual grid line for the given <emphasis>row</emphasis>.</para><para>Example: <programlisting><codeline><highlight class="normal">//<sp/>in<sp/>a<sp/>grid<sp/>displaying<sp/>music<sp/>notation,<sp/>use<sp/>a<sp/>solid<sp/>black<sp/>pen<sp/>between</highlight></codeline>
<codeline><highlight class="normal">//<sp/>octaves<sp/>(C0=row<sp/>127,<sp/>C1=row<sp/>115<sp/>etc.)</highlight></codeline>
<codeline><highlight class="normal">wxPen<sp/>MidiGrid::GetRowGridLinePen(int<sp/>row)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>row<sp/>%<sp/>12<sp/>==<sp/>7<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>wxPen(*wxBLACK,<sp/>1,<sp/>wxSOLID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetDefaultGridLinePen();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a831fe263d010d24029a155b276f9136a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::GridLinesEnabled</definition>
        <argsstring>() const</argsstring>
        <name>GridLinesEnabled</name>
        <briefdescription>
<para>Returns true if drawing of grid lines is turned on, false otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7854f6a6cf63fc159770a28d954ab1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetGridLineColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetGridLineColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the colour used to draw grid lines. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2232" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Label Values and Formatting</header>
      <memberdef kind="function" id="classwx_grid_1a2c79d193bb7e2ea31800c780b75414b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::GetColLabelAlignment</definition>
        <argsstring>(int *horiz, int *vert) const</argsstring>
        <name>GetColLabelAlignment</name>
        <param>
          <type>int *</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Sets the arguments to the current column label alignment values. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment will be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>.</para><para>Vertical alignment will be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a74a3580d63f1148b37b874ebaea5c59e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColLabelTextOrientation</definition>
        <argsstring>() const</argsstring>
        <name>GetColLabelTextOrientation</name>
        <briefdescription>
<para>Returns the orientation of the column labels (either <computeroutput>wxHORIZONTAL</computeroutput> or <computeroutput>wxVERTICAL</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6c448cc3bab75d23338d2b72e14a3065" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxGrid::GetColLabelValue</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetColLabelValue</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the specified column label. </para>        </briefdescription>
        <detaileddescription>
<para>The default grid table class provides column labels of the form A,B...Z,AA,AB...ZZ,AAA... If you are using a custom grid table you can override <ref refid="classwx_grid_table_base_1ac7db44c525e0791b29005ee4fa48e729" kindref="member">wxGridTableBase::GetColLabelValue()</ref> to provide your own labels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a635ec2cdebb505f3f62236d8e3bee382" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetLabelBackgroundColour</definition>
        <argsstring>() const</argsstring>
        <name>GetLabelBackgroundColour</name>
        <briefdescription>
<para>Returns the colour used for the background of row and column labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1af41cce5f668d203cd9cd5f0690d6614d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_font" kindref="compound">wxFont</ref></type>
        <definition>wxFont wxGrid::GetLabelFont</definition>
        <argsstring>() const</argsstring>
        <name>GetLabelFont</name>
        <briefdescription>
<para>Returns the font used for row and column labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a33a924a9a9ceb87d2b871217c68ec7de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetLabelTextColour</definition>
        <argsstring>() const</argsstring>
        <name>GetLabelTextColour</name>
        <briefdescription>
<para>Returns the colour used for row and column label text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a189b96ff1d2845c7af1fb5330b9c9094" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::GetRowLabelAlignment</definition>
        <argsstring>(int *horiz, int *vert) const</argsstring>
        <name>GetRowLabelAlignment</name>
        <param>
          <type>int *</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Returns the alignment used for row labels. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment will be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>.</para><para>Vertical alignment will be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6b42592fc653c7c752b4eb7122aa905e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxGrid::GetRowLabelValue</definition>
        <argsstring>(int row) const</argsstring>
        <name>GetRowLabelValue</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Returns the specified row label. </para>        </briefdescription>
        <detaileddescription>
<para>The default grid table class provides numeric row labels. If you are using a custom grid table you can override <ref refid="classwx_grid_table_base_1ad2a20c7f8ac0cbca8665639897b0aa33" kindref="member">wxGridTableBase::GetRowLabelValue()</ref> to provide your own labels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a07c1f371ef3bedc3c058e28031cf3d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::HideColLabels</definition>
        <argsstring>()</argsstring>
        <name>HideColLabels</name>
        <briefdescription>
<para>Hides the column labels by calling <ref refid="classwx_grid_1a96236117dc8e4f8f16653abf98db7555" kindref="member">SetColLabelSize()</ref> with a size of 0. </para>        </briefdescription>
        <detaileddescription>
<para>Show labels again by calling that method with a width greater than 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab81e66ed01683f271fd2fc73c8112156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::HideRowLabels</definition>
        <argsstring>()</argsstring>
        <name>HideRowLabels</name>
        <briefdescription>
<para>Hides the row labels by calling <ref refid="classwx_grid_1a9072318969deffab8fcf99694e5a4943" kindref="member">SetRowLabelSize()</ref> with a size of 0. </para>        </briefdescription>
        <detaileddescription>
<para>The labels can be shown again by calling <ref refid="classwx_grid_1a9072318969deffab8fcf99694e5a4943" kindref="member">SetRowLabelSize()</ref> with a width greater than 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a60414126439340d5d80e62b8c1b2cbab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColLabelAlignment</definition>
        <argsstring>(int horiz, int vert)</argsstring>
        <name>SetColLabelAlignment</name>
        <param>
          <type>int</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Sets the horizontal and vertical alignment of column label text. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment should be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>. Vertical alignment should be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a69351c33ed17234b561f9bc6dcb1361f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColLabelTextOrientation</definition>
        <argsstring>(int textOrientation)</argsstring>
        <name>SetColLabelTextOrientation</name>
        <param>
          <type>int</type>
          <declname>textOrientation</declname>
        </param>
        <briefdescription>
<para>Sets the orientation of the column labels (either <computeroutput>wxHORIZONTAL</computeroutput> or <computeroutput>wxVERTICAL</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a71dc9acfcc9fb12daf75325d55c4b241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColLabelValue</definition>
        <argsstring>(int col, const wxString &amp;value)</argsstring>
        <name>SetColLabelValue</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value for the given column label. </para>        </briefdescription>
        <detaileddescription>
<para>If you are using a custom grid table you must override <ref refid="classwx_grid_table_base_1a2c228818518de127b34c13655153021e" kindref="member">wxGridTableBase::SetColLabelValue()</ref> for this to have any effect. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a392ffec2ebdb3c81a3ead052ba90346f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetLabelBackgroundColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetLabelBackgroundColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the background colour for row and column labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1af5eafcd2c99e714b68d7db7ef7bd1dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetLabelFont</definition>
        <argsstring>(const wxFont &amp;font)</argsstring>
        <name>SetLabelFont</name>
        <param>
          <type>const <ref refid="classwx_font" kindref="compound">wxFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Sets the font for row and column labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ac8513e3c842f0036ed20fc01912d0744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetLabelTextColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetLabelTextColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the colour for row and column label text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a236c79c6b27033b4790e1a1c978a70b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowLabelAlignment</definition>
        <argsstring>(int horiz, int vert)</argsstring>
        <name>SetRowLabelAlignment</name>
        <param>
          <type>int</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Sets the horizontal and vertical alignment of row label text. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment should be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>. Vertical alignment should be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae67491f6e506a37dd45bc52e47a09fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowLabelValue</definition>
        <argsstring>(int row, const wxString &amp;value)</argsstring>
        <name>SetRowLabelValue</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value for the given row label. </para>        </briefdescription>
        <detaileddescription>
<para>If you are using a derived grid table you must override <ref refid="classwx_grid_table_base_1a8205840a49da8ab2147fa8081afb2de6" kindref="member">wxGridTableBase::SetRowLabelValue()</ref> for this to have any effect. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a1a5872a6e126933b0bf2582716279a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetUseNativeColLabels</definition>
        <argsstring>(bool native=true)</argsstring>
        <name>SetUseNativeColLabels</name>
        <param>
          <type>bool</type>
          <declname>native</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Call this in order to make the column labels use a native look by using <ref refid="classwx_renderer_native_1a65c10b87b311b5278890026b26c525b1" kindref="member">wxRendererNative::DrawHeaderButton()</ref> internally. </para>        </briefdescription>
        <detaileddescription>
<para>There is no equivalent method for drawing row columns as there is not native look for that. This option is useful when using <ref refid="classwx_grid" kindref="compound">wxGrid</ref> for displaying tables and not as a spread-sheet.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a4842fe48764f456260145947baa582d8" kindref="member">UseNativeColHeader()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a4842fe48764f456260145947baa582d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::UseNativeColHeader</definition>
        <argsstring>(bool native=true)</argsstring>
        <name>UseNativeColHeader</name>
        <param>
          <type>bool</type>
          <declname>native</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enable the use of native header window for column labels. </para>        </briefdescription>
        <detaileddescription>
<para>If this function is called with true argument, a <ref refid="classwx_header_ctrl" kindref="compound">wxHeaderCtrl</ref> is used instead to display the column labels instead of drawing them in <ref refid="classwx_grid" kindref="compound">wxGrid</ref> code itself. This has the advantage of making the grid look and feel perfectly the same as native applications (using <ref refid="classwx_grid_1a1a5872a6e126933b0bf2582716279a41" kindref="member">SetUseNativeColLabels()</ref> the grid can be made to look more natively but it still doesn&apos;t feel natively, notably the column resizing and dragging still works slightly differently as it is implemented in wxWidgets itself) but results in different behaviour for column and row headers, for which there is no equivalent function, and, most importantly, is unsuitable for grids with huge numbers of columns as <ref refid="classwx_header_ctrl" kindref="compound">wxHeaderCtrl</ref> doesn&apos;t support virtual mode. Because of this, by default the grid does not use the native header control but you should call this function to enable it if you are using the grid to display tabular data and don&apos;t have thousands of columns in it.</para><para>Another difference between the default behaviour and the native header behaviour is that the latter provides the user with a context menu (which appears on right clicking the header) allowing to rearrange the grid columns if <ref refid="classwx_grid_1aac882ed41d117975173148afe7aad57f" kindref="member">CanDragColMove()</ref> returns true. If you want to prevent this from happening for some reason, you need to define a handler for <computeroutput>wxEVT_GRID_LABEL_RIGHT_CLICK</computeroutput> event which simply does nothing (in particular doesn&apos;t skip the event) as this will prevent the default right click handling from working.</para><para>Also note that currently <computeroutput>wxEVT_GRID_LABEL_RIGHT_DCLICK</computeroutput> event is not generated for the column labels if the native columns header is used (but this limitation could possibly be lifted in the future). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2416" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cell Formatting</header>
      <description><para>Note that <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> can be used alternatively to most of these methods. See the &quot;Attributes Management&quot; of <ref refid="classwx_grid_table_base" kindref="compound">wxGridTableBase</ref>. </para></description>
      <memberdef kind="function" id="classwx_grid_1ac8bb30dfa6d62abe6e4917520cfa4bd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::GetCellAlignment</definition>
        <argsstring>(int row, int col, int *horiz, int *vert) const</argsstring>
        <name>GetCellAlignment</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Sets the arguments to the horizontal and vertical text alignment values for the grid cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment will be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>.</para><para>Vertical alignment will be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a51beb3a300d89c88bbf558b16698e041" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetCellBackgroundColour</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetCellBackgroundColour</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the background colour of the cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a577ee88bebeea6f7bedf49ece672db61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_font" kindref="compound">wxFont</ref></type>
        <definition>wxFont wxGrid::GetCellFont</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetCellFont</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the font for text in the grid cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5cbd77c35b1a451de4099003e71bcb13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetCellTextColour</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetCellTextColour</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the text colour for the grid cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a778da643a613c20732a13221cf9c7721" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::GetDefaultCellAlignment</definition>
        <argsstring>(int *horiz, int *vert) const</argsstring>
        <name>GetDefaultCellAlignment</name>
        <param>
          <type>int *</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Returns the default cell alignment. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment will be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>.</para><para>Vertical alignment will be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ae4dabe2d98427cd34ade7088c204bf9f" kindref="member">SetDefaultCellAlignment()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a586d9363eefc95c43f9a5e68ba19f760" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetDefaultCellBackgroundColour</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultCellBackgroundColour</name>
        <briefdescription>
<para>Returns the current default background colour for grid cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa66bdfc719b0348b391799dd7522aac5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_font" kindref="compound">wxFont</ref></type>
        <definition>wxFont wxGrid::GetDefaultCellFont</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultCellFont</name>
        <briefdescription>
<para>Returns the current default font for grid cell text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a960a2d24adacf32d61450842f40a2151" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetDefaultCellTextColour</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultCellTextColour</name>
        <briefdescription>
<para>Returns the current default colour for grid cell text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6b5f83fc2fe42c7fa3b989f70180f114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellAlignment</definition>
        <argsstring>(int row, int col, int horiz, int vert)</argsstring>
        <name>SetCellAlignment</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Sets the horizontal and vertical alignment for grid cell text at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment should be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>.</para><para>Vertical alignment should be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a83774c9cbf840641cc6ffba25ce32059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellAlignment</definition>
        <argsstring>(int align, int row, int col)</argsstring>
        <name>SetCellAlignment</name>
        <param>
          <type>int</type>
          <declname>align</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the horizontal and vertical alignment for grid cell text at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment should be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>.</para><para>Vertical alignment should be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1acc292daf2f7da2291feb871877ab949d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellBackgroundColour</definition>
        <argsstring>(int row, int col, const wxColour &amp;colour)</argsstring>
        <name>SetCellBackgroundColour</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Set the background colour for the given cell or all cells by default. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae6581134d17f41e05c8d476d6599000d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellFont</definition>
        <argsstring>(int row, int col, const wxFont &amp;font)</argsstring>
        <name>SetCellFont</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_font" kindref="compound">wxFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Sets the font for text in the grid cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a60a0d68be7e62daa5bd6228d3b0e22eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellTextColour</definition>
        <argsstring>(int row, int col, const wxColour &amp;colour)</argsstring>
        <name>SetCellTextColour</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the text colour for the given cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1adbcbd091140c6adf0f8d04ea1642b24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellTextColour</definition>
        <argsstring>(const wxColour &amp;val, int row, int col)</argsstring>
        <name>SetCellTextColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the text colour for the given cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1acec369b195d29fe8aaa16772989240f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellTextColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetCellTextColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the text colour for all cells by default. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae4dabe2d98427cd34ade7088c204bf9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultCellAlignment</definition>
        <argsstring>(int horiz, int vert)</argsstring>
        <name>SetDefaultCellAlignment</name>
        <param>
          <type>int</type>
          <declname>horiz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vert</declname>
        </param>
        <briefdescription>
<para>Sets the default horizontal and vertical alignment for grid cell text. </para>        </briefdescription>
        <detaileddescription>
<para>Horizontal alignment should be one of <computeroutput>wxALIGN_LEFT</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_RIGHT</computeroutput>. Vertical alignment should be one of <computeroutput>wxALIGN_TOP</computeroutput>, <computeroutput>wxALIGN_CENTRE</computeroutput> or <computeroutput>wxALIGN_BOTTOM</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a08f50e2e88b487e54ac70a708443b824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultCellBackgroundColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetDefaultCellBackgroundColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the default background colour for grid cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a27a342fc4f4fbc09ca6476565b5d6c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultCellFont</definition>
        <argsstring>(const wxFont &amp;font)</argsstring>
        <name>SetDefaultCellFont</name>
        <param>
          <type>const <ref refid="classwx_font" kindref="compound">wxFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Sets the default font to be used for grid cell text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a987dc8537b08f658b95db9ea9e7f3205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultCellTextColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetDefaultCellTextColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Sets the current default colour for grid cell text. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2552" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cell Values, Editors, and Renderers</header>
      <description><para>Note that <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> can be used alternatively to most of these methods. See the &quot;Attributes Management&quot; of <ref refid="classwx_grid_table_base" kindref="compound">wxGridTableBase</ref>. </para></description>
      <memberdef kind="function" id="classwx_grid_1a1bfd67cd4469284d07f64e0f72be4904" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CanEnableCellControl</definition>
        <argsstring>() const</argsstring>
        <name>CanEnableCellControl</name>
        <briefdescription>
<para>Returns true if the in-place edit control for the current grid cell can be used and false otherwise. </para>        </briefdescription>
        <detaileddescription>
<para>This function always returns false for the read-only cells. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1af011e6797af60bc02153b9cd1dc4ebf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DisableCellEditControl</definition>
        <argsstring>()</argsstring>
        <name>DisableCellEditControl</name>
        <briefdescription>
<para>Disables in-place editing of grid cells. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to calling EnableCellEditControl(false). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a297f313ceb2e06b6c70c348155adb66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableCellEditControl</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableCellEditControl</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables in-place editing of grid cell data. </para>        </briefdescription>
        <detaileddescription>
<para>The grid will issue either a <computeroutput>wxEVT_GRID_EDITOR_SHOWN</computeroutput> or <computeroutput>wxEVT_GRID_EDITOR_HIDDEN</computeroutput> event. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2dc8ca1ef344f94752eb669c0d8dc87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableEditing</definition>
        <argsstring>(bool edit)</argsstring>
        <name>EnableEditing</name>
        <param>
          <type>bool</type>
          <declname>edit</declname>
        </param>
        <briefdescription>
<para>Makes the grid globally editable or read-only. </para>        </briefdescription>
        <detaileddescription>
<para>If the edit argument is false this function sets the whole grid as read-only. If the argument is true the grid is set to the default state where cells may be editable. In the default state you can set single grid cells and whole rows and columns to be editable or read-only via <ref refid="classwx_grid_cell_attr_1af5c0bfc11a1d5e09557a00d3b54a163b" kindref="member">wxGridCellAttr::SetReadOnly()</ref>. For single cells you can also use the shortcut function <ref refid="classwx_grid_1a75a19910c37b2eb66ee598b2ceaeb34b" kindref="member">SetReadOnly()</ref>.</para><para>For more information about controlling grid cell attributes see the <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> class and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2ef9802294fac0c54bc67a6200065bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
        <definition>wxGridCellEditor* wxGrid::GetCellEditor</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetCellEditor</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns a pointer to the editor for the cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers.</para><para>The caller must call DecRef() on the returned pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1abf94c6c66f9b6a02d2a31cfae61d1dda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> *</type>
        <definition>wxGridCellRenderer* wxGrid::GetCellRenderer</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetCellRenderer</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns a pointer to the renderer for the grid cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers.</para><para>The caller must call DecRef() on the returned pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa9c57c3f12844320dc18091fe18b1d9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxGrid::GetCellValue</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetCellValue</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the string contained in the cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>For simple applications where a grid object automatically uses a default grid table of string values you use this function together with <ref refid="classwx_grid_1aabb3c207aa790ea5702593ade8a53962" kindref="member">SetCellValue()</ref> to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values.</para><para>See <ref refid="classwx_grid_table_base_1ab35a34c87742cf546751d93b5f6cdbdb" kindref="member">wxGridTableBase::CanGetValueAs()</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2637" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a032aa0b4e0c5ddab56e687194ba63764" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxGrid::GetCellValue</definition>
        <argsstring>(const wxGridCellCoords &amp;coords) const</argsstring>
        <name>GetCellValue</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Returns the string contained in the cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>For simple applications where a grid object automatically uses a default grid table of string values you use this function together with <ref refid="classwx_grid_1aabb3c207aa790ea5702593ade8a53962" kindref="member">SetCellValue()</ref> to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values.</para><para>See <ref refid="classwx_grid_table_base_1ab35a34c87742cf546751d93b5f6cdbdb" kindref="member">wxGridTableBase::CanGetValueAs()</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2651" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae688ec9712044e4fcb9402dbc3a65f74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
        <definition>wxGridCellEditor* wxGrid::GetDefaultEditor</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultEditor</name>
        <briefdescription>
<para>Returns a pointer to the current default grid cell editor. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ad165b5ff8133d1a67d7cd657b52d3176" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
        <definition>virtual wxGridCellEditor* wxGrid::GetDefaultEditorForCell</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetDefaultEditorForCell</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the default editor for the specified cell. </para>        </briefdescription>
        <detaileddescription>
<para>The base class version returns the editor appropriate for the current cell type but this method may be overridden in the derived classes to use custom editors for some cells by default.</para><para>Notice that the same may be achieved in a usually simpler way by associating a custom editor with the given cell or cells.</para><para>The caller must call DecRef() on the returned pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2673" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a323aec5141232aeb9e6cd496bc074382" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
        <definition>wxGridCellEditor* wxGrid::GetDefaultEditorForCell</definition>
        <argsstring>(const wxGridCellCoords &amp;c) const</argsstring>
        <name>GetDefaultEditorForCell</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Returns the default editor for the specified cell. </para>        </briefdescription>
        <detaileddescription>
<para>The base class version returns the editor appropriate for the current cell type but this method may be overridden in the derived classes to use custom editors for some cells by default.</para><para>Notice that the same may be achieved in a usually simpler way by associating a custom editor with the given cell or cells.</para><para>The caller must call DecRef() on the returned pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2686" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a0cdde37c5cec62d05602e421aad00879" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
        <definition>virtual wxGridCellEditor* wxGrid::GetDefaultEditorForType</definition>
        <argsstring>(const wxString &amp;typeName) const</argsstring>
        <name>GetDefaultEditorForType</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Returns the default editor for the cells containing values of the given type. </para>        </briefdescription>
        <detaileddescription>
<para>The base class version returns the editor which was associated with the specified <emphasis>typeName</emphasis> when it was registered <ref refid="classwx_grid_1abee6e555080b85fd8379356537d9760c" kindref="member">RegisterDataType()</ref> but this function may be overridden to return something different. This allows to override an editor used for one of the standard types.</para><para>The caller must call DecRef() on the returned pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a65ae5813f2eab9e73bf45a780762b595" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> *</type>
        <definition>wxGridCellRenderer* wxGrid::GetDefaultRenderer</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultRenderer</name>
        <briefdescription>
<para>Returns a pointer to the current default grid cell renderer. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers.</para><para>The caller must call DecRef() on the returned pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7419c525e0cdcb442446c52bdf5cfcd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> *</type>
        <definition>virtual wxGridCellRenderer* wxGrid::GetDefaultRendererForCell</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetDefaultRendererForCell</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the default renderer for the given cell. </para>        </briefdescription>
        <detaileddescription>
<para>The base class version returns the renderer appropriate for the current cell type but this method may be overridden in the derived classes to use custom renderers for some cells by default.</para><para>The caller must call DecRef() on the returned pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2720" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a479e3c758306726629960a2c6a05d9ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> *</type>
        <definition>virtual wxGridCellRenderer* wxGrid::GetDefaultRendererForType</definition>
        <argsstring>(const wxString &amp;typeName) const</argsstring>
        <name>GetDefaultRendererForType</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Returns the default renderer for the cell containing values of the given type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a0cdde37c5cec62d05602e421aad00879" kindref="member">GetDefaultEditorForType()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2728" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a98f7eece9b1e39888650cf2c8ed767a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::HideCellEditControl</definition>
        <argsstring>()</argsstring>
        <name>HideCellEditControl</name>
        <briefdescription>
<para>Hides the in-place cell edit control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2733" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3b6b718296e8eb63659ea74d0430e947" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsCellEditControlEnabled</definition>
        <argsstring>() const</argsstring>
        <name>IsCellEditControlEnabled</name>
        <briefdescription>
<para>Returns true if the in-place edit control is currently enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2738" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a355737d3f6dbbf53364804d4f49123ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsCellEditControlShown</definition>
        <argsstring>() const</argsstring>
        <name>IsCellEditControlShown</name>
        <briefdescription>
<para>Returns true if the in-place edit control is currently shown. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a98f7eece9b1e39888650cf2c8ed767a1" kindref="member">HideCellEditControl()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2745" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5b30268a8c0f4119be74aacb036f103e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsCurrentCellReadOnly</definition>
        <argsstring>() const</argsstring>
        <name>IsCurrentCellReadOnly</name>
        <briefdescription>
<para>Returns true if the current cell is read-only. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a75a19910c37b2eb66ee598b2ceaeb34b" kindref="member">SetReadOnly()</ref>, <ref refid="classwx_grid_1a2805a3560ecf3bcfda14b074ab0be9b6" kindref="member">IsReadOnly()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3f20801157b107a70554e10ca34970e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsEditable</definition>
        <argsstring>() const</argsstring>
        <name>IsEditable</name>
        <briefdescription>
<para>Returns false if the whole grid has been set as read-only or true otherwise. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_1a2dc8ca1ef344f94752eb669c0d8dc87e" kindref="member">EnableEditing()</ref> for more information about controlling the editing status of grid cells. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2761" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2805a3560ecf3bcfda14b074ab0be9b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsReadOnly</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>IsReadOnly</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns true if the cell at the specified location can&apos;t be edited. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a75a19910c37b2eb66ee598b2ceaeb34b" kindref="member">SetReadOnly()</ref>, <ref refid="classwx_grid_1a5b30268a8c0f4119be74aacb036f103e" kindref="member">IsCurrentCellReadOnly()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2768" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1abee6e555080b85fd8379356537d9760c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::RegisterDataType</definition>
        <argsstring>(const wxString &amp;typeName, wxGridCellRenderer *renderer, wxGridCellEditor *editor)</argsstring>
        <name>RegisterDataType</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
          <declname>editor</declname>
        </param>
        <briefdescription>
<para>Register a new data type. </para>        </briefdescription>
        <detaileddescription>
<para>The data types allow to naturally associate specific renderers and editors to the cells containing values of the given type. For example, the grid automatically registers a data type with the name <computeroutput>wxGRID_VALUE_STRING</computeroutput> which uses <ref refid="classwx_grid_cell_string_renderer" kindref="compound">wxGridCellStringRenderer</ref> and <ref refid="classwx_grid_cell_text_editor" kindref="compound">wxGridCellTextEditor</ref> as its renderer and editor respectively <ndash/> this is the data type used by all the cells of the default <ref refid="classwx_grid_string_table" kindref="compound">wxGridStringTable</ref>, so this renderer and editor are used by default for all grid cells.</para><para>However if a custom table returns <computeroutput>wxGRID_VALUE_BOOL</computeroutput> from its <ref refid="classwx_grid_table_base_1a2192fb69ab1daf9684f23562d1fea727" kindref="member">wxGridTableBase::GetTypeName()</ref> method, then <ref refid="classwx_grid_cell_bool_renderer" kindref="compound">wxGridCellBoolRenderer</ref> and <ref refid="classwx_grid_cell_bool_editor" kindref="compound">wxGridCellBoolEditor</ref> are used for it because the grid also registers a boolean data type with this name.</para><para>And as this mechanism is completely generic, you may register your own data types using your own custom renderers and editors. Just remember that the table must identify a cell as being of the given type for them to be used for this cell.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the new type. May be any string, but if the type name is the same as the name of an already registered type, including one of the standard ones (which are <computeroutput>wxGRID_VALUE_STRING</computeroutput>, <computeroutput>wxGRID_VALUE_BOOL</computeroutput>, <computeroutput>wxGRID_VALUE_NUMBER</computeroutput>, <computeroutput>wxGRID_VALUE_FLOAT</computeroutput> and <computeroutput>wxGRID_VALUE_CHOICE</computeroutput>), then the new registration information replaces the previously used renderer and editor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderer</parametername>
</parameternamelist>
<parameterdescription>
<para>The renderer to use for the cells of this type. Its ownership is taken by the grid, i.e. it will call DecRef() on this pointer when it doesn&apos;t need it any longer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>editor</parametername>
</parameternamelist>
<parameterdescription>
<para>The editor to use for the cells of this type. Its ownership is also taken by the grid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aef67813dad089e14654ba2457fa5f02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SaveEditControlValue</definition>
        <argsstring>()</argsstring>
        <name>SaveEditControlValue</name>
        <briefdescription>
<para>Sets the value of the current grid cell to the current in-place edit control value. </para>        </briefdescription>
        <detaileddescription>
<para>This is called automatically when the grid cursor moves from the current cell to a new cell. It is also a good idea to call this function when closing a grid since any edits to the final cell location will not be saved otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2819" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa44586368f59b3a1bc321d6ec1aca61d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellEditor</definition>
        <argsstring>(int row, int col, wxGridCellEditor *editor)</argsstring>
        <name>SetCellEditor</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
          <declname>editor</declname>
        </param>
        <briefdescription>
<para>Sets the editor for the grid cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>The grid will take ownership of the pointer.</para><para>See <ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2829" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab128b5cec5bbeecf6e4d9f847f2406f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellRenderer</definition>
        <argsstring>(int row, int col, wxGridCellRenderer *renderer)</argsstring>
        <name>SetCellRenderer</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
<para>Sets the renderer for the grid cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>The grid will take ownership of the pointer.</para><para>See <ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2839" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aabb3c207aa790ea5702593ade8a53962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellValue</definition>
        <argsstring>(int row, int col, const wxString &amp;s)</argsstring>
        <name>SetCellValue</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the string value for the cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>For simple applications where a grid object automatically uses a default grid table of string values you use this function together with <ref refid="classwx_grid_1aa9c57c3f12844320dc18091fe18b1d9d" kindref="member">GetCellValue()</ref> to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values.</para><para>See <ref refid="classwx_grid_table_base_1ab17971b84ec8c875cf758310a975d96e" kindref="member">wxGridTableBase::CanSetValueAs()</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1af014f09c7e47dfa3ef9a9857a1adbba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellValue</definition>
        <argsstring>(const wxGridCellCoords &amp;coords, const wxString &amp;s)</argsstring>
        <name>SetCellValue</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the string value for the cell at the specified location. </para>        </briefdescription>
        <detaileddescription>
<para>For simple applications where a grid object automatically uses a default grid table of string values you use this function together with <ref refid="classwx_grid_1aa9c57c3f12844320dc18091fe18b1d9d" kindref="member">GetCellValue()</ref> to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values.</para><para>See <ref refid="classwx_grid_table_base_1ab17971b84ec8c875cf758310a975d96e" kindref="member">wxGridTableBase::CanSetValueAs()</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2868" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae8954e4868ef687120064e9ac580287c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellValue</definition>
        <argsstring>(const wxString &amp;val, int row, int col)</argsstring>
        <name>SetCellValue</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000018"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please use <ref refid="classwx_grid_1aabb3c207aa790ea5702593ade8a53962" kindref="member">SetCellValue(int,int,const wxString&amp;)</ref> or <ref refid="classwx_grid_1af014f09c7e47dfa3ef9a9857a1adbba5" kindref="member">SetCellValue(const wxGridCellCoords&amp;,const wxString&amp;)</ref> instead.</para></xrefdescription></xrefsect></para><para>Sets the string value for the cell at the specified location.</para><para>For simple applications where a grid object automatically uses a default grid table of string values you use this function together with <ref refid="classwx_grid_1aa9c57c3f12844320dc18091fe18b1d9d" kindref="member">GetCellValue()</ref> to access cell values. For more complex applications where you have derived your own grid table class that contains various data types (e.g. numeric, boolean or user-defined custom types) then you only use this function for those cells that contain string values.</para><para>See <ref refid="classwx_grid_table_base_1ab17971b84ec8c875cf758310a975d96e" kindref="member">wxGridTableBase::CanSetValueAs()</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab4f77e5af6df083db01f764ff65ee31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColFormatBool</definition>
        <argsstring>(int col)</argsstring>
        <name>SetColFormatBool</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the specified column to display boolean values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a88ea5b14ed0c2c56b04e7696c5968521" kindref="member">SetColFormatCustom()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a88ea5b14ed0c2c56b04e7696c5968521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColFormatCustom</definition>
        <argsstring>(int col, const wxString &amp;typeName)</argsstring>
        <name>SetColFormatCustom</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Sets the specified column to display data in a custom format. </para>        </briefdescription>
        <detaileddescription>
<para>This method provides an alternative to defining a custom grid table which would return <emphasis>typeName</emphasis> from its GetTypeName() method for the cells in this column: while it doesn&apos;t really change the type of the cells in this column, it does associate the renderer and editor used for the cells of the specified type with them.</para><para>See the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information on working with custom data types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a75e677b2b01b5fd4cae78d4ba58e2aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColFormatFloat</definition>
        <argsstring>(int col, int width=-1, int precision=-1)</argsstring>
        <name>SetColFormatFloat</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Sets the specified column to display floating point values with the given width and precision. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a88ea5b14ed0c2c56b04e7696c5968521" kindref="member">SetColFormatCustom()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae6533497c78d470b16b47c1036e9ae19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColFormatNumber</definition>
        <argsstring>(int col)</argsstring>
        <name>SetColFormatNumber</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the specified column to display integer values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a88ea5b14ed0c2c56b04e7696c5968521" kindref="member">SetColFormatCustom()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a730dfc4eef2d1bf5b1939d06cd638863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultEditor</definition>
        <argsstring>(wxGridCellEditor *editor)</argsstring>
        <name>SetDefaultEditor</name>
        <param>
          <type><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> *</type>
          <declname>editor</declname>
        </param>
        <briefdescription>
<para>Sets the default editor for grid cells. </para>        </briefdescription>
        <detaileddescription>
<para>The grid will take ownership of the pointer.</para><para>See <ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1acee5b448bb394d1dc846c6340789e1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultRenderer</definition>
        <argsstring>(wxGridCellRenderer *renderer)</argsstring>
        <name>SetDefaultRenderer</name>
        <param>
          <type><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
<para>Sets the default renderer for grid cells. </para>        </briefdescription>
        <detaileddescription>
<para>The grid will take ownership of the pointer.</para><para>See <ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> for more information about cell editors and renderers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2942" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a75a19910c37b2eb66ee598b2ceaeb34b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetReadOnly</definition>
        <argsstring>(int row, int col, bool isReadOnly=true)</argsstring>
        <name>SetReadOnly</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isReadOnly</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Makes the cell at the specified location read-only or editable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a2805a3560ecf3bcfda14b074ab0be9b6" kindref="member">IsReadOnly()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2949" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae1b31c23cf43c32b2757fdf469d89ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ShowCellEditControl</definition>
        <argsstring>()</argsstring>
        <name>ShowCellEditControl</name>
        <briefdescription>
<para>Displays the in-place cell edit control for the current cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2954" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Column and Row Sizes</header>
      <description><para><simplesect kind="see"><para><ref refid="overview_grid_1overview_grid_resizing" kindref="member">Column and Row Sizes</ref> </para></simplesect>
</para></description>
      <memberdef kind="function" id="classwx_grid_1a635459c73671fe0955c0f06c4d6c262e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::AutoSize</definition>
        <argsstring>()</argsstring>
        <name>AutoSize</name>
        <briefdescription>
<para>Automatically sets the height and width of all rows and columns to fit their contents. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2970" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa3ef64503b5451e7d92f4e925d123e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::AutoSizeColLabelSize</definition>
        <argsstring>(int col)</argsstring>
        <name>AutoSizeColLabelSize</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Automatically adjusts width of the column to fit its label. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2975" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae0bc620583cf5740fd585a3ac1aabced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::AutoSizeColumn</definition>
        <argsstring>(int col, bool setAsMin=true)</argsstring>
        <name>AutoSizeColumn</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>setAsMin</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Automatically sizes the column to fit its contents. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>setAsMin</emphasis> is true the calculated width will also be set as the minimal width for the column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2982" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a412837fe2932fcde8473e6fbf64f8ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::AutoSizeColumns</definition>
        <argsstring>(bool setAsMin=true)</argsstring>
        <name>AutoSizeColumns</name>
        <param>
          <type>bool</type>
          <declname>setAsMin</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Automatically sizes all columns to fit their contents. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>setAsMin</emphasis> is true the calculated widths will also be set as the minimal widths for the columns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2989" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a294120495c98eb7d2962b2c811cb5c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::AutoSizeRow</definition>
        <argsstring>(int row, bool setAsMin=true)</argsstring>
        <name>AutoSizeRow</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>setAsMin</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Automatically sizes the row to fit its contents. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>setAsMin</emphasis> is true the calculated height will also be set as the minimal height for the row. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2996" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa9e92637061a312584fb7d7a09f7f858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::AutoSizeRowLabelSize</definition>
        <argsstring>(int col)</argsstring>
        <name>AutoSizeRowLabelSize</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Automatically adjusts height of the row to fit its label. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a83a57fb7b20cb8fc9d9d0cd6124327e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::AutoSizeRows</definition>
        <argsstring>(bool setAsMin=true)</argsstring>
        <name>AutoSizeRows</name>
        <param>
          <type>bool</type>
          <declname>setAsMin</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Automatically sizes all rows to fit their contents. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>setAsMin</emphasis> is true the calculated heights will also be set as the minimal heights for the rows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3008" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a1d7d47dbd2278deadfe7dbe6eb80853c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::GetCellOverflow</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetCellOverflow</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns true if the cell value can overflow. </para>        </briefdescription>
        <detaileddescription>
<para>A cell can overflow if the next cell in the row is empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3015" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5c02f18f554628cd9025b1d56f24589b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColLabelSize</definition>
        <argsstring>() const</argsstring>
        <name>GetColLabelSize</name>
        <briefdescription>
<para>Returns the current height of the column labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3020" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a36835a1939ca0dfeb8b388ff750950a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColMinimalAcceptableWidth</definition>
        <argsstring>() const</argsstring>
        <name>GetColMinimalAcceptableWidth</name>
        <briefdescription>
<para>Returns the minimal width to which a column may be resized. </para>        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="classwx_grid_1a92c78351515c034604ddb69cf8122ab3" kindref="member">SetColMinimalAcceptableWidth()</ref> to change this value globally or <ref refid="classwx_grid_1a470eedb04977ef54ead3429ddbb0baaf" kindref="member">SetColMinimalWidth()</ref> to do it for individual columns.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a58f7bb75b188a367b00421a5e4028802" kindref="member">GetRowMinimalAcceptableHeight()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aad215a88e6be6a9697ef25365066fb30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColSize</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetColSize</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the width of the specified column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3035" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a0015ad597c1af523e9b7e38c468dd0ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsColShown</definition>
        <argsstring>(int col) const</argsstring>
        <name>IsColShown</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns true if the specified column is not currently hidden. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3040" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a94d805835909560eeca8defa045f232c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::GetDefaultCellOverflow</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultCellOverflow</name>
        <briefdescription>
<para>Returns true if the cells can overflow by default. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3045" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3a56267d9316b177ab278a59ea59f023" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetDefaultColLabelSize</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultColLabelSize</name>
        <briefdescription>
<para>Returns the default height for column labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3050" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2444690291b18541503f71b7a557e247" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetDefaultColSize</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultColSize</name>
        <briefdescription>
<para>Returns the current default width for grid columns. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3055" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a59cee915136a6152dbde4c6d7b88ff09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetDefaultRowLabelSize</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultRowLabelSize</name>
        <briefdescription>
<para>Returns the default width for the row labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ad39dda31f9b9d5a8e04b3309b41470b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetDefaultRowSize</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultRowSize</name>
        <briefdescription>
<para>Returns the current default height for grid rows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3065" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a58f7bb75b188a367b00421a5e4028802" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetRowMinimalAcceptableHeight</definition>
        <argsstring>() const</argsstring>
        <name>GetRowMinimalAcceptableHeight</name>
        <briefdescription>
<para>Returns the minimal size to which rows can be resized. </para>        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="classwx_grid_1a6be28cd73c4497e0d8c31cdac3968a0f" kindref="member">SetRowMinimalAcceptableHeight()</ref> to change this value globally or <ref refid="classwx_grid_1ab831d58057598419eefc9b7e1f392025" kindref="member">SetRowMinimalHeight()</ref> to do it for individual cells.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a36835a1939ca0dfeb8b388ff750950a2" kindref="member">GetColMinimalAcceptableWidth()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a94ddc56c91538bcf581ee1d8b0ae0bee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetRowLabelSize</definition>
        <argsstring>() const</argsstring>
        <name>GetRowLabelSize</name>
        <briefdescription>
<para>Returns the current width of the row labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3080" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a324d409ec70dea7401eaf2f09e9e5ecb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetRowSize</definition>
        <argsstring>(int row) const</argsstring>
        <name>GetRowSize</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Returns the height of the specified row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a12dd822ae9b966e89aad5deba7c154bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsRowShown</definition>
        <argsstring>(int row) const</argsstring>
        <name>IsRowShown</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Returns true if the specified row is not currently hidden. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3090" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a9c12922803284ce44b59033ede943c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellOverflow</definition>
        <argsstring>(int row, int col, bool allow)</argsstring>
        <name>SetCellOverflow</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow</declname>
        </param>
        <briefdescription>
<para>Sets the overflow permission of the cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3095" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a96236117dc8e4f8f16653abf98db7555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColLabelSize</definition>
        <argsstring>(int height)</argsstring>
        <name>SetColLabelSize</name>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Sets the height of the column labels. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>height</emphasis> equals to <computeroutput>wxGRID_AUTOSIZE</computeroutput> then height is calculated automatically so that no label is truncated. Note that this could be slow for a large table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a92c78351515c034604ddb69cf8122ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColMinimalAcceptableWidth</definition>
        <argsstring>(int width)</argsstring>
        <name>SetColMinimalAcceptableWidth</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Sets the minimal <emphasis>width</emphasis> to which the user can resize columns. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a36835a1939ca0dfeb8b388ff750950a2" kindref="member">GetColMinimalAcceptableWidth()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a470eedb04977ef54ead3429ddbb0baaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColMinimalWidth</definition>
        <argsstring>(int col, int width)</argsstring>
        <name>SetColMinimalWidth</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Sets the minimal <emphasis>width</emphasis> for the specified column <emphasis>col</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>It is usually best to call this method during grid creation as calling it later will not resize the column to the given minimal width even if it is currently narrower than it.</para><para><emphasis>width</emphasis> must be greater than the minimal acceptable column width as returned by <ref refid="classwx_grid_1a36835a1939ca0dfeb8b388ff750950a2" kindref="member">GetColMinimalAcceptableWidth()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ac790e2c667a549b04fc21e0d2a792224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColSize</definition>
        <argsstring>(int col, int width)</argsstring>
        <name>SetColSize</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Sets the width of the specified column. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The new column width in pixels, 0 to hide the column or -1 to fit the column width to its label width. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8a64029462e594c26068d33c35916e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::HideCol</definition>
        <argsstring>(int col)</argsstring>
        <name>HideCol</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Hides the specified column. </para>        </briefdescription>
        <detaileddescription>
<para>To show the column later you need to call <ref refid="classwx_grid_1ac790e2c667a549b04fc21e0d2a792224" kindref="member">SetColSize()</ref> with non-0 width or <ref refid="classwx_grid_1a82f280ae62d92b6db3eafe2583e7905e" kindref="member">ShowCol()</ref> to restore the previous column width.</para><para>If the column is already hidden, this method doesn&apos;t do anything.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a82f280ae62d92b6db3eafe2583e7905e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ShowCol</definition>
        <argsstring>(int col)</argsstring>
        <name>ShowCol</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Shows the previously hidden column by resizing it to non-0 size. </para>        </briefdescription>
        <detaileddescription>
<para>The column is shown again with the same width that it had before <ref refid="classwx_grid_1a8a64029462e594c26068d33c35916e8a" kindref="member">HideCol()</ref> call.</para><para>If the column is currently shown, this method doesn&apos;t do anything.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a8a64029462e594c26068d33c35916e8a" kindref="member">HideCol()</ref>, <ref refid="classwx_grid_1ac790e2c667a549b04fc21e0d2a792224" kindref="member">SetColSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7006f512cd4ff8d3ce7ddef573ed5088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultCellOverflow</definition>
        <argsstring>(bool allow)</argsstring>
        <name>SetDefaultCellOverflow</name>
        <param>
          <type>bool</type>
          <declname>allow</declname>
        </param>
        <briefdescription>
<para>Sets the default overflow permission of the cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a790d3b6250b39090f71b9647a4740f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultColSize</definition>
        <argsstring>(int width, bool resizeExistingCols=false)</argsstring>
        <name>SetDefaultColSize</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resizeExistingCols</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets the default width for columns in the grid. </para>        </briefdescription>
        <detaileddescription>
<para>This will only affect columns subsequently added to the grid unless <emphasis>resizeExistingCols</emphasis> is true.</para><para>If <emphasis>width</emphasis> is less than <ref refid="classwx_grid_1a36835a1939ca0dfeb8b388ff750950a2" kindref="member">GetColMinimalAcceptableWidth()</ref>, then the minimal acceptable width is used instead of it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5a50adddf3fd511e1aeb40bf1ea4ab62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetDefaultRowSize</definition>
        <argsstring>(int height, bool resizeExistingRows=false)</argsstring>
        <name>SetDefaultRowSize</name>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resizeExistingRows</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets the default height for rows in the grid. </para>        </briefdescription>
        <detaileddescription>
<para>This will only affect rows subsequently added to the grid unless <emphasis>resizeExistingRows</emphasis> is true.</para><para>If <emphasis>height</emphasis> is less than <ref refid="classwx_grid_1a58f7bb75b188a367b00421a5e4028802" kindref="member">GetRowMinimalAcceptableHeight()</ref>, then the minimal acceptable height is used instead of it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a9072318969deffab8fcf99694e5a4943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowLabelSize</definition>
        <argsstring>(int width)</argsstring>
        <name>SetRowLabelSize</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Sets the width of the row labels. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>width</emphasis> equals <computeroutput>wxGRID_AUTOSIZE</computeroutput> then width is calculated automatically so that no label is truncated. Note that this could be slow for a large table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6be28cd73c4497e0d8c31cdac3968a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowMinimalAcceptableHeight</definition>
        <argsstring>(int height)</argsstring>
        <name>SetRowMinimalAcceptableHeight</name>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Sets the minimal row <emphasis>height</emphasis> used by default. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_1a92c78351515c034604ddb69cf8122ab3" kindref="member">SetColMinimalAcceptableWidth()</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab831d58057598419eefc9b7e1f392025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowMinimalHeight</definition>
        <argsstring>(int row, int height)</argsstring>
        <name>SetRowMinimalHeight</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Sets the minimal <emphasis>height</emphasis> for the specified <emphasis>row</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_1a470eedb04977ef54ead3429ddbb0baaf" kindref="member">SetColMinimalWidth()</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a58ab2f54c69ee51a19fd1b82da49750a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowSize</definition>
        <argsstring>(int row, int height)</argsstring>
        <name>SetRowSize</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Sets the height of the specified row. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_grid_1ac790e2c667a549b04fc21e0d2a792224" kindref="member">SetColSize()</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a246e6e9f6ddadecf5baf5cf80363b129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::HideRow</definition>
        <argsstring>(int col)</argsstring>
        <name>HideRow</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Hides the specified row. </para>        </briefdescription>
        <detaileddescription>
<para>To show the row later you need to call <ref refid="classwx_grid_1a58ab2f54c69ee51a19fd1b82da49750a" kindref="member">SetRowSize()</ref> with non-0 width or <ref refid="classwx_grid_1a0efc4bd576b2589b4cca510faac3c0d3" kindref="member">ShowRow()</ref> to restore its original height.</para><para>If the row is already hidden, this method doesn&apos;t do anything.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a0efc4bd576b2589b4cca510faac3c0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ShowRow</definition>
        <argsstring>(int col)</argsstring>
        <name>ShowRow</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Shows the previously hidden row. </para>        </briefdescription>
        <detaileddescription>
<para>The row is shown again with the same height that it had before <ref refid="classwx_grid_1a246e6e9f6ddadecf5baf5cf80363b129" kindref="member">HideRow()</ref> call.</para><para>If the row is currently shown, this method doesn&apos;t do anything.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a246e6e9f6ddadecf5baf5cf80363b129" kindref="member">HideRow()</ref>, <ref refid="classwx_grid_1a58ab2f54c69ee51a19fd1b82da49750a" kindref="member">SetRowSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a4b3ecf7e2e3bb0febaabf154d36dc5a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwx_grid_sizes_info" kindref="compound">wxGridSizesInfo</ref></type>
        <definition>wxGridSizesInfo wxGrid::GetColSizes</definition>
        <argsstring>() const</argsstring>
        <name>GetColSizes</name>
        <briefdescription>
<para>Get size information for all columns at once. </para>        </briefdescription>
        <detaileddescription>
<para>This method is useful when the information about all column widths needs to be saved. The widths can be later restored using <ref refid="classwx_grid_1a812bca5cff53174769e976fd2ba537de" kindref="member">SetColSizes()</ref>.</para><para><simplesect kind="see"><para><ref refid="structwx_grid_sizes_info" kindref="compound">wxGridSizesInfo</ref>, <ref refid="classwx_grid_1a2fc2ec5ea5a8b0076d6bec3da420f0cb" kindref="member">GetRowSizes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2fc2ec5ea5a8b0076d6bec3da420f0cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwx_grid_sizes_info" kindref="compound">wxGridSizesInfo</ref></type>
        <definition>wxGridSizesInfo wxGrid::GetRowSizes</definition>
        <argsstring>() const</argsstring>
        <name>GetRowSizes</name>
        <briefdescription>
<para>Get size information for all row at once. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structwx_grid_sizes_info" kindref="compound">wxGridSizesInfo</ref>, <ref refid="classwx_grid_1a4b3ecf7e2e3bb0febaabf154d36dc5a6" kindref="member">GetColSizes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a812bca5cff53174769e976fd2ba537de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColSizes</definition>
        <argsstring>(const wxGridSizesInfo &amp;sizeInfo)</argsstring>
        <name>SetColSizes</name>
        <param>
          <type>const <ref refid="structwx_grid_sizes_info" kindref="compound">wxGridSizesInfo</ref> &amp;</type>
          <declname>sizeInfo</declname>
        </param>
        <briefdescription>
<para>Restore all columns sizes. </para>        </briefdescription>
        <detaileddescription>
<para>This is usually called with <ref refid="structwx_grid_sizes_info" kindref="compound">wxGridSizesInfo</ref> object previously returned by <ref refid="classwx_grid_1a4b3ecf7e2e3bb0febaabf154d36dc5a6" kindref="member">GetColSizes()</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a07a8fc5ffab7932e63a3741ea364d958" kindref="member">SetRowSizes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a07a8fc5ffab7932e63a3741ea364d958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowSizes</definition>
        <argsstring>(const wxGridSizesInfo &amp;sizeInfo)</argsstring>
        <name>SetRowSizes</name>
        <param>
          <type>const <ref refid="structwx_grid_sizes_info" kindref="compound">wxGridSizesInfo</ref> &amp;</type>
          <declname>sizeInfo</declname>
        </param>
        <briefdescription>
<para>Restore all rows sizes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a812bca5cff53174769e976fd2ba537de" kindref="member">SetColSizes()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a74c437fe1ba3b08ebb3cdfb6d6112309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellSize</definition>
        <argsstring>(int row, int col, int num_rows, int num_cols)</argsstring>
        <name>SetCellSize</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_cols</declname>
        </param>
        <briefdescription>
<para>Set the size of the cell. </para>        </briefdescription>
        <detaileddescription>
<para>Specifying a value of more than 1 in <emphasis>num_rows</emphasis> or <emphasis>num_cols</emphasis> will make the cell at (<emphasis>row</emphasis>, <emphasis>col</emphasis>) span the block of the specified size, covering the other cells which would be normally shown in it. Passing 1 for both arguments resets the cell to normal appearance.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ad1be6b70b5184d3ca17181683c086535" kindref="member">GetCellSize()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows to be occupied by this cell, must be &gt;= 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns to be occupied by this cell, must be &gt;= 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ad1be6b70b5184d3ca17181683c086535" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_1a601788de28c3c493f93c533eff7af1fd" kindref="member">CellSpan</ref></type>
        <definition>CellSpan wxGrid::GetCellSize</definition>
        <argsstring>(int row, int col, int *num_rows, int *num_cols) const</argsstring>
        <name>GetCellSize</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_rows</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_cols</declname>
        </param>
        <briefdescription>
<para>Get the size of the cell in number of cells covered by it. </para>        </briefdescription>
        <detaileddescription>
<para>For normal cells, the function fills both <emphasis>num_rows</emphasis> and <emphasis>num_cols</emphasis> with 1 and returns CellSpan_None. For cells which span multiple cells, i.e. for which <ref refid="classwx_grid_1a74c437fe1ba3b08ebb3cdfb6d6112309" kindref="member">SetCellSize()</ref> had been called, the returned values are the same ones as were passed to <ref refid="classwx_grid_1a74c437fe1ba3b08ebb3cdfb6d6112309" kindref="member">SetCellSize()</ref> call and the function return value is CellSpan_Main.</para><para>More unexpectedly, perhaps, the returned values may be <emphasis>negative</emphasis> for the cells which are inside a span covered by a cell occupying multiple rows or columns. They correspond to the offset of the main cell of the span from the cell passed to this functions and the function returns CellSpan_Inside value to indicate this.</para><para>As an example, consider a 3*3 grid with the cell (1, 1) (the one in the middle) having a span of 2 rows and 2 columns, i.e. the grid looks like <programlisting><codeline><highlight class="normal">+----+----+----+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+----+----+----+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+----+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+----+----+----+</highlight></codeline>
</programlisting> Then the function returns 2 and 2 in <emphasis>num_rows</emphasis> and <emphasis>num_cols</emphasis> for the cell (1, 1) itself and -1 and -1 for the cell (2, 2) as well as -1 and 0 for the cell (2, 1).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to variable receiving the number of rows, must not be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to variable receiving the number of columns, must not be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The kind of this cell span (the return value is new in wxWidgets 2.9.1, this function was void in previous wxWidgets versions). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab12320c9780d1a7d9c1bfd5c4396c0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxGrid::GetCellSize</definition>
        <argsstring>(const wxGridCellCoords &amp;coords)</argsstring>
        <name>GetCellSize</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Get the number of rows and columns allocated for this cell. </para>        </briefdescription>
        <detaileddescription>
<para>This overload doesn&apos;t return a CellSpan value but the values returned may still be negative, see GetCellSize(int, int, int *, int *) for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3352" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>User-Resizing and Dragging</header>
      <description><para>Functions controlling various interactive mouse operations.</para><para>By default, columns and rows can be resized by dragging the edges of their labels (this can be disabled using <ref refid="classwx_grid_1a68429a98c917a17d7a1716178e248ff8" kindref="member">DisableDragColSize()</ref> and <ref refid="classwx_grid_1a8649bb2283fdd841cad33a27e7866660" kindref="member">DisableDragRowSize()</ref> methods). And if grid line dragging is enabled with <ref refid="classwx_grid_1abf968b3b0d70d2d9cc5bacf7f9d9891a" kindref="member">EnableDragGridSize()</ref> they can also be resized by dragging the right or bottom edge of the grid cells.</para><para>Columns can also be moved to interactively change their order but this needs to be explicitly enabled with <ref refid="classwx_grid_1a65e4c1ddc7fbabfc3ea92f48e9405b14" kindref="member">EnableDragColMove()</ref>. </para></description>
      <memberdef kind="function" id="classwx_grid_1a5e469fc431e7021d0f6c55e1da5e9abf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CanDragCell</definition>
        <argsstring>() const</argsstring>
        <name>CanDragCell</name>
        <briefdescription>
<para>Return true if the dragging of cells is enabled or false otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aac882ed41d117975173148afe7aad57f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CanDragColMove</definition>
        <argsstring>() const</argsstring>
        <name>CanDragColMove</name>
        <briefdescription>
<para>Returns true if columns can be moved by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para>Columns can be moved by dragging on their labels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a9df385035636c80b68dabca18ad721ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CanDragColSize</definition>
        <argsstring>(int col) const</argsstring>
        <name>CanDragColSize</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns true if the given column can be resized by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if resizing the columns interactively is globally enabled, i.e. if <ref refid="classwx_grid_1a68429a98c917a17d7a1716178e248ff8" kindref="member">DisableDragColSize()</ref> hadn&apos;t been called, and if this column wasn&apos;t explicitly marked as non-resizable with <ref refid="classwx_grid_1aa1e083cb0febefca45e4e1bfaf7539a3" kindref="member">DisableColResize()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa9830bf4ba9db1ef36c47f5a59c72c24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CanDragGridSize</definition>
        <argsstring>() const</argsstring>
        <name>CanDragGridSize</name>
        <briefdescription>
<para>Return true if the dragging of grid lines to resize rows and columns is enabled or false otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6b9ba263a0b87b1e4da386c4af9be200" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CanDragRowSize</definition>
        <argsstring>(int row) const</argsstring>
        <name>CanDragRowSize</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Returns true if the given row can be resized by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as <ref refid="classwx_grid_1a9df385035636c80b68dabca18ad721ab" kindref="member">CanDragColSize()</ref> but for rows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa1e083cb0febefca45e4e1bfaf7539a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DisableColResize</definition>
        <argsstring>(int col)</argsstring>
        <name>DisableColResize</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Disable interactive resizing of the specified column. </para>        </briefdescription>
        <detaileddescription>
<para>This method allows to disable resizing of an individual column in a grid where the columns are otherwise resizable (which is the case by default).</para><para>Notice that currently there is no way to make some columns resizable in a grid where columns can&apos;t be resized by default as there doesn&apos;t seem to be any need for this in practice. There is also no way to make the column marked as fixed using this method resizable again because it is supposed that fixed columns are used for static parts of the grid and so should remain fixed during the entire grid lifetime.</para><para>Also notice that disabling interactive column resizing will not prevent the program from changing the column size.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1aa5221485d63e40c3d90d309b1bf5400a" kindref="member">EnableDragColSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ada36932f853ff0294f1faac5923fade6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DisableRowResize</definition>
        <argsstring>(int row)</argsstring>
        <name>DisableRowResize</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Disable interactive resizing of the specified row. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as <ref refid="classwx_grid_1aa1e083cb0febefca45e4e1bfaf7539a3" kindref="member">DisableColResize()</ref> but for rows.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a6f587ed5e79140e53e1ea37b7d70809d" kindref="member">EnableDragRowSize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ad81276135f13d3f201d1023196181abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DisableDragColMove</definition>
        <argsstring>()</argsstring>
        <name>DisableDragColMove</name>
        <briefdescription>
<para>Disables column moving by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to passing false to <ref refid="classwx_grid_1a65e4c1ddc7fbabfc3ea92f48e9405b14" kindref="member">EnableDragColMove()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a68429a98c917a17d7a1716178e248ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DisableDragColSize</definition>
        <argsstring>()</argsstring>
        <name>DisableDragColSize</name>
        <briefdescription>
<para>Disables column sizing by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to passing false to <ref refid="classwx_grid_1aa5221485d63e40c3d90d309b1bf5400a" kindref="member">EnableDragColSize()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8becb571ff4b0b23e69f0397eeaa391a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DisableDragGridSize</definition>
        <argsstring>()</argsstring>
        <name>DisableDragGridSize</name>
        <briefdescription>
<para>Disable mouse dragging of grid lines to resize rows and columns. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to passing false to <ref refid="classwx_grid_1abf968b3b0d70d2d9cc5bacf7f9d9891a" kindref="member">EnableDragGridSize()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8649bb2283fdd841cad33a27e7866660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DisableDragRowSize</definition>
        <argsstring>()</argsstring>
        <name>DisableDragRowSize</name>
        <briefdescription>
<para>Disables row sizing by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to passing false to <ref refid="classwx_grid_1a6f587ed5e79140e53e1ea37b7d70809d" kindref="member">EnableDragRowSize()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a28f088a5fb544882021ed385b27e4c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableDragCell</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableDragCell</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables cell dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a65e4c1ddc7fbabfc3ea92f48e9405b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableDragColMove</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableDragColMove</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables column moving by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa5221485d63e40c3d90d309b1bf5400a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableDragColSize</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableDragColSize</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables column sizing by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1aa1e083cb0febefca45e4e1bfaf7539a3" kindref="member">DisableColResize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1abf968b3b0d70d2d9cc5bacf7f9d9891a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableDragGridSize</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableDragGridSize</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables row and column resizing by dragging gridlines with the mouse. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6f587ed5e79140e53e1ea37b7d70809d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EnableDragRowSize</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableDragRowSize</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enables or disables row sizing by dragging with the mouse. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1ada36932f853ff0294f1faac5923fade6" kindref="member">DisableRowResize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a306864a9d327e1980e62960b1792d26a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColAt</definition>
        <argsstring>(int colPos) const</argsstring>
        <name>GetColAt</name>
        <param>
          <type>int</type>
          <declname>colPos</declname>
        </param>
        <briefdescription>
<para>Returns the column ID of the specified column position. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ac0deaff314b8d246a954cef9c9eb2ef2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColPos</definition>
        <argsstring>(int colID) const</argsstring>
        <name>GetColPos</name>
        <param>
          <type>int</type>
          <declname>colID</declname>
        </param>
        <briefdescription>
<para>Returns the position of the specified column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1abc846e26dc0080ad129f368bfaa6a49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColPos</definition>
        <argsstring>(int colID, int newPos)</argsstring>
        <name>SetColPos</name>
        <param>
          <type>int</type>
          <declname>colID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newPos</declname>
        </param>
        <briefdescription>
<para>Sets the position of the specified column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8bf7dd6407a3097a84493a23f054f116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColumnsOrder</definition>
        <argsstring>(const wxArrayInt &amp;order)</argsstring>
        <name>SetColumnsOrder</name>
        <param>
          <type>const <ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Sets the positions of all columns at once. </para>        </briefdescription>
        <detaileddescription>
<para>This method takes an array containing the indices of the columns in their display order, i.e. uses the same convention as <ref refid="classwx_header_ctrl_1a561d03dc7ce13d2deeff41b0df0b8990" kindref="member">wxHeaderCtrl::SetColumnsOrder()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a81c15abd722c3459dbf1c56c0dcc6fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ResetColPos</definition>
        <argsstring>()</argsstring>
        <name>ResetColPos</name>
        <briefdescription>
<para>Resets the position of the columns to the default. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3525" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cursor Movement</header>
      <memberdef kind="function" id="classwx_grid_1a03527c67f5d203b2f3adcb4aa4ca0575" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetGridCursorCol</definition>
        <argsstring>() const</argsstring>
        <name>GetGridCursorCol</name>
        <briefdescription>
<para>Returns the current grid cell column position. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5f4b99f3ffbb5d857cbc84809c976aae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetGridCursorRow</definition>
        <argsstring>() const</argsstring>
        <name>GetGridCursorRow</name>
        <briefdescription>
<para>Returns the current grid cell row position. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a38c5333b585400555a6bbac23d2bf61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::GoToCell</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>GoToCell</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Make the given cell current and ensure it is visible. </para>        </briefdescription>
        <detaileddescription>
<para>This method is equivalent to calling <ref refid="classwx_grid_1a97bca062601229ebfc7069eb97ffab8a" kindref="member">MakeCellVisible()</ref> and <ref refid="classwx_grid_1ae20437a17200690302fb7c97784f1100" kindref="member">SetGridCursor()</ref> and so, as with the latter, a <computeroutput>wxEVT_GRID_SELECT_CELL</computeroutput> event is generated by it and the selected cell doesn&apos;t change if the event is vetoed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a90651398c28f62fa3ba84631f5813ea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::GoToCell</definition>
        <argsstring>(const wxGridCellCoords &amp;coords)</argsstring>
        <name>GoToCell</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Make the given cell current and ensure it is visible. </para>        </briefdescription>
        <detaileddescription>
<para>This method is equivalent to calling <ref refid="classwx_grid_1a97bca062601229ebfc7069eb97ffab8a" kindref="member">MakeCellVisible()</ref> and <ref refid="classwx_grid_1ae20437a17200690302fb7c97784f1100" kindref="member">SetGridCursor()</ref> and so, as with the latter, a <computeroutput>wxEVT_GRID_SELECT_CELL</computeroutput> event is generated by it and the selected cell doesn&apos;t change if the event is vetoed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a366e838f760491f500a1ee92aacd47f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorDown</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorDown</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor down by one row. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a91ae663fda79c0c71001799940f073bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorDownBlock</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorDownBlock</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor down in the current column such that it skips to the beginning or end of a block of non-empty cells. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae40bbcd9a916013622102ea1a05e2054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorLeft</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorLeft</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor left by one column. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a592dbda3f66ce2450b6d1ca54ccc1f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorLeftBlock</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorLeftBlock</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor left in the current row such that it skips to the beginning or end of a block of non-empty cells. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3596" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a94ac571c0e0ea6feca2f10e06e23335d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorRight</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorRight</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor right by one column. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a0ccd8de3b784ca7fa93480eff9e5235d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorRightBlock</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorRightBlock</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor right in the current row such that it skips to the beginning or end of a block of non-empty cells. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa6fb5bd1011cf2915a59cdd807e2b1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorUp</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorUp</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor up by one row. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2ffacf3f71e073b9e66c15baba4d520a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MoveCursorUpBlock</definition>
        <argsstring>(bool expandSelection)</argsstring>
        <name>MoveCursorUpBlock</name>
        <param>
          <type>bool</type>
          <declname>expandSelection</declname>
        </param>
        <briefdescription>
<para>Moves the grid cursor up in the current column such that it skips to the beginning or end of a block of non-empty cells. </para>        </briefdescription>
        <detaileddescription>
<para>If a block of cells was previously selected it will expand if the argument is true or be cleared if the argument is false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3630" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae28d8cc8ab2cbf9e6edf3ddddeb7b9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MovePageDown</definition>
        <argsstring>()</argsstring>
        <name>MovePageDown</name>
        <briefdescription>
<para>Moves the grid cursor down by some number of rows so that the previous bottom visible row becomes the top visible row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a11c6c8e07f62e18a97cff5ef2d2375bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::MovePageUp</definition>
        <argsstring>()</argsstring>
        <name>MovePageUp</name>
        <briefdescription>
<para>Moves the grid cursor up by some number of rows so that the previous top visible row becomes the bottom visible row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae20437a17200690302fb7c97784f1100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetGridCursor</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>SetGridCursor</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Set the grid cursor to the specified cell. </para>        </briefdescription>
        <detaileddescription>
<para>The grid cursor indicates the current cell and can be moved by the user using the arrow keys or the mouse.</para><para>Calling this function generates a <computeroutput>wxEVT_GRID_SELECT_CELL</computeroutput> event and if the event handler vetoes this event, the cursor is not moved.</para><para>This function doesn&apos;t make the target call visible, use <ref refid="classwx_grid_1a38c5333b585400555a6bbac23d2bf61a" kindref="member">GoToCell()</ref> to do this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a03dcb7d4169045f21aa8b2721bc55006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetGridCursor</definition>
        <argsstring>(const wxGridCellCoords &amp;coords)</argsstring>
        <name>SetGridCursor</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Set the grid cursor to the specified cell. </para>        </briefdescription>
        <detaileddescription>
<para>The grid cursor indicates the current cell and can be moved by the user using the arrow keys or the mouse.</para><para>Calling this function generates a <computeroutput>wxEVT_GRID_SELECT_CELL</computeroutput> event and if the event handler vetoes this event, the cursor is not moved.</para><para>This function doesn&apos;t make the target call visible, use <ref refid="classwx_grid_1a38c5333b585400555a6bbac23d2bf61a" kindref="member">GoToCell()</ref> to do this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3f0bb553b28e7f00185c6c56d3c1262e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetTabBehaviour</definition>
        <argsstring>(TabBehaviour behaviour)</argsstring>
        <name>SetTabBehaviour</name>
        <param>
          <type><ref refid="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77e" kindref="member">TabBehaviour</ref></type>
          <declname>behaviour</declname>
        </param>
        <briefdescription>
<para>Set the grid&apos;s behaviour when the user presses the TAB key. </para>        </briefdescription>
        <detaileddescription>
<para>Pressing the TAB key moves the grid cursor right in the current row, if there is a cell at the right and, similarly, Shift-TAB moves the cursor to the left in the current row if it&apos;s not in the first column.</para><para>What happens if the cursor can&apos;t be moved because it it&apos;s already at the beginning or end of the row can be configured using this function, see <ref refid="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77e" kindref="member">wxGrid::TabBehaviour</ref> documentation for the detailed description.</para><para>IF none of the standard behaviours is appropriate, you can always handle <computeroutput>wxEVT_GRID_TABBING</computeroutput> event directly to implement a custom TAB-handling logic.</para><para><simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3688" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>User Selection</header>
      <memberdef kind="function" id="classwx_grid_1a3fb54d4d4d93bff7955a1d6ba2458418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ClearSelection</definition>
        <argsstring>()</argsstring>
        <name>ClearSelection</name>
        <briefdescription>
<para>Deselects all cells that are currently selected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3701" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aacb5b3492213720317dd61d5152252fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DeselectRow</definition>
        <argsstring>(int row)</argsstring>
        <name>DeselectRow</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Deselects a row of cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3c8a19c2f71db1ae551c414378b51c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DeselectCol</definition>
        <argsstring>(int col)</argsstring>
        <name>DeselectCol</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Deselects a column of cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a59d3b60cf7b7862ec77eadbeb4c0a08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DeselectCell</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>DeselectCell</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Deselects a cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3716" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1affcd2c7ebc133bd2bb7ed4147a6baff1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxGridCellCoordsArray</type>
        <definition>wxGridCellCoordsArray wxGrid::GetSelectedCells</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectedCells</name>
        <briefdescription>
<para>Returns an array of individually selected cells. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that this array does <emphasis>not</emphasis> contain all the selected cells in general as it doesn&apos;t include the cells selected as part of column, row or block selection. You must use this method, <ref refid="classwx_grid_1a25f5c712adb4dd6f772fcfb9e16f8f09" kindref="member">GetSelectedCols()</ref>, <ref refid="classwx_grid_1a7b1a8d38f36cf043ebb62d467ad3bf4f" kindref="member">GetSelectedRows()</ref> and <ref refid="classwx_grid_1ab5645051354099b3c18ab0124a02df0f" kindref="member">GetSelectionBlockTopLeft()</ref> and <ref refid="classwx_grid_1a5cbf7b09c83b0fa7adbe8d7fa7c931ab" kindref="member">GetSelectionBlockBottomRight()</ref> methods to obtain the entire selection in general.</para><para>Please notice this behaviour is by design and is needed in order to support grids of arbitrary size (when an entire column is selected in a grid with a million of columns, we don&apos;t want to create an array with a million of entries in this function, instead it returns an empty array and <ref refid="classwx_grid_1a25f5c712adb4dd6f772fcfb9e16f8f09" kindref="member">GetSelectedCols()</ref> returns an array containing one element). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a25f5c712adb4dd6f772fcfb9e16f8f09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref></type>
        <definition>wxArrayInt wxGrid::GetSelectedCols</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectedCols</name>
        <briefdescription>
<para>Returns an array of selected columns. </para>        </briefdescription>
        <detaileddescription>
<para>Please notice that this method alone is not sufficient to find all the selected columns as it contains only the columns which were individually selected but not those being part of the block selection or being selected in virtue of all of their cells being selected individually, please see <ref refid="classwx_grid_1affcd2c7ebc133bd2bb7ed4147a6baff1" kindref="member">GetSelectedCells()</ref> for more details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3745" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7b1a8d38f36cf043ebb62d467ad3bf4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref></type>
        <definition>wxArrayInt wxGrid::GetSelectedRows</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectedRows</name>
        <briefdescription>
<para>Returns an array of selected rows. </para>        </briefdescription>
        <detaileddescription>
<para>Please notice that this method alone is not sufficient to find all the selected rows as it contains only the rows which were individually selected but not those being part of the block selection or being selected in virtue of all of their cells being selected individually, please see <ref refid="classwx_grid_1affcd2c7ebc133bd2bb7ed4147a6baff1" kindref="member">GetSelectedCells()</ref> for more details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a0e2b31c4e81706a6a722c4642d060033" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetSelectionBackground</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionBackground</name>
        <briefdescription>
<para>Returns the colour used for drawing the selection background. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3761" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5cbf7b09c83b0fa7adbe8d7fa7c931ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxGridCellCoordsArray</type>
        <definition>wxGridCellCoordsArray wxGrid::GetSelectionBlockBottomRight</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionBlockBottomRight</name>
        <briefdescription>
<para>Returns an array of the bottom right corners of blocks of selected cells. </para>        </briefdescription>
        <detaileddescription>
<para>Please see <ref refid="classwx_grid_1affcd2c7ebc133bd2bb7ed4147a6baff1" kindref="member">GetSelectedCells()</ref> for more information about the selection representation in <ref refid="classwx_grid" kindref="compound">wxGrid</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ab5645051354099b3c18ab0124a02df0f" kindref="member">GetSelectionBlockTopLeft()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab5645051354099b3c18ab0124a02df0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wxGridCellCoordsArray</type>
        <definition>wxGridCellCoordsArray wxGrid::GetSelectionBlockTopLeft</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionBlockTopLeft</name>
        <briefdescription>
<para>Returns an array of the top left corners of blocks of selected cells. </para>        </briefdescription>
        <detaileddescription>
<para>Please see <ref refid="classwx_grid_1affcd2c7ebc133bd2bb7ed4147a6baff1" kindref="member">GetSelectedCells()</ref> for more information about the selection representation in <ref refid="classwx_grid" kindref="compound">wxGrid</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a5cbf7b09c83b0fa7adbe8d7fa7c931ab" kindref="member">GetSelectionBlockBottomRight()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a00b29721f4034dbe4d1fd60d2bfe98ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetSelectionForeground</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionForeground</name>
        <briefdescription>
<para>Returns the colour used for drawing the selection foreground. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3787" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab11f0eb86495b2804d7901c4c4b07f7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6" kindref="member">wxGridSelectionModes</ref></type>
        <definition>wxGridSelectionModes wxGrid::GetSelectionMode</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectionMode</name>
        <briefdescription>
<para>Returns the current selection mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a9da14b2045b0292cecc8e91b65993d29" kindref="member">SetSelectionMode()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3794" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa0708fb90f14b7a2ebc591d5e99b5fa8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsInSelection</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>IsInSelection</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns true if the given cell is selected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3799" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3b8debe0aabe546e656a5016f3d0a8ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsInSelection</definition>
        <argsstring>(const wxGridCellCoords &amp;coords) const</argsstring>
        <name>IsInSelection</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Returns true if the given cell is selected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a922a201eb41543395755c84af23172bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsSelection</definition>
        <argsstring>() const</argsstring>
        <name>IsSelection</name>
        <briefdescription>
<para>Returns true if there are currently any selected cells, rows, columns or blocks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a90ada950c9fd09d0b072a5264bb1335b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SelectAll</definition>
        <argsstring>()</argsstring>
        <name>SelectAll</name>
        <briefdescription>
<para>Selects all cells in the grid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a4e40784aca4bfaa4e46908c09fb85dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SelectBlock</definition>
        <argsstring>(int topRow, int leftCol, int bottomRow, int rightCol, bool addToSelected=false)</argsstring>
        <name>SelectBlock</name>
        <param>
          <type>int</type>
          <declname>topRow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>leftCol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottomRow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rightCol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addToSelected</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Selects a rectangular block of cells. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>addToSelected</emphasis> is false then any existing selection will be deselected; if true the column will be added to the existing selection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a174a5c963df52037ae40ad1b858cd490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SelectBlock</definition>
        <argsstring>(const wxGridCellCoords &amp;topLeft, const wxGridCellCoords &amp;bottomRight, bool addToSelected=false)</argsstring>
        <name>SelectBlock</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>topLeft</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>bottomRight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addToSelected</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Selects a rectangular block of cells. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>addToSelected</emphasis> is false then any existing selection will be deselected; if true the column will be added to the existing selection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3832" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8a8b96b9826ce1e968be79cc5994718b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SelectCol</definition>
        <argsstring>(int col, bool addToSelected=false)</argsstring>
        <name>SelectCol</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addToSelected</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Selects the specified column. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>addToSelected</emphasis> is false then any existing selection will be deselected; if true the column will be added to the existing selection.</para><para>This method won&apos;t select anything if the current selection mode is wxGridSelectRows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5d2f3eb82d7fb582b9b18f6400b5120a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SelectRow</definition>
        <argsstring>(int row, bool addToSelected=false)</argsstring>
        <name>SelectRow</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addToSelected</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Selects the specified row. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>addToSelected</emphasis> is false then any existing selection will be deselected; if true the row will be added to the existing selection.</para><para>This method won&apos;t select anything if the current selection mode is wxGridSelectColumns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3857" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae0fdd68c596ec67da406ee6a05d13d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetSelectionBackground</definition>
        <argsstring>(const wxColour &amp;c)</argsstring>
        <name>SetSelectionBackground</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the colour to be used for drawing the selection background. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3862" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa7847467f1f396326b6c53f54301cac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetSelectionForeground</definition>
        <argsstring>(const wxColour &amp;c)</argsstring>
        <name>SetSelectionForeground</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the colour to be used for drawing the selection foreground. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3867" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a9da14b2045b0292cecc8e91b65993d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetSelectionMode</definition>
        <argsstring>(wxGridSelectionModes selmode)</argsstring>
        <name>SetSelectionMode</name>
        <param>
          <type><ref refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6" kindref="member">wxGridSelectionModes</ref></type>
          <declname>selmode</declname>
        </param>
        <briefdescription>
<para>Set the selection behaviour of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>The existing selection is converted to conform to the new mode if possible and discarded otherwise (e.g. any individual selected cells are deselected if the new mode allows only the selection of the entire rows or columns). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3877" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Scrolling</header>
      <memberdef kind="function" id="classwx_grid_1ab8c39cc47b91e6af6d8252e641bf4649" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetScrollLineX</definition>
        <argsstring>() const</argsstring>
        <name>GetScrollLineX</name>
        <briefdescription>
<para>Returns the number of pixels per horizontal scroll increment. </para>        </briefdescription>
        <detaileddescription>
<para>The default is 15.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ade90be8270e854fb27ed79f107c4a9e6" kindref="member">GetScrollLineY()</ref>, <ref refid="classwx_grid_1a4c84b4bac1295f9b27776ce02b83a57b" kindref="member">SetScrollLineX()</ref>, <ref refid="classwx_grid_1a42bd20841dad3ceca0db6b63225f9145" kindref="member">SetScrollLineY()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3894" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ade90be8270e854fb27ed79f107c4a9e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetScrollLineY</definition>
        <argsstring>() const</argsstring>
        <name>GetScrollLineY</name>
        <briefdescription>
<para>Returns the number of pixels per vertical scroll increment. </para>        </briefdescription>
        <detaileddescription>
<para>The default is 15.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ab8c39cc47b91e6af6d8252e641bf4649" kindref="member">GetScrollLineX()</ref>, <ref refid="classwx_grid_1a4c84b4bac1295f9b27776ce02b83a57b" kindref="member">SetScrollLineX()</ref>, <ref refid="classwx_grid_1a42bd20841dad3ceca0db6b63225f9145" kindref="member">SetScrollLineY()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a933d79f0e9c2e412915ea1b87072c110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsVisible</definition>
        <argsstring>(int row, int col, bool wholeCellVisible=true) const</argsstring>
        <name>IsVisible</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wholeCellVisible</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns true if a cell is either entirely or at least partially visible in the grid window. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the cell must be entirely visible for this function to return true but if <emphasis>wholeCellVisible</emphasis> is false, the function returns true even if the cell is only partially visible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3913" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a28c1eeb9ed2c2550fa0f7e92707cf0fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsVisible</definition>
        <argsstring>(const wxGridCellCoords &amp;coords, bool wholeCellVisible=true) const</argsstring>
        <name>IsVisible</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wholeCellVisible</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns true if a cell is either entirely or at least partially visible in the grid window. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the cell must be entirely visible for this function to return true but if <emphasis>wholeCellVisible</emphasis> is false, the function returns true even if the cell is only partially visible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a97bca062601229ebfc7069eb97ffab8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::MakeCellVisible</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>MakeCellVisible</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Brings the specified cell into the visible grid cell area with minimal scrolling. </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if the cell is already visible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3931" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8a8aa088c6a5093d5a7ca67be9178bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::MakeCellVisible</definition>
        <argsstring>(const wxGridCellCoords &amp;coords)</argsstring>
        <name>MakeCellVisible</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Brings the specified cell into the visible grid cell area with minimal scrolling. </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if the cell is already visible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3938" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a4c84b4bac1295f9b27776ce02b83a57b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetScrollLineX</definition>
        <argsstring>(int x)</argsstring>
        <name>SetScrollLineX</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Sets the number of pixels per horizontal scroll increment. </para>        </briefdescription>
        <detaileddescription>
<para>The default is 15.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ab8c39cc47b91e6af6d8252e641bf4649" kindref="member">GetScrollLineX()</ref>, <ref refid="classwx_grid_1ade90be8270e854fb27ed79f107c4a9e6" kindref="member">GetScrollLineY()</ref>, <ref refid="classwx_grid_1a42bd20841dad3ceca0db6b63225f9145" kindref="member">SetScrollLineY()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a42bd20841dad3ceca0db6b63225f9145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetScrollLineY</definition>
        <argsstring>(int y)</argsstring>
        <name>SetScrollLineY</name>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Sets the number of pixels per vertical scroll increment. </para>        </briefdescription>
        <detaileddescription>
<para>The default is 15.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ab8c39cc47b91e6af6d8252e641bf4649" kindref="member">GetScrollLineX()</ref>, <ref refid="classwx_grid_1ade90be8270e854fb27ed79f107c4a9e6" kindref="member">GetScrollLineY()</ref>, <ref refid="classwx_grid_1a4c84b4bac1295f9b27776ce02b83a57b" kindref="member">SetScrollLineX()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3956" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Cell and Device Coordinate Translation</header>
      <memberdef kind="function" id="classwx_grid_1aa37b7cb6f90f1e484f8cb90c7438e257" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxGrid::BlockToDeviceRect</definition>
        <argsstring>(const wxGridCellCoords &amp;topLeft, const wxGridCellCoords &amp;bottomRight) const</argsstring>
        <name>BlockToDeviceRect</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>topLeft</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>bottomRight</declname>
        </param>
        <briefdescription>
<para>Convert grid cell coordinates to grid window pixel coordinates. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the rectangle that encloses the block of cells limited by <emphasis>topLeft</emphasis> and <emphasis>bottomRight</emphasis> cell in device coords and clipped to the client size of the grid window.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a88269edf1ef0d504998583ca002a2e19" kindref="member">CellToRect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3975" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a88269edf1ef0d504998583ca002a2e19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxGrid::CellToRect</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>CellToRect</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Return the rectangle corresponding to the grid cell&apos;s size and position in logical coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1aa37b7cb6f90f1e484f8cb90c7438e257" kindref="member">BlockToDeviceRect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3984" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6c117d0de616e8ed45c10cd1dcef0941" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxGrid::CellToRect</definition>
        <argsstring>(const wxGridCellCoords &amp;coords) const</argsstring>
        <name>CellToRect</name>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Return the rectangle corresponding to the grid cell&apos;s size and position in logical coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1aa37b7cb6f90f1e484f8cb90c7438e257" kindref="member">BlockToDeviceRect()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="3991" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a84e9fa5825fc211e6394eb0d2e5553c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::XToCol</definition>
        <argsstring>(int x, bool clipToMinMax=false) const</argsstring>
        <name>XToCol</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clipToMinMax</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the column at the given pixel position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position to evaluate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clipToMinMax</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, rather than returning <computeroutput>wxNOT_FOUND</computeroutput>, it returns either the first or last column depending on whether <emphasis>x</emphasis> is too far to the left or right respectively. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The column index or <computeroutput>wxNOT_FOUND</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4005" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a9948488c4b6feb52abe1c41d0fd6bbeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::XToEdgeOfCol</definition>
        <argsstring>(int x) const</argsstring>
        <name>XToEdgeOfCol</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the column whose right hand edge is close to the given logical <emphasis>x</emphasis> position. </para>        </briefdescription>
        <detaileddescription>
<para>If no column edge is near to this position <computeroutput>wxNOT_FOUND</computeroutput> is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4013" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7588cd5b535273b8ab7c8933b1cf764e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref></type>
        <definition>wxGridCellCoords wxGrid::XYToCell</definition>
        <argsstring>(int x, int y) const</argsstring>
        <name>XYToCell</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Translates logical pixel coordinates to the grid cell coordinates. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that this function expects logical coordinates on input so if you use this function in a mouse event handler you need to translate the mouse position, which is expressed in device coordinates, to logical ones.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a84e9fa5825fc211e6394eb0d2e5553c3" kindref="member">XToCol()</ref>, <ref refid="classwx_grid_1a4e9093b16b52dd09491c49e17833fbd2" kindref="member">YToRow()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4025" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a634e46d9e41130e89c6f3a48e1596a1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref></type>
        <definition>wxGridCellCoords wxGrid::XYToCell</definition>
        <argsstring>(const wxPoint &amp;pos) const</argsstring>
        <name>XYToCell</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Translates logical pixel coordinates to the grid cell coordinates. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that this function expects logical coordinates on input so if you use this function in a mouse event handler you need to translate the mouse position, which is expressed in device coordinates, to logical ones.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a84e9fa5825fc211e6394eb0d2e5553c3" kindref="member">XToCol()</ref>, <ref refid="classwx_grid_1a4e9093b16b52dd09491c49e17833fbd2" kindref="member">YToRow()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4036" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6de10b73fbf3a1e9f6c200172badf647" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::YToEdgeOfRow</definition>
        <argsstring>(int y) const</argsstring>
        <name>YToEdgeOfRow</name>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns the row whose bottom edge is close to the given logical <emphasis>y</emphasis> position. </para>        </briefdescription>
        <detaileddescription>
<para>If no row edge is near to this position <computeroutput>wxNOT_FOUND</computeroutput> is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a4e9093b16b52dd09491c49e17833fbd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::YToRow</definition>
        <argsstring>(int y, bool clipToMinMax=false) const</argsstring>
        <name>YToRow</name>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clipToMinMax</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the grid row that corresponds to the logical <emphasis>y</emphasis> coordinate. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>wxNOT_FOUND</computeroutput> if there is no row at the <emphasis>y</emphasis> position. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4054" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Miscellaneous Functions</header>
      <memberdef kind="function" id="classwx_grid_1a1fbd9330fa9c63407f4ec4c238355482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::AppendCols</definition>
        <argsstring>(int numCols=1, bool updateLabels=true)</argsstring>
        <name>AppendCols</name>
        <param>
          <type>int</type>
          <declname>numCols</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLabels</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Appends one or more new columns to the right of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>updateLabels</emphasis> argument is not used at present. If you are using a derived grid table class you will need to override <ref refid="classwx_grid_table_base_1a2f70e66794796670b6e5367e200d5168" kindref="member">wxGridTableBase::AppendCols()</ref>. See <ref refid="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" kindref="member">InsertCols()</ref> for further information.</para><para><simplesect kind="return"><para>true on success or false if appending columns failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4074" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aad7de1f589312e30de900811f0a85e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::AppendRows</definition>
        <argsstring>(int numRows=1, bool updateLabels=true)</argsstring>
        <name>AppendRows</name>
        <param>
          <type>int</type>
          <declname>numRows</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLabels</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Appends one or more new rows to the bottom of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>updateLabels</emphasis> argument is not used at present. If you are using a derived grid table class you will need to override <ref refid="classwx_grid_table_base_1a4b85abbed0e689820aa1928eb3a303cd" kindref="member">wxGridTableBase::AppendRows()</ref>. See <ref refid="classwx_grid_1a33a482af1a30ac07d3bfd6154e8a6045" kindref="member">InsertRows()</ref> for further information.</para><para><simplesect kind="return"><para>true on success or false if appending rows failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4086" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a45ad2580d2bf778aa98ce81cde85a672" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::AreHorzGridLinesClipped</definition>
        <argsstring>() const</argsstring>
        <name>AreHorzGridLinesClipped</name>
        <briefdescription>
<para>Return true if the horizontal grid lines stop at the last column boundary or false if they continue to the end of the window. </para>        </briefdescription>
        <detaileddescription>
<para>The default is to clip grid lines.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1aca209080fda4c9a0b835f8c25daeec00" kindref="member">ClipHorzGridLines()</ref>, <ref refid="classwx_grid_1ade3c28663f64568a80d1adf50630f8eb" kindref="member">AreVertGridLinesClipped()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4096" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ade3c28663f64568a80d1adf50630f8eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::AreVertGridLinesClipped</definition>
        <argsstring>() const</argsstring>
        <name>AreVertGridLinesClipped</name>
        <briefdescription>
<para>Return true if the vertical grid lines stop at the last row boundary or false if they continue to the end of the window. </para>        </briefdescription>
        <detaileddescription>
<para>The default is to clip grid lines.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a50d63305aa9a5726eeb77c6375d504b5" kindref="member">ClipVertGridLines()</ref>, <ref refid="classwx_grid_1a45ad2580d2bf778aa98ce81cde85a672" kindref="member">AreHorzGridLinesClipped()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae51929a4e2843e246abe01d79c5a9183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::BeginBatch</definition>
        <argsstring>()</argsstring>
        <name>BeginBatch</name>
        <briefdescription>
<para>Increments the grid&apos;s batch count. </para>        </briefdescription>
        <detaileddescription>
<para>When the count is greater than zero repainting of the grid is suppressed. Each call to BeginBatch must be matched by a later call to <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref>. Code that does a lot of grid modification can be enclosed between <ref refid="classwx_grid_1ae51929a4e2843e246abe01d79c5a9183" kindref="member">BeginBatch()</ref> and <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref> calls to avoid screen flicker. The final <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref> call will cause the grid to be repainted.</para><para>Notice that you should use <ref refid="classwx_grid_update_locker" kindref="compound">wxGridUpdateLocker</ref> which ensures that there is always a matching <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref> call for this <ref refid="classwx_grid_1ae51929a4e2843e246abe01d79c5a9183" kindref="member">BeginBatch()</ref> if possible instead of calling this method directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7928e5d1e23e09db6c45c35f7aa65532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ClearGrid</definition>
        <argsstring>()</argsstring>
        <name>ClearGrid</name>
        <briefdescription>
<para>Clears all data in the underlying grid table and repaints the grid. </para>        </briefdescription>
        <detaileddescription>
<para>The table is not deleted by this function. If you are using a derived table class then you need to override <ref refid="classwx_grid_table_base_1acc1ed3ef5d026594cb09d957f34761f5" kindref="member">wxGridTableBase::Clear()</ref> for this function to have any effect. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aca209080fda4c9a0b835f8c25daeec00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ClipHorzGridLines</definition>
        <argsstring>(bool clip)</argsstring>
        <name>ClipHorzGridLines</name>
        <param>
          <type>bool</type>
          <declname>clip</declname>
        </param>
        <briefdescription>
<para>Change whether the horizontal grid lines are clipped by the end of the last column. </para>        </briefdescription>
        <detaileddescription>
<para>By default the grid lines are not drawn beyond the end of the last column but after calling this function with <emphasis>clip</emphasis> set to false they will be drawn across the entire grid window.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a45ad2580d2bf778aa98ce81cde85a672" kindref="member">AreHorzGridLinesClipped()</ref>, <ref refid="classwx_grid_1a50d63305aa9a5726eeb77c6375d504b5" kindref="member">ClipVertGridLines()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a50d63305aa9a5726eeb77c6375d504b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ClipVertGridLines</definition>
        <argsstring>(bool clip)</argsstring>
        <name>ClipVertGridLines</name>
        <param>
          <type>bool</type>
          <declname>clip</declname>
        </param>
        <briefdescription>
<para>Change whether the vertical grid lines are clipped by the end of the last row. </para>        </briefdescription>
        <detaileddescription>
<para>By default the grid lines are not drawn beyond the end of the last row but after calling this function with <emphasis>clip</emphasis> set to false they will be drawn across the entire grid window.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1ade3c28663f64568a80d1adf50630f8eb" kindref="member">AreVertGridLinesClipped()</ref>, <ref refid="classwx_grid_1aca209080fda4c9a0b835f8c25daeec00" kindref="member">ClipHorzGridLines()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aabd29366b549cc4ae5190cc101171218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::DeleteCols</definition>
        <argsstring>(int pos=0, int numCols=1, bool updateLabels=true)</argsstring>
        <name>DeleteCols</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numCols</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLabels</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Deletes one or more columns from a grid starting at the specified position. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>updateLabels</emphasis> argument is not used at present. If you are using a derived grid table class you will need to override <ref refid="classwx_grid_table_base_1a4f96bd344c49875495c4f20ef707ca4b" kindref="member">wxGridTableBase::DeleteCols()</ref>. See <ref refid="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" kindref="member">InsertCols()</ref> for further information.</para><para><simplesect kind="return"><para>true on success or false if deleting columns failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aebe8458f3053e979caa7ddee26c7f2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::DeleteRows</definition>
        <argsstring>(int pos=0, int numRows=1, bool updateLabels=true)</argsstring>
        <name>DeleteRows</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numRows</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLabels</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Deletes one or more rows from a grid starting at the specified position. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>updateLabels</emphasis> argument is not used at present. If you are using a derived grid table class you will need to override <ref refid="classwx_grid_table_base_1a038567ce937e90cc3f06c5d7c4df7c16" kindref="member">wxGridTableBase::DeleteRows()</ref>. See <ref refid="classwx_grid_1a33a482af1a30ac07d3bfd6154e8a6045" kindref="member">InsertRows()</ref> for further information.</para><para><simplesect kind="return"><para>true on success or false if appending rows failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::EndBatch</definition>
        <argsstring>()</argsstring>
        <name>EndBatch</name>
        <briefdescription>
<para>Decrements the grid&apos;s batch count. </para>        </briefdescription>
        <detaileddescription>
<para>When the count is greater than zero repainting of the grid is suppressed. Each previous call to <ref refid="classwx_grid_1ae51929a4e2843e246abe01d79c5a9183" kindref="member">BeginBatch()</ref> must be matched by a later call to <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref>. Code that does a lot of grid modification can be enclosed between <ref refid="classwx_grid_1ae51929a4e2843e246abe01d79c5a9183" kindref="member">BeginBatch()</ref> and <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref> calls to avoid screen flicker. The final <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref> will cause the grid to be repainted.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_update_locker" kindref="compound">wxGridUpdateLocker</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa49a632bfd175d7ba71f5c91a676ca56" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxGrid::Fit</definition>
        <argsstring>()</argsstring>
        <name>Fit</name>
        <briefdescription>
<para>Overridden <ref refid="classwx_window" kindref="compound">wxWindow</ref> method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1abdbfc7bdc516c3faae41ba640e77e6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::ForceRefresh</definition>
        <argsstring>()</argsstring>
        <name>ForceRefresh</name>
        <briefdescription>
<para>Causes immediate repainting of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>Use this instead of the usual <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">wxWindow::Refresh()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5836ca48fcd0ff44af696168c41323aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetBatchCount</definition>
        <argsstring>()</argsstring>
        <name>GetBatchCount</name>
        <briefdescription>
<para>Returns the number of times that <ref refid="classwx_grid_1ae51929a4e2843e246abe01d79c5a9183" kindref="member">BeginBatch()</ref> has been called without (yet) matching calls to <ref refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" kindref="member">EndBatch()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>While the grid&apos;s batch count is greater than zero the display will not be updated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ac902405bba7ee315d347b21db6ddc731" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetNumberCols</definition>
        <argsstring>() const</argsstring>
        <name>GetNumberCols</name>
        <briefdescription>
<para>Returns the total number of grid columns. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as the number of columns in the underlying grid table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab32ca36f4ad7794ba248e45b4c0fe9b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetNumberRows</definition>
        <argsstring>() const</argsstring>
        <name>GetNumberRows</name>
        <briefdescription>
<para>Returns the total number of grid rows. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as the number of rows in the underlying grid table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7f5403c4b6ba7b6e0b935382393593b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> *</type>
        <definition>wxGridCellAttr* wxGrid::GetOrCreateCellAttr</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>GetOrCreateCellAttr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the attribute for the given cell creating one if necessary. </para>        </briefdescription>
        <detaileddescription>
<para>If the cell already has an attribute, it is returned. Otherwise a new attribute is created, associated with the cell and returned. In any case the caller must call DecRef() on the returned pointer.</para><para>This function may only be called if <ref refid="classwx_grid_1a3ee3e8fd05fabf3c020d5ee1e675d7c9" kindref="member">CanHaveAttributes()</ref> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a2019a3506f467ca3d288016ee181f867" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_grid_table_base" kindref="compound">wxGridTableBase</ref> *</type>
        <definition>wxGridTableBase* wxGrid::GetTable</definition>
        <argsstring>() const</argsstring>
        <name>GetTable</name>
        <briefdescription>
<para>Returns a base pointer to the current table object. </para>        </briefdescription>
        <detaileddescription>
<para>The returned pointer is still owned by the grid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::InsertCols</definition>
        <argsstring>(int pos=0, int numCols=1, bool updateLabels=true)</argsstring>
        <name>InsertCols</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numCols</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLabels</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Inserts one or more new columns into a grid with the first new column at the specified position. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that inserting the columns in the grid requires grid table cooperation: when this method is called, grid object begins by requesting the underlying grid table to insert new columns. If this is successful the table notifies the grid and the grid updates the display. For a default grid (one where you have called <ref refid="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" kindref="member">CreateGrid()</ref>) this process is automatic. If you are using a custom grid table (specified with <ref refid="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" kindref="member">SetTable()</ref>) then you must override <ref refid="classwx_grid_table_base_1a361c7064a0199afc01678318ce8b712d" kindref="member">wxGridTableBase::InsertCols()</ref> in your derived table class.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position which the first newly inserted column will have. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numCols</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateLabels</parametername>
</parameternamelist>
<parameterdescription>
<para>Currently not used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the columns were successfully inserted, false if an error occurred (most likely the table couldn&apos;t be updated). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a33a482af1a30ac07d3bfd6154e8a6045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::InsertRows</definition>
        <argsstring>(int pos=0, int numRows=1, bool updateLabels=true)</argsstring>
        <name>InsertRows</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>numRows</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLabels</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Inserts one or more new rows into a grid with the first new row at the specified position. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that you must implement <ref refid="classwx_grid_table_base_1a649fad50aeeb8dea442ae1f9122e4e6a" kindref="member">wxGridTableBase::InsertRows()</ref> if you use a grid with a custom table, please see <ref refid="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" kindref="member">InsertCols()</ref> for more information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position which the first newly inserted row will have. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numRows</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateLabels</parametername>
</parameternamelist>
<parameterdescription>
<para>Currently not used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the rows were successfully inserted, false if an error occurred (most likely the table couldn&apos;t be updated). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a024bd7612817cf4f7aff633fdca4b427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::RefreshAttr</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>RefreshAttr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Invalidates the cached attribute for the given cell. </para>        </briefdescription>
        <detaileddescription>
<para>For efficiency reasons, <ref refid="classwx_grid" kindref="compound">wxGrid</ref> may cache the recently used attributes (currently it caches only the single most recently used one, in fact) which can result in the cell appearance not being refreshed even when the attribute returned by your custom wxGridCellAttrProvider-derived class has changed. To force the grid to refresh the cell attribute, this function may be used. Notice that calling it will not result in actually redrawing the cell, you still need to call <ref refid="classwx_window_1ab0ae6b9898cd261c39ebeb2891aa3d67" kindref="member">wxWindow::RefreshRect()</ref> to invalidate the area occupied by the cell in the window to do this. Also note that you don&apos;t need to call this function if you store the attributes in <ref refid="classwx_grid" kindref="compound">wxGrid</ref> itself, i.e. use its <ref refid="classwx_grid_1a74238420396358b621d14bbc317b8741" kindref="member">SetAttr()</ref> and similar methods, it is only useful when using a separate custom attributes provider.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row of the cell whose attribute needs to be queried again. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column of the cell whose attribute needs to be queried again.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a5186ffa351b21512c729994f097aff1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::Render</definition>
        <argsstring>(wxDC &amp;dc, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, const wxGridCellCoords &amp;topLeft=wxGridCellCoords(-1, -1), const wxGridCellCoords &amp;bottomRight=wxGridCellCoords(-1, -1), int style=wxGRID_DRAW_DEFAULT)</argsstring>
        <name>Render</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>topLeft</declname>
          <defval><ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref>(-1, -1)</defval>
        </param>
        <param>
          <type>const <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> &amp;</type>
          <declname>bottomRight</declname>
          <defval><ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref>(-1, -1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
          <defval><ref refid="interface_2wx_2grid_8h_1a6c6e4c1a30cf97ac7d4f1a96ab2a9faca0ac95e7d35b3584bcb737a925d3e285c" kindref="member">wxGRID_DRAW_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>Draws part or all of a <ref refid="classwx_grid" kindref="compound">wxGrid</ref> on a <ref refid="classwx_d_c" kindref="compound">wxDC</ref> for printing or display. </para>        </briefdescription>
        <detaileddescription>
<para>Pagination can be accomplished by using sequential <ref refid="classwx_grid_1a5186ffa351b21512c729994f097aff1f" kindref="member">Render()</ref> calls with appropriate values in <ref refid="classwx_grid_cell_coords" kindref="compound">wxGridCellCoords</ref> topLeft and bottomRight.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classwx_d_c" kindref="compound">wxDC</ref> to be drawn on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position on the <ref refid="classwx_d_c" kindref="compound">wxDC</ref> where rendering should begin. If not specified drawing will begin at the <ref refid="classwx_d_c" kindref="compound">wxDC</ref> MaxX() and MaxY(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the area on the <ref refid="classwx_d_c" kindref="compound">wxDC</ref> that the rendered <ref refid="classwx_grid" kindref="compound">wxGrid</ref> should occupy. If not specified the drawing will be scaled to fit the available dc width or height. The <ref refid="classwx_grid" kindref="compound">wxGrid</ref>&apos;s aspect ratio is maintained whether or not size is specified. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>The top left cell of the block to be drawn. Defaults to ( 0, 0 ). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottomRight</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom right cell of the block to be drawn. Defaults to row and column counts. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>A combination of values from wxGridRenderStyle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a74238420396358b621d14bbc317b8741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetAttr</definition>
        <argsstring>(int row, int col, wxGridCellAttr *attr)</argsstring>
        <name>SetAttr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Sets the cell attributes for the specified cell. </para>        </briefdescription>
        <detaileddescription>
<para>The grid takes ownership of the attribute pointer.</para><para>See the <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> class for more information about controlling cell attributes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a650ccd4df9bd5a578ee167241163b714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetColAttr</definition>
        <argsstring>(int col, wxGridCellAttr *attr)</argsstring>
        <name>SetColAttr</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Sets the cell attributes for all cells in the specified column. </para>        </briefdescription>
        <detaileddescription>
<para>For more information about controlling grid cell attributes see the <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> cell attribute class and the <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3c229e19961c463891278084f576ba11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetMargins</definition>
        <argsstring>(int extraWidth, int extraHeight)</argsstring>
        <name>SetMargins</name>
        <param>
          <type>int</type>
          <declname>extraWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>extraHeight</declname>
        </param>
        <briefdescription>
<para>Sets the extra margins used around the grid area. </para>        </briefdescription>
        <detaileddescription>
<para>A grid may occupy more space than needed for its data display and this function allows to set how big this extra space is </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ac82a0059b9baa385f3143ef5f9504dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetRowAttr</definition>
        <argsstring>(int row, wxGridCellAttr *attr)</argsstring>
        <name>SetRowAttr</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type><ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Sets the cell attributes for all cells in the specified row. </para>        </briefdescription>
        <detaileddescription>
<para>The grid takes ownership of the attribute pointer.</para><para>See the <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> class for more information about controlling cell attributes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a7c49623cfd89add91f8d5ec8b4909ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref></type>
        <definition>wxArrayInt wxGrid::CalcRowLabelsExposed</definition>
        <argsstring>(const wxRegion &amp;reg)</argsstring>
        <name>CalcRowLabelsExposed</name>
        <param>
          <type>const <ref refid="classwx_region" kindref="compound">wxRegion</ref> &amp;</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Appends one or more new columns to the right of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>updateLabels</emphasis> argument is not used at present. If you are using a derived grid table class you will need to override <ref refid="classwx_grid_table_base_1a2f70e66794796670b6e5367e200d5168" kindref="member">wxGridTableBase::AppendCols()</ref>. See <ref refid="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" kindref="member">InsertCols()</ref> for further information.</para><para><simplesect kind="return"><para>true on success or false if appending columns failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1afb2fd6410f20e3252817e8d0a10ef1ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref></type>
        <definition>wxArrayInt wxGrid::CalcColLabelsExposed</definition>
        <argsstring>(const wxRegion &amp;reg)</argsstring>
        <name>CalcColLabelsExposed</name>
        <param>
          <type>const <ref refid="classwx_region" kindref="compound">wxRegion</ref> &amp;</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Appends one or more new columns to the right of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>updateLabels</emphasis> argument is not used at present. If you are using a derived grid table class you will need to override <ref refid="classwx_grid_table_base_1a2f70e66794796670b6e5367e200d5168" kindref="member">wxGridTableBase::AppendCols()</ref>. See <ref refid="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" kindref="member">InsertCols()</ref> for further information.</para><para><simplesect kind="return"><para>true on success or false if appending columns failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae2a11d9d0979b8b7093a4adc179c87f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wxGridCellCoordsArray</type>
        <definition>wxGridCellCoordsArray wxGrid::CalcCellsExposed</definition>
        <argsstring>(const wxRegion &amp;reg)</argsstring>
        <name>CalcCellsExposed</name>
        <param>
          <type>const <ref refid="classwx_region" kindref="compound">wxRegion</ref> &amp;</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Appends one or more new columns to the right of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>updateLabels</emphasis> argument is not used at present. If you are using a derived grid table class you will need to override <ref refid="classwx_grid_table_base_1a2f70e66794796670b6e5367e200d5168" kindref="member">wxGridTableBase::AppendCols()</ref>. See <ref refid="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" kindref="member">InsertCols()</ref> for further information.</para><para><simplesect kind="return"><para>true on success or false if appending columns failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4388" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sorting support.</header>
      <description><para><ref refid="classwx_grid" kindref="compound">wxGrid</ref> doesn&apos;t provide any support for sorting the data but it does generate events allowing the user code to sort it and supports displaying the sort indicator in the column used for sorting.</para><para>To use <ref refid="classwx_grid" kindref="compound">wxGrid</ref> sorting support you need to handle wxEVT_GRID_COL_SORT event (and not veto it) and resort the data displayed in the grid. The grid will automatically update the sorting indicator on the column which was clicked.</para><para>You can also call the functions in this section directly to update the sorting indicator. Once again, they don&apos;t do anything with the grid data, it remains your responsibility to actually sort it appropriately. </para></description>
      <memberdef kind="function" id="classwx_grid_1a23668b30d2ec1295d9557e36254d95ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetSortingColumn</definition>
        <argsstring>() const</argsstring>
        <name>GetSortingColumn</name>
        <briefdescription>
<para>Return the column in which the sorting indicator is currently displayed. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>wxNOT_FOUND</computeroutput> if sorting indicator is not currently displayed at all.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a0139fd340f8c663e09ae670e2877598f" kindref="member">SetSortingColumn()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a9279feb3f69c009ef0f1b40daf599080" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsSortingBy</definition>
        <argsstring>(int col) const</argsstring>
        <name>IsSortingBy</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Return true if this column is currently used for sorting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_grid_1a23668b30d2ec1295d9557e36254d95ba" kindref="member">GetSortingColumn()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6f13a2e2b9e5bffca5685a71533e0c97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::IsSortOrderAscending</definition>
        <argsstring>() const</argsstring>
        <name>IsSortOrderAscending</name>
        <briefdescription>
<para>Return true if the current sorting order is ascending or false if it is descending. </para>        </briefdescription>
        <detaileddescription>
<para>It only makes sense to call this function if <ref refid="classwx_grid_1a23668b30d2ec1295d9557e36254d95ba" kindref="member">GetSortingColumn()</ref> returns a valid column index and not <computeroutput>wxNOT_FOUND</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a0139fd340f8c663e09ae670e2877598f" kindref="member">SetSortingColumn()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a0139fd340f8c663e09ae670e2877598f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetSortingColumn</definition>
        <argsstring>(int col, bool ascending=true)</argsstring>
        <name>SetSortingColumn</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ascending</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the column to display the sorting indicator in and its direction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to display the sorting indicator in or <computeroutput>wxNOT_FOUND</computeroutput> to remove any currently displayed sorting indicator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ascending</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, display the ascending sort indicator, otherwise display the descending sort indicator.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_grid_1a23668b30d2ec1295d9557e36254d95ba" kindref="member">GetSortingColumn()</ref>, <ref refid="classwx_grid_1a6f13a2e2b9e5bffca5685a71533e0c97" kindref="member">IsSortOrderAscending()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa8379d119a0d916a7e85cbb12b2e818e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::UnsetSortingColumn</definition>
        <argsstring>()</argsstring>
        <name>UnsetSortingColumn</name>
        <briefdescription>
<para>Remove any currently shown sorting indicator. </para>        </briefdescription>
        <detaileddescription>
<para>This is equivalent to calling <ref refid="classwx_grid_1a0139fd340f8c663e09ae670e2877598f" kindref="member">SetSortingColumn()</ref> with <computeroutput>wxNOT_FOUND</computeroutput> first argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4460" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors for component windows.</header>
      <description><para>Return the various child windows of <ref refid="classwx_grid" kindref="compound">wxGrid</ref>.</para><para><ref refid="classwx_grid" kindref="compound">wxGrid</ref> is an empty parent window for 4 children representing the column labels window (top), the row labels window (left), the corner window (top left) and the main grid window. It may be necessary to use these individual windows and not the <ref refid="classwx_grid" kindref="compound">wxGrid</ref> window itself if you need to handle events for them (this can be done using <ref refid="classwx_evt_handler_1a78719e8b82c9f9c6e4056b3449df1943" kindref="member">wxEvtHandler::Connect()</ref> or <ref refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" kindref="member">wxWindow::PushEventHandler()</ref>) or do something else requiring the use of the correct window pointer. Notice that you should not, however, change these windows (e.g. reposition them or draw over them) because they are managed by <ref refid="classwx_grid" kindref="compound">wxGrid</ref> itself. </para></description>
      <memberdef kind="function" id="classwx_grid_1afea39b9fe78fb9c0e52b0f60423351f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxGrid::GetGridWindow</definition>
        <argsstring>() const</argsstring>
        <name>GetGridWindow</name>
        <briefdescription>
<para>Return the main grid window containing the grid cells. </para>        </briefdescription>
        <detaileddescription>
<para>This window is always shown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ae374e3b80c10c7cc110fb60a3eabe09e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxGrid::GetGridRowLabelWindow</definition>
        <argsstring>() const</argsstring>
        <name>GetGridRowLabelWindow</name>
        <briefdescription>
<para>Return the row labels window. </para>        </briefdescription>
        <detaileddescription>
<para>This window is not shown if the row labels were hidden using <ref refid="classwx_grid_1ab81e66ed01683f271fd2fc73c8112156" kindref="member">HideRowLabels()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a21456e460c5719361792a3b9e944bbb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxGrid::GetGridColLabelWindow</definition>
        <argsstring>() const</argsstring>
        <name>GetGridColLabelWindow</name>
        <briefdescription>
<para>Return the column labels window. </para>        </briefdescription>
        <detaileddescription>
<para>This window is not shown if the columns labels were hidden using <ref refid="classwx_grid_1a07c1f371ef3bedc3c058e28031cf3d18" kindref="member">HideColLabels()</ref>.</para><para>Depending on whether <ref refid="classwx_grid_1a4842fe48764f456260145947baa582d8" kindref="member">UseNativeColHeader()</ref> was called or not this can be either a <ref refid="classwx_header_ctrl" kindref="compound">wxHeaderCtrl</ref> or a plain <ref refid="classwx_window" kindref="compound">wxWindow</ref>. This function returns a valid window pointer in either case but in the former case you can also use <ref refid="classwx_grid_1ad1534f8645290c7205dbf5240a29788c" kindref="member">GetGridColHeader()</ref> to access it if you need wxHeaderCtrl-specific functionality. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a4840288d01af51c4e0025eb9ae357138" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
        <definition>wxWindow* wxGrid::GetGridCornerLabelWindow</definition>
        <argsstring>() const</argsstring>
        <name>GetGridCornerLabelWindow</name>
        <briefdescription>
<para>Return the window in the top left grid corner. </para>        </briefdescription>
        <detaileddescription>
<para>This window is shown only of both columns and row labels are shown and normally doesn&apos;t contain anything. Clicking on it is handled by <ref refid="classwx_grid" kindref="compound">wxGrid</ref> however and can be used to select the entire grid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ad1534f8645290c7205dbf5240a29788c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_header_ctrl" kindref="compound">wxHeaderCtrl</ref> *</type>
        <definition>wxHeaderCtrl* wxGrid::GetGridColHeader</definition>
        <argsstring>() const</argsstring>
        <name>GetGridColHeader</name>
        <briefdescription>
<para>Return the header control used for column labels display. </para>        </briefdescription>
        <detaileddescription>
<para>This function can only be called if <ref refid="classwx_grid_1a4842fe48764f456260145947baa582d8" kindref="member">UseNativeColHeader()</ref> had been called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4525" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classwx_grid_1a567e86cd28859368c01321d5f67e08d6" prot="public" static="no" strong="no">
        <type></type>
        <name>wxGridSelectionModes</name>
        <enumvalue id="classwx_grid_1a567e86cd28859368c01321d5f67e08d6a328a6fa22102d968dde6f4d480f71309" prot="public">
          <name>wxGridSelectCells</name>
          <briefdescription>
<para>The default selection mode allowing selection of the individual cells as well as of the entire rows and columns. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_grid_1a567e86cd28859368c01321d5f67e08d6ab30da9546471d575f372b3ed8a160cde" prot="public">
          <name>wxGridSelectRows</name>
          <briefdescription>
<para>The selection mode allowing the selection of the entire rows only. </para>          </briefdescription>
          <detaileddescription>
<para>The user won&apos;t be able to select any cells or columns in this mode. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_grid_1a567e86cd28859368c01321d5f67e08d6ace0517bc3256b7a57f672151a4512d24" prot="public">
          <name>wxGridSelectColumns</name>
          <briefdescription>
<para>The selection mode allowing the selection of the entire columns only. </para>          </briefdescription>
          <detaileddescription>
<para>The user won&apos;t be able to select any cells or rows in this mode. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_grid_1a567e86cd28859368c01321d5f67e08d6a8f106290f813a6868e9be5e10b8c0565" prot="public">
          <name>wxGridSelectRowsOrColumns</name>
          <briefdescription>
<para>The selection mode allowing the user to select either the entire columns or the entire rows but not individual cells nor blocks. </para>          </briefdescription>
          <detaileddescription>
<para>Notice that while this constant is defined as<programlisting><codeline><highlight class="normal">wxGridSelectColumns<sp/>|<sp/>wxGridSelectRows<sp/></highlight></codeline>
</programlisting> this doesn&apos;t mean that all the other combinations are valid <ndash/> at least currently they are not.</para><para><simplesect kind="since"><para>2.9.1 </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Different selection modes supported by the grid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2007" column="1" bodyfile="interface/wx/grid.h" bodystart="2006" bodyend="2040"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_grid_1a601788de28c3c493f93c533eff7af1fd" prot="public" static="no" strong="no">
        <type></type>
        <name>CellSpan</name>
        <enumvalue id="classwx_grid_1a601788de28c3c493f93c533eff7af1fda7be47a123f8fb188440887986faf15d7" prot="public">
          <name>CellSpan_Inside</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>This cell is inside a span covered by another cell. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_grid_1a601788de28c3c493f93c533eff7af1fdab7c2e3ef0dbbf67d0c4b10f2e865c16e" prot="public">
          <name>CellSpan_None</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>This is a normal, non-spanning cell. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_grid_1a601788de28c3c493f93c533eff7af1fda68a0ea4f8ba9cdacbcc6c4fc19211870" prot="public">
          <name>CellSpan_Main</name>
          <briefdescription>
<para>This cell spans several physical <ref refid="classwx_grid" kindref="compound">wxGrid</ref> cells. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return values for <ref refid="classwx_grid_1ad1be6b70b5184d3ca17181683c086535" kindref="member">GetCellSize()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.9.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2048" column="1" bodyfile="interface/wx/grid.h" bodystart="2047" bodyend="2057"/>
      </memberdef>
      <memberdef kind="enum" id="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77e" prot="public" static="no" strong="no">
        <type></type>
        <name>TabBehaviour</name>
        <enumvalue id="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77eaba1f385a175029a3987f62277ebd3ade" prot="public">
          <name>Tab_Stop</name>
          <briefdescription>
<para>Do nothing, this is default. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77ea52b3bd87557d9d5cb7e5abfdf010717f" prot="public">
          <name>Tab_Wrap</name>
          <briefdescription>
<para>Move to the beginning of the next (or the end of the previous) row. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77ea44372b92451f5fbfbbc04cb9715d6845" prot="public">
          <name>Tab_Leave</name>
          <briefdescription>
<para>Move to the next (or the previous) control after the grid. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Constants defining different support built-in TAB handling behaviours. </para>        </briefdescription>
        <detaileddescription>
<para>The elements of this enum determine what happens when TAB is pressed when the cursor is in the rightmost column (or Shift-TAB is pressed when the cursor is in the leftmost one).</para><para><simplesect kind="see"><para><ref refid="classwx_grid_1a3f0bb553b28e7f00185c6c56d3c1262e" kindref="member">SetTabBehaviour()</ref>, <computeroutput><ref refid="interface_2wx_2grid_8h_1af20cf9a975d9de40c5671f24d4a1c945" kindref="member">wxEVT_GRID_TABBING</ref></computeroutput> </para></simplesect>
<simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="2071" column="1" bodyfile="interface/wx/grid.h" bodystart="2070" bodyend="2080"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_grid_1ae3e37f97290024c14527fb44cac6196d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxGrid::DrawCellHighlight</definition>
        <argsstring>(wxDC &amp;dc, const wxGridCellAttr *attr)</argsstring>
        <name>DrawCellHighlight</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref> *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab33a26c622ba8b09d064b95ca2848c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxGrid::DrawRowLabels</definition>
        <argsstring>(wxDC &amp;dc, const wxArrayInt &amp;rows)</argsstring>
        <name>DrawRowLabels</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref> &amp;</type>
          <declname>rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ac2eab1a95d2ee7db8279aa6c2351c693" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxGrid::DrawRowLabel</definition>
        <argsstring>(wxDC &amp;dc, int row)</argsstring>
        <name>DrawRowLabel</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a74a0eeaa02bbab328f206fcbca69c053" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxGrid::DrawColLabels</definition>
        <argsstring>(wxDC &amp;dc, const wxArrayInt &amp;cols)</argsstring>
        <name>DrawColLabels</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref> &amp;</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a15e4fa029735157138e3a15ebb063788" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxGrid::DrawColLabel</definition>
        <argsstring>(wxDC &amp;dc, int col)</argsstring>
        <name>DrawColLabel</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab07080fade08d9ef3d36c29c80af648e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxGrid::DrawCornerLabel</definition>
        <argsstring>(wxDC &amp;dc)</argsstring>
        <name>DrawCornerLabel</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a6c056971e9ff133017d2ad6e08ca3fdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DrawTextRectangle</definition>
        <argsstring>(wxDC &amp;dc, const wxString &amp;text, const wxRect &amp;rect, int horizontalAlignment=wxALIGN_LEFT, int verticalAlignment=wxALIGN_TOP, int textOrientation=wxHORIZONTAL) const</argsstring>
        <name>DrawTextRectangle</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>horizontalAlignment</declname>
          <defval><ref refid="defs_8h_1a543dd017a172dc316253a8a1f351dde9a3eb809646c09140e9cd10bc8174a4641" kindref="member">wxALIGN_LEFT</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>verticalAlignment</declname>
          <defval><ref refid="defs_8h_1a543dd017a172dc316253a8a1f351dde9a441672dc885ca324345db556f563c026" kindref="member">wxALIGN_TOP</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>textOrientation</declname>
          <defval><ref refid="defs_8h_1a1e6994f40bd9cb140e292afb165af971ab96154c324ed87cc17e9b227f9248c77" kindref="member">wxHORIZONTAL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1afd8fe05fecf73f5413198aa42dab6c40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::DrawTextRectangle</definition>
        <argsstring>(wxDC &amp;dc, const wxArrayString &amp;lines, const wxRect &amp;rect, int horizontalAlignment=wxALIGN_LEFT, int verticalAlignment=wxALIGN_TOP, int textOrientation=wxHORIZONTAL) const</argsstring>
        <name>DrawTextRectangle</name>
        <param>
          <type><ref refid="classwx_d_c" kindref="compound">wxDC</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>lines</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>horizontalAlignment</declname>
          <defval><ref refid="defs_8h_1a543dd017a172dc316253a8a1f351dde9a3eb809646c09140e9cd10bc8174a4641" kindref="member">wxALIGN_LEFT</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>verticalAlignment</declname>
          <defval><ref refid="defs_8h_1a543dd017a172dc316253a8a1f351dde9a441672dc885ca324345db556f563c026" kindref="member">wxALIGN_TOP</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>textOrientation</declname>
          <defval><ref refid="defs_8h_1a1e6994f40bd9cb140e292afb165af971ab96154c324ed87cc17e9b227f9248c77" kindref="member">wxHORIZONTAL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ab0fefdee9370eb5759b47e45c35fe268" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxGrid::GetCellHighlightColour</definition>
        <argsstring>() const</argsstring>
        <name>GetCellHighlightColour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8a14eedded33b469f34a0c27efcff333" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetCellHighlightPenWidth</definition>
        <argsstring>() const</argsstring>
        <name>GetCellHighlightPenWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a3cd1cc7e8e099fb228edcfe3c53e9a7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetCellHighlightROPenWidth</definition>
        <argsstring>() const</argsstring>
        <name>GetCellHighlightROPenWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a9d50820855bb0d0f1d9d31f6067cc63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellHighlightColour</definition>
        <argsstring>(const wxColour &amp;)</argsstring>
        <name>SetCellHighlightColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8720ed99743b9fc53e5570c75a34d413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellHighlightPenWidth</definition>
        <argsstring>(int width)</argsstring>
        <name>SetCellHighlightPenWidth</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a8179e588e20fea7267eac3ab1c5a69e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxGrid::SetCellHighlightROPenWidth</definition>
        <argsstring>(int width)</argsstring>
        <name>SetCellHighlightROPenWidth</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4556" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_grid_1a3ee3e8fd05fabf3c020d5ee1e675d7c9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxGrid::CanHaveAttributes</definition>
        <argsstring>() const</argsstring>
        <name>CanHaveAttributes</name>
        <briefdescription>
<para>Returns true if this grid has support for cell attributes. </para>        </briefdescription>
        <detaileddescription>
<para>The grid supports attributes if it has the associated table which, in turn, has attributes support, i.e. <ref refid="classwx_grid_table_base_1aa5d507ed6d82b7a7878ad65f5e75d4f0" kindref="member">wxGridTableBase::CanHaveAttributes()</ref> returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1a988a7e66f63578205fec79a4661698e7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColMinimalWidth</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetColMinimalWidth</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Get the minimal width of the given column/row. </para>        </briefdescription>
        <detaileddescription>
<para>The value returned by this function may be different than that returned by <ref refid="classwx_grid_1a36835a1939ca0dfeb8b388ff750950a2" kindref="member">GetColMinimalAcceptableWidth()</ref> if <ref refid="classwx_grid_1a470eedb04977ef54ead3429ddbb0baaf" kindref="member">SetColMinimalWidth()</ref> had been called for this column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aaf74245bd2a2ba987a6350da15d44011" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColRight</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetColRight</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the right border specified column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1aa3abc78d8a40ec149eeba9b5fb6c6011" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetColLeft</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetColLeft</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the left border specified column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_grid_1ac0baabc195598e2a6740e08f8fafa78a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxGrid::GetRowMinimalHeight</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetRowMinimalHeight</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Returns the minimal size for the given column. </para>        </briefdescription>
        <detaileddescription>
<para>The value returned by this function may be different than that returned by <ref refid="classwx_grid_1a58f7bb75b188a367b00421a5e4028802" kindref="member">GetRowMinimalAcceptableHeight()</ref> if <ref refid="classwx_grid_1ab831d58057598419eefc9b7e1f392025" kindref="member">SetRowMinimalHeight()</ref> had been called for this row. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/grid.h" line="4595" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_grid" kindref="compound">wxGrid</ref> and its related classes are used for displaying and editing tabular data. </para>    </briefdescription>
    <detaileddescription>
<para>They provide a rich set of features for display, editing, and interacting with a variety of data sources. For simple applications, and to help you get started, <ref refid="classwx_grid" kindref="compound">wxGrid</ref> is the only class you need to refer to directly. It will set up default instances of the other classes and manage them for you. For more complex applications you can derive your own classes for custom grid views, grid data tables, cell editors and renderers. The <ref refid="overview_grid" kindref="compound">wxGrid Overview</ref> has examples of simple and more complex applications, explains the relationship between the various grid classes and has a summary of the keyboard shortcuts and mouse functions provided by <ref refid="classwx_grid" kindref="compound">wxGrid</ref>.</para><para>A <ref refid="classwx_grid_table_base" kindref="compound">wxGridTableBase</ref> class holds the actual data to be displayed by a <ref refid="classwx_grid" kindref="compound">wxGrid</ref> class. One or more <ref refid="classwx_grid" kindref="compound">wxGrid</ref> classes may act as a view for one table class. The default table class is called <ref refid="classwx_grid_string_table" kindref="compound">wxGridStringTable</ref> and holds an array of strings. An instance of such a class is created by <ref refid="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" kindref="member">CreateGrid()</ref>.</para><para><ref refid="classwx_grid_cell_renderer" kindref="compound">wxGridCellRenderer</ref> is the abstract base class for rendering contents in a cell. The following renderers are predefined:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_grid_cell_bool_renderer" kindref="compound">wxGridCellBoolRenderer</ref></para></listitem><listitem><para><ref refid="classwx_grid_cell_float_renderer" kindref="compound">wxGridCellFloatRenderer</ref></para></listitem><listitem><para><ref refid="classwx_grid_cell_number_renderer" kindref="compound">wxGridCellNumberRenderer</ref></para></listitem><listitem><para><ref refid="classwx_grid_cell_string_renderer" kindref="compound">wxGridCellStringRenderer</ref></para></listitem></itemizedlist>
</para><para>The look of a cell can be further defined using <ref refid="classwx_grid_cell_attr" kindref="compound">wxGridCellAttr</ref>. An object of this type may be returned by <ref refid="classwx_grid_table_base_1af031321a86e3835d23177ffe53eee643" kindref="member">wxGridTableBase::GetAttr()</ref>.</para><para><ref refid="classwx_grid_cell_editor" kindref="compound">wxGridCellEditor</ref> is the abstract base class for editing the value of a cell. The following editors are predefined:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_grid_cell_bool_editor" kindref="compound">wxGridCellBoolEditor</ref></para></listitem><listitem><para><ref refid="classwx_grid_cell_choice_editor" kindref="compound">wxGridCellChoiceEditor</ref></para></listitem><listitem><para><ref refid="classwx_grid_cell_float_editor" kindref="compound">wxGridCellFloatEditor</ref></para></listitem><listitem><para><ref refid="classwx_grid_cell_number_editor" kindref="compound">wxGridCellNumberEditor</ref></para></listitem><listitem><para><ref refid="classwx_grid_cell_text_editor" kindref="compound">wxGridCellTextEditor</ref></para></listitem></itemizedlist>
</para><para>Please see <ref refid="classwx_grid_event" kindref="compound">wxGridEvent</ref>, <ref refid="classwx_grid_size_event" kindref="compound">wxGridSizeEvent</ref>, <ref refid="classwx_grid_range_select_event" kindref="compound">wxGridRangeSelectEvent</ref>, and <ref refid="classwx_grid_editor_created_event" kindref="compound">wxGridEditorCreatedEvent</ref> for the documentation of all event types you can use with <ref refid="classwx_grid" kindref="compound">wxGrid</ref>.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxadv" kindref="member">wxAdvanced</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="overview_grid" kindref="compound">wxGrid Overview</ref>, <ref refid="classwx_grid_update_locker" kindref="compound">wxGridUpdateLocker</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2873">
        <label>T</label>
      </node>
      <node id="2872">
        <label>wxScrolledWindow</label>
        <link refid="classwx_scrolled"/>
        <childnode refid="2873" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2871">
        <label>wxGrid</label>
        <link refid="classwx_grid"/>
        <childnode refid="2872" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2876">
        <label>T</label>
      </node>
      <node id="2875">
        <label>wxScrolledWindow</label>
        <link refid="classwx_scrolled"/>
        <childnode refid="2876" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2874">
        <label>wxGrid</label>
        <link refid="classwx_grid"/>
        <childnode refid="2875" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="interface/wx/grid.h" line="2000" column="1" bodyfile="interface/wx/grid.h" bodystart="1999" bodyend="4596"/>
    <listofallmembers>
      <member refid="classwx_scrolled_1a5b5e335677055e4107903f7d5dad042f" prot="public" virt="virtual"><scope>wxGrid</scope><name>AdjustScrollbars</name></member>
      <member refid="classwx_grid_1a1fbd9330fa9c63407f4ec4c238355482" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AppendCols</name></member>
      <member refid="classwx_grid_1aad7de1f589312e30de900811f0a85e98" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AppendRows</name></member>
      <member refid="classwx_grid_1a45ad2580d2bf778aa98ce81cde85a672" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AreHorzGridLinesClipped</name></member>
      <member refid="classwx_grid_1ade3c28663f64568a80d1adf50630f8eb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AreVertGridLinesClipped</name></member>
      <member refid="classwx_grid_1a635459c73671fe0955c0f06c4d6c262e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AutoSize</name></member>
      <member refid="classwx_grid_1aa3ef64503b5451e7d92f4e925d123e07" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AutoSizeColLabelSize</name></member>
      <member refid="classwx_grid_1ae0bc620583cf5740fd585a3ac1aabced" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AutoSizeColumn</name></member>
      <member refid="classwx_grid_1a412837fe2932fcde8473e6fbf64f8ad5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AutoSizeColumns</name></member>
      <member refid="classwx_grid_1a294120495c98eb7d2962b2c811cb5c27" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AutoSizeRow</name></member>
      <member refid="classwx_grid_1aa9e92637061a312584fb7d7a09f7f858" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AutoSizeRowLabelSize</name></member>
      <member refid="classwx_grid_1a83a57fb7b20cb8fc9d9d0cd6124327e0" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>AutoSizeRows</name></member>
      <member refid="classwx_grid_1ae51929a4e2843e246abe01d79c5a9183" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>BeginBatch</name></member>
      <member refid="classwx_grid_1aa37b7cb6f90f1e484f8cb90c7438e257" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>BlockToDeviceRect</name></member>
      <member refid="classwx_grid_1ae2a11d9d0979b8b7093a4adc179c87f1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CalcCellsExposed</name></member>
      <member refid="classwx_grid_1afb2fd6410f20e3252817e8d0a10ef1ae" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CalcColLabelsExposed</name></member>
      <member refid="classwx_grid_1a7c49623cfd89add91f8d5ec8b4909ded" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CalcRowLabelsExposed</name></member>
      <member refid="classwx_scrolled_1a5beb86afd7eec414740ac5be2e80da33" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CalcScrolledPosition</name></member>
      <member refid="classwx_scrolled_1a86022a8d18b370380754e0ff0a101003" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CalcScrolledPosition</name></member>
      <member refid="classwx_scrolled_1addb96196c8bc441934fb96c2b4e56a51" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CalcUnscrolledPosition</name></member>
      <member refid="classwx_scrolled_1a538b168f093df93ced48d297b5599291" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CalcUnscrolledPosition</name></member>
      <member refid="classwx_grid_1a5e469fc431e7021d0f6c55e1da5e9abf" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CanDragCell</name></member>
      <member refid="classwx_grid_1aac882ed41d117975173148afe7aad57f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CanDragColMove</name></member>
      <member refid="classwx_grid_1a9df385035636c80b68dabca18ad721ab" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CanDragColSize</name></member>
      <member refid="classwx_grid_1aa9830bf4ba9db1ef36c47f5a59c72c24" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CanDragGridSize</name></member>
      <member refid="classwx_grid_1a6b9ba263a0b87b1e4da386c4af9be200" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CanDragRowSize</name></member>
      <member refid="classwx_grid_1a1bfd67cd4469284d07f64e0f72be4904" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CanEnableCellControl</name></member>
      <member refid="classwx_grid_1a3ee3e8fd05fabf3c020d5ee1e675d7c9" prot="protected" virt="non-virtual"><scope>wxGrid</scope><name>CanHaveAttributes</name></member>
      <member refid="classwx_grid_1a601788de28c3c493f93c533eff7af1fd" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CellSpan</name></member>
      <member refid="classwx_grid_1a601788de28c3c493f93c533eff7af1fda7be47a123f8fb188440887986faf15d7" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CellSpan_Inside</name></member>
      <member refid="classwx_grid_1a601788de28c3c493f93c533eff7af1fda68a0ea4f8ba9cdacbcc6c4fc19211870" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CellSpan_Main</name></member>
      <member refid="classwx_grid_1a601788de28c3c493f93c533eff7af1fdab7c2e3ef0dbbf67d0c4b10f2e865c16e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CellSpan_None</name></member>
      <member refid="classwx_grid_1a88269edf1ef0d504998583ca002a2e19" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CellToRect</name></member>
      <member refid="classwx_grid_1a6c117d0de616e8ed45c10cd1dcef0941" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CellToRect</name></member>
      <member refid="classwx_grid_1a7928e5d1e23e09db6c45c35f7aa65532" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ClearGrid</name></member>
      <member refid="classwx_grid_1a3fb54d4d4d93bff7955a1d6ba2458418" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ClearSelection</name></member>
      <member refid="classwx_grid_1aca209080fda4c9a0b835f8c25daeec00" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ClipHorzGridLines</name></member>
      <member refid="classwx_grid_1a50d63305aa9a5726eeb77c6375d504b5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ClipVertGridLines</name></member>
      <member refid="classwx_grid_1a234438774fe788b4121b5b7dd269d0a5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>Create</name></member>
      <member refid="classwx_grid_1a0a3c0ccf91753666e40dd117ccc84637" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>CreateGrid</name></member>
      <member refid="classwx_grid_1aabd29366b549cc4ae5190cc101171218" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DeleteCols</name></member>
      <member refid="classwx_grid_1aebe8458f3053e979caa7ddee26c7f2a3" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DeleteRows</name></member>
      <member refid="classwx_grid_1a59d3b60cf7b7862ec77eadbeb4c0a08f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DeselectCell</name></member>
      <member refid="classwx_grid_1a3c8a19c2f71db1ae551c414378b51c8e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DeselectCol</name></member>
      <member refid="classwx_grid_1aacb5b3492213720317dd61d5152252fd" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DeselectRow</name></member>
      <member refid="classwx_grid_1af011e6797af60bc02153b9cd1dc4ebf6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableCellEditControl</name></member>
      <member refid="classwx_grid_1aa1e083cb0febefca45e4e1bfaf7539a3" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableColResize</name></member>
      <member refid="classwx_grid_1ad81276135f13d3f201d1023196181abb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableDragColMove</name></member>
      <member refid="classwx_grid_1a68429a98c917a17d7a1716178e248ff8" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableDragColSize</name></member>
      <member refid="classwx_grid_1a8becb571ff4b0b23e69f0397eeaa391a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableDragGridSize</name></member>
      <member refid="classwx_grid_1a8649bb2283fdd841cad33a27e7866660" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableDragRowSize</name></member>
      <member refid="classwx_scrolled_1a294b1585caef1c22f5ea1ac6a6787164" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableKeyboardScrolling</name></member>
      <member refid="classwx_grid_1ada36932f853ff0294f1faac5923fade6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DisableRowResize</name></member>
      <member refid="classwx_scrolled_1a96a2b41d3bcd07e28491de5f39f9c5cb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DoPrepareDC</name></member>
      <member refid="classwx_grid_1ae3e37f97290024c14527fb44cac6196d" prot="public" virt="virtual"><scope>wxGrid</scope><name>DrawCellHighlight</name></member>
      <member refid="classwx_grid_1a15e4fa029735157138e3a15ebb063788" prot="public" virt="virtual"><scope>wxGrid</scope><name>DrawColLabel</name></member>
      <member refid="classwx_grid_1a74a0eeaa02bbab328f206fcbca69c053" prot="public" virt="virtual"><scope>wxGrid</scope><name>DrawColLabels</name></member>
      <member refid="classwx_grid_1ab07080fade08d9ef3d36c29c80af648e" prot="public" virt="virtual"><scope>wxGrid</scope><name>DrawCornerLabel</name></member>
      <member refid="classwx_grid_1ac2eab1a95d2ee7db8279aa6c2351c693" prot="public" virt="virtual"><scope>wxGrid</scope><name>DrawRowLabel</name></member>
      <member refid="classwx_grid_1ab33a26c622ba8b09d064b95ca2848c6e" prot="public" virt="virtual"><scope>wxGrid</scope><name>DrawRowLabels</name></member>
      <member refid="classwx_grid_1a6c056971e9ff133017d2ad6e08ca3fdc" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DrawTextRectangle</name></member>
      <member refid="classwx_grid_1afd8fe05fecf73f5413198aa42dab6c40" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>DrawTextRectangle</name></member>
      <member refid="classwx_grid_1a297f313ceb2e06b6c70c348155adb66e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableCellEditControl</name></member>
      <member refid="classwx_grid_1a28f088a5fb544882021ed385b27e4c6f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableDragCell</name></member>
      <member refid="classwx_grid_1a65e4c1ddc7fbabfc3ea92f48e9405b14" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableDragColMove</name></member>
      <member refid="classwx_grid_1aa5221485d63e40c3d90d309b1bf5400a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableDragColSize</name></member>
      <member refid="classwx_grid_1abf968b3b0d70d2d9cc5bacf7f9d9891a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableDragGridSize</name></member>
      <member refid="classwx_grid_1a6f587ed5e79140e53e1ea37b7d70809d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableDragRowSize</name></member>
      <member refid="classwx_grid_1a2dc8ca1ef344f94752eb669c0d8dc87e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableEditing</name></member>
      <member refid="classwx_grid_1a0423953fad4490d33cbac7ae0e1fdcb2" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableGridLines</name></member>
      <member refid="classwx_scrolled_1ac5a023517721a5ad5b891527b437dd61" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EnableScrolling</name></member>
      <member refid="classwx_grid_1a2f1a59dabc5875761c81b588604451ff" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>EndBatch</name></member>
      <member refid="classwx_grid_1aa49a632bfd175d7ba71f5c91a676ca56" prot="public" virt="virtual"><scope>wxGrid</scope><name>Fit</name></member>
      <member refid="classwx_grid_1abdbfc7bdc516c3faae41ba640e77e6e4" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ForceRefresh</name></member>
      <member refid="classwx_grid_1a5836ca48fcd0ff44af696168c41323aa" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetBatchCount</name></member>
      <member refid="classwx_grid_1ac8bb30dfa6d62abe6e4917520cfa4bd4" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellAlignment</name></member>
      <member refid="classwx_grid_1a51beb3a300d89c88bbf558b16698e041" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellBackgroundColour</name></member>
      <member refid="classwx_grid_1a2ef9802294fac0c54bc67a6200065bed" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellEditor</name></member>
      <member refid="classwx_grid_1a577ee88bebeea6f7bedf49ece672db61" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellFont</name></member>
      <member refid="classwx_grid_1ab0fefdee9370eb5759b47e45c35fe268" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellHighlightColour</name></member>
      <member refid="classwx_grid_1a8a14eedded33b469f34a0c27efcff333" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellHighlightPenWidth</name></member>
      <member refid="classwx_grid_1a3cd1cc7e8e099fb228edcfe3c53e9a7d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellHighlightROPenWidth</name></member>
      <member refid="classwx_grid_1a1d7d47dbd2278deadfe7dbe6eb80853c" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellOverflow</name></member>
      <member refid="classwx_grid_1abf94c6c66f9b6a02d2a31cfae61d1dda" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellRenderer</name></member>
      <member refid="classwx_grid_1ad1be6b70b5184d3ca17181683c086535" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellSize</name></member>
      <member refid="classwx_grid_1ab12320c9780d1a7d9c1bfd5c4396c0a1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellSize</name></member>
      <member refid="classwx_grid_1a5cbd77c35b1a451de4099003e71bcb13" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellTextColour</name></member>
      <member refid="classwx_grid_1aa9c57c3f12844320dc18091fe18b1d9d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellValue</name></member>
      <member refid="classwx_grid_1a032aa0b4e0c5ddab56e687194ba63764" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetCellValue</name></member>
      <member refid="classwx_grid_1a306864a9d327e1980e62960b1792d26a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColAt</name></member>
      <member refid="classwx_grid_1a2934bfeb1402636dbbe79528e63aaa2f" prot="public" virt="virtual"><scope>wxGrid</scope><name>GetColGridLinePen</name></member>
      <member refid="classwx_grid_1a2c79d193bb7e2ea31800c780b75414b1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColLabelAlignment</name></member>
      <member refid="classwx_grid_1a5c02f18f554628cd9025b1d56f24589b" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColLabelSize</name></member>
      <member refid="classwx_grid_1a74a3580d63f1148b37b874ebaea5c59e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColLabelTextOrientation</name></member>
      <member refid="classwx_grid_1a6c448cc3bab75d23338d2b72e14a3065" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColLabelValue</name></member>
      <member refid="classwx_grid_1aa3abc78d8a40ec149eeba9b5fb6c6011" prot="protected" virt="non-virtual"><scope>wxGrid</scope><name>GetColLeft</name></member>
      <member refid="classwx_grid_1a36835a1939ca0dfeb8b388ff750950a2" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColMinimalAcceptableWidth</name></member>
      <member refid="classwx_grid_1a988a7e66f63578205fec79a4661698e7" prot="protected" virt="non-virtual"><scope>wxGrid</scope><name>GetColMinimalWidth</name></member>
      <member refid="classwx_grid_1ac0deaff314b8d246a954cef9c9eb2ef2" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColPos</name></member>
      <member refid="classwx_grid_1aaf74245bd2a2ba987a6350da15d44011" prot="protected" virt="non-virtual"><scope>wxGrid</scope><name>GetColRight</name></member>
      <member refid="classwx_grid_1aad215a88e6be6a9697ef25365066fb30" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColSize</name></member>
      <member refid="classwx_grid_1a4b3ecf7e2e3bb0febaabf154d36dc5a6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetColSizes</name></member>
      <member refid="classwx_grid_1a778da643a613c20732a13221cf9c7721" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultCellAlignment</name></member>
      <member refid="classwx_grid_1a586d9363eefc95c43f9a5e68ba19f760" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultCellBackgroundColour</name></member>
      <member refid="classwx_grid_1aa66bdfc719b0348b391799dd7522aac5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultCellFont</name></member>
      <member refid="classwx_grid_1a94d805835909560eeca8defa045f232c" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultCellOverflow</name></member>
      <member refid="classwx_grid_1a960a2d24adacf32d61450842f40a2151" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultCellTextColour</name></member>
      <member refid="classwx_grid_1a3a56267d9316b177ab278a59ea59f023" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultColLabelSize</name></member>
      <member refid="classwx_grid_1a2444690291b18541503f71b7a557e247" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultColSize</name></member>
      <member refid="classwx_grid_1ae688ec9712044e4fcb9402dbc3a65f74" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultEditor</name></member>
      <member refid="classwx_grid_1ad165b5ff8133d1a67d7cd657b52d3176" prot="public" virt="virtual"><scope>wxGrid</scope><name>GetDefaultEditorForCell</name></member>
      <member refid="classwx_grid_1a323aec5141232aeb9e6cd496bc074382" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultEditorForCell</name></member>
      <member refid="classwx_grid_1a0cdde37c5cec62d05602e421aad00879" prot="public" virt="virtual"><scope>wxGrid</scope><name>GetDefaultEditorForType</name></member>
      <member refid="classwx_grid_1ae9d60a3730af481783f94a51c0fb64ef" prot="public" virt="virtual"><scope>wxGrid</scope><name>GetDefaultGridLinePen</name></member>
      <member refid="classwx_grid_1a65ae5813f2eab9e73bf45a780762b595" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultRenderer</name></member>
      <member refid="classwx_grid_1a7419c525e0cdcb442446c52bdf5cfcd7" prot="public" virt="virtual"><scope>wxGrid</scope><name>GetDefaultRendererForCell</name></member>
      <member refid="classwx_grid_1a479e3c758306726629960a2c6a05d9ef" prot="public" virt="virtual"><scope>wxGrid</scope><name>GetDefaultRendererForType</name></member>
      <member refid="classwx_grid_1a59cee915136a6152dbde4c6d7b88ff09" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultRowLabelSize</name></member>
      <member refid="classwx_grid_1ad39dda31f9b9d5a8e04b3309b41470b1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetDefaultRowSize</name></member>
      <member refid="classwx_grid_1ad1534f8645290c7205dbf5240a29788c" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridColHeader</name></member>
      <member refid="classwx_grid_1a21456e460c5719361792a3b9e944bbb5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridColLabelWindow</name></member>
      <member refid="classwx_grid_1a4840288d01af51c4e0025eb9ae357138" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridCornerLabelWindow</name></member>
      <member refid="classwx_grid_1a03527c67f5d203b2f3adcb4aa4ca0575" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridCursorCol</name></member>
      <member refid="classwx_grid_1a5f4b99f3ffbb5d857cbc84809c976aae" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridCursorRow</name></member>
      <member refid="classwx_grid_1a73988313324597d83ce70d84c775ce67" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridLineColour</name></member>
      <member refid="classwx_grid_1ae374e3b80c10c7cc110fb60a3eabe09e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridRowLabelWindow</name></member>
      <member refid="classwx_grid_1afea39b9fe78fb9c0e52b0f60423351f7" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetGridWindow</name></member>
      <member refid="classwx_grid_1a635ec2cdebb505f3f62236d8e3bee382" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetLabelBackgroundColour</name></member>
      <member refid="classwx_grid_1af41cce5f668d203cd9cd5f0690d6614d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetLabelFont</name></member>
      <member refid="classwx_grid_1a33a924a9a9ceb87d2b871217c68ec7de" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetLabelTextColour</name></member>
      <member refid="classwx_grid_1ac902405bba7ee315d347b21db6ddc731" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetNumberCols</name></member>
      <member refid="classwx_grid_1ab32ca36f4ad7794ba248e45b4c0fe9b1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetNumberRows</name></member>
      <member refid="classwx_grid_1a7f5403c4b6ba7b6e0b935382393593b7" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetOrCreateCellAttr</name></member>
      <member refid="classwx_grid_1a18eab062ecf18a735222153502cf7462" prot="public" virt="virtual"><scope>wxGrid</scope><name>GetRowGridLinePen</name></member>
      <member refid="classwx_grid_1a189b96ff1d2845c7af1fb5330b9c9094" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetRowLabelAlignment</name></member>
      <member refid="classwx_grid_1a94ddc56c91538bcf581ee1d8b0ae0bee" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetRowLabelSize</name></member>
      <member refid="classwx_grid_1a6b42592fc653c7c752b4eb7122aa905e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetRowLabelValue</name></member>
      <member refid="classwx_grid_1a58f7bb75b188a367b00421a5e4028802" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetRowMinimalAcceptableHeight</name></member>
      <member refid="classwx_grid_1ac0baabc195598e2a6740e08f8fafa78a" prot="protected" virt="non-virtual"><scope>wxGrid</scope><name>GetRowMinimalHeight</name></member>
      <member refid="classwx_grid_1a324d409ec70dea7401eaf2f09e9e5ecb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetRowSize</name></member>
      <member refid="classwx_grid_1a2fc2ec5ea5a8b0076d6bec3da420f0cb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetRowSizes</name></member>
      <member refid="classwx_scrolled_1a89bb0a54dc59ec7af02e1d08b2c8ce83" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetScaleX</name></member>
      <member refid="classwx_scrolled_1a359410c6a60604225d03a5a490cc357e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetScaleY</name></member>
      <member refid="classwx_scrolled_1a981d158543584d2c4721d9f86587ccc6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetScrollLines</name></member>
      <member refid="classwx_grid_1ab8c39cc47b91e6af6d8252e641bf4649" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetScrollLineX</name></member>
      <member refid="classwx_grid_1ade90be8270e854fb27ed79f107c4a9e6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetScrollLineY</name></member>
      <member refid="classwx_scrolled_1ad41334fc7b0dcee5a53c97da4902d82a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetScrollPageSize</name></member>
      <member refid="classwx_scrolled_1ae57f966af767e2f99f486a3c45485370" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetScrollPixelsPerUnit</name></member>
      <member refid="classwx_grid_1affcd2c7ebc133bd2bb7ed4147a6baff1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectedCells</name></member>
      <member refid="classwx_grid_1a25f5c712adb4dd6f772fcfb9e16f8f09" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectedCols</name></member>
      <member refid="classwx_grid_1a7b1a8d38f36cf043ebb62d467ad3bf4f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectedRows</name></member>
      <member refid="classwx_grid_1a0e2b31c4e81706a6a722c4642d060033" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectionBackground</name></member>
      <member refid="classwx_grid_1a5cbf7b09c83b0fa7adbe8d7fa7c931ab" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectionBlockBottomRight</name></member>
      <member refid="classwx_grid_1ab5645051354099b3c18ab0124a02df0f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectionBlockTopLeft</name></member>
      <member refid="classwx_grid_1a00b29721f4034dbe4d1fd60d2bfe98ae" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectionForeground</name></member>
      <member refid="classwx_grid_1ab11f0eb86495b2804d7901c4c4b07f7e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSelectionMode</name></member>
      <member refid="classwx_scrolled_1a81800886d1d5f094caeee683e707de12" prot="protected" virt="virtual"><scope>wxGrid</scope><name>GetSizeAvailableForScrollTarget</name></member>
      <member refid="classwx_grid_1a23668b30d2ec1295d9557e36254d95ba" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetSortingColumn</name></member>
      <member refid="classwx_grid_1a2019a3506f467ca3d288016ee181f867" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetTable</name></member>
      <member refid="classwx_scrolled_1aa43a5283b564da82368b532b22971410" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetTargetRect</name></member>
      <member refid="classwx_scrolled_1aa48e3a4731d7e4dea26e89e9015e295d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetTargetWindow</name></member>
      <member refid="classwx_scrolled_1a01d57d0b9b81537dc011e3e8b3f4b43d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetViewStart</name></member>
      <member refid="classwx_scrolled_1a3ced29907b1e914f841f979f272277c8" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetViewStart</name></member>
      <member refid="classwx_scrolled_1a9e993dd807f71f622765ccc68c60082b" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_grid_1a38c5333b585400555a6bbac23d2bf61a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GoToCell</name></member>
      <member refid="classwx_grid_1a90651398c28f62fa3ba84631f5813ea2" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GoToCell</name></member>
      <member refid="classwx_grid_1a831fe263d010d24029a155b276f9136a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>GridLinesEnabled</name></member>
      <member refid="classwx_grid_1a98f7eece9b1e39888650cf2c8ed767a1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>HideCellEditControl</name></member>
      <member refid="classwx_grid_1a8a64029462e594c26068d33c35916e8a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>HideCol</name></member>
      <member refid="classwx_grid_1a07c1f371ef3bedc3c058e28031cf3d18" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>HideColLabels</name></member>
      <member refid="classwx_grid_1a246e6e9f6ddadecf5baf5cf80363b129" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>HideRow</name></member>
      <member refid="classwx_grid_1ab81e66ed01683f271fd2fc73c8112156" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>HideRowLabels</name></member>
      <member refid="classwx_grid_1a3b0e28c214477430f17313e11ffc845a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>InsertCols</name></member>
      <member refid="classwx_grid_1a33a482af1a30ac07d3bfd6154e8a6045" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>InsertRows</name></member>
      <member refid="classwx_scrolled_1a9d76b612e041e10462a16a3648d09008" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsAutoScrolling</name></member>
      <member refid="classwx_grid_1a3b6b718296e8eb63659ea74d0430e947" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsCellEditControlEnabled</name></member>
      <member refid="classwx_grid_1a355737d3f6dbbf53364804d4f49123ed" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsCellEditControlShown</name></member>
      <member refid="classwx_grid_1a0015ad597c1af523e9b7e38c468dd0ab" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsColShown</name></member>
      <member refid="classwx_grid_1a5b30268a8c0f4119be74aacb036f103e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsCurrentCellReadOnly</name></member>
      <member refid="classwx_grid_1a3f20801157b107a70554e10ca34970e2" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsEditable</name></member>
      <member refid="classwx_grid_1aa0708fb90f14b7a2ebc591d5e99b5fa8" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsInSelection</name></member>
      <member refid="classwx_grid_1a3b8debe0aabe546e656a5016f3d0a8ef" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsInSelection</name></member>
      <member refid="classwx_grid_1a2805a3560ecf3bcfda14b074ab0be9b6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsReadOnly</name></member>
      <member refid="classwx_scrolled_1a7047e92206a6e62675560fc394d9f4f8" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsRetained</name></member>
      <member refid="classwx_grid_1a12dd822ae9b966e89aad5deba7c154bb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsRowShown</name></member>
      <member refid="classwx_grid_1a922a201eb41543395755c84af23172bc" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsSelection</name></member>
      <member refid="classwx_grid_1a9279feb3f69c009ef0f1b40daf599080" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsSortingBy</name></member>
      <member refid="classwx_grid_1a6f13a2e2b9e5bffca5685a71533e0c97" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsSortOrderAscending</name></member>
      <member refid="classwx_grid_1a933d79f0e9c2e412915ea1b87072c110" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsVisible</name></member>
      <member refid="classwx_grid_1a28c1eeb9ed2c2550fa0f7e92707cf0fe" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>IsVisible</name></member>
      <member refid="classwx_grid_1a97bca062601229ebfc7069eb97ffab8a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MakeCellVisible</name></member>
      <member refid="classwx_grid_1a8a8aa088c6a5093d5a7ca67be9178bcc" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MakeCellVisible</name></member>
      <member refid="classwx_grid_1a366e838f760491f500a1ee92aacd47f6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorDown</name></member>
      <member refid="classwx_grid_1a91ae663fda79c0c71001799940f073bc" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorDownBlock</name></member>
      <member refid="classwx_grid_1ae40bbcd9a916013622102ea1a05e2054" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorLeft</name></member>
      <member refid="classwx_grid_1a592dbda3f66ce2450b6d1ca54ccc1f15" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorLeftBlock</name></member>
      <member refid="classwx_grid_1a94ac571c0e0ea6feca2f10e06e23335d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorRight</name></member>
      <member refid="classwx_grid_1a0ccd8de3b784ca7fa93480eff9e5235d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorRightBlock</name></member>
      <member refid="classwx_grid_1aa6fb5bd1011cf2915a59cdd807e2b1fa" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorUp</name></member>
      <member refid="classwx_grid_1a2ffacf3f71e073b9e66c15baba4d520a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MoveCursorUpBlock</name></member>
      <member refid="classwx_grid_1ae28d8cc8ab2cbf9e6edf3ddddeb7b9cd" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MovePageDown</name></member>
      <member refid="classwx_grid_1a11c6c8e07f62e18a97cff5ef2d2375bb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>MovePageUp</name></member>
      <member refid="classwx_scrolled_1a52284d06a6160fb42b0899aedce2c880" prot="public" virt="virtual"><scope>wxGrid</scope><name>OnDraw</name></member>
      <member refid="classwx_scrolled_1ab33dbfe88be5ede4b04de4dcec4830f0" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>PrepareDC</name></member>
      <member refid="classwx_grid_1aa1b4e5e1ddbf300364beb7c2a5526580" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ProcessTableMessage</name></member>
      <member refid="classwx_grid_1a024bd7612817cf4f7aff633fdca4b427" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>RefreshAttr</name></member>
      <member refid="classwx_grid_1abee6e555080b85fd8379356537d9760c" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>RegisterDataType</name></member>
      <member refid="classwx_grid_1a5186ffa351b21512c729994f097aff1f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>Render</name></member>
      <member refid="classwx_grid_1a81c15abd722c3459dbf1c56c0dcc6fd1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ResetColPos</name></member>
      <member refid="classwx_grid_1aef67813dad089e14654ba2457fa5f02d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SaveEditControlValue</name></member>
      <member refid="classwx_scrolled_1a601bcac37185a2d4a24164d065907f69" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>Scroll</name></member>
      <member refid="classwx_scrolled_1affb3c1be4945c27b589439a1d47fbbb8" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>Scroll</name></member>
      <member refid="classwx_grid_1a90ada950c9fd09d0b072a5264bb1335b" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SelectAll</name></member>
      <member refid="classwx_grid_1a4e40784aca4bfaa4e46908c09fb85dfa" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SelectBlock</name></member>
      <member refid="classwx_grid_1a174a5c963df52037ae40ad1b858cd490" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SelectBlock</name></member>
      <member refid="classwx_grid_1a8a8b96b9826ce1e968be79cc5994718b" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SelectCol</name></member>
      <member refid="classwx_grid_1a5d2f3eb82d7fb582b9b18f6400b5120a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SelectRow</name></member>
      <member refid="classwx_scrolled_1a2d44af932b964f1522d1c78d86cd4a27" prot="public" virt="virtual"><scope>wxGrid</scope><name>SendAutoScrollEvents</name></member>
      <member refid="classwx_grid_1a74238420396358b621d14bbc317b8741" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetAttr</name></member>
      <member refid="classwx_grid_1a6b5f83fc2fe42c7fa3b989f70180f114" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellAlignment</name></member>
      <member refid="classwx_grid_1a83774c9cbf840641cc6ffba25ce32059" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellAlignment</name></member>
      <member refid="classwx_grid_1acc292daf2f7da2291feb871877ab949d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellBackgroundColour</name></member>
      <member refid="classwx_grid_1aa44586368f59b3a1bc321d6ec1aca61d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellEditor</name></member>
      <member refid="classwx_grid_1ae6581134d17f41e05c8d476d6599000d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellFont</name></member>
      <member refid="classwx_grid_1a9d50820855bb0d0f1d9d31f6067cc63f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellHighlightColour</name></member>
      <member refid="classwx_grid_1a8720ed99743b9fc53e5570c75a34d413" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellHighlightPenWidth</name></member>
      <member refid="classwx_grid_1a8179e588e20fea7267eac3ab1c5a69e5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellHighlightROPenWidth</name></member>
      <member refid="classwx_grid_1a9c12922803284ce44b59033ede943c30" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellOverflow</name></member>
      <member refid="classwx_grid_1ab128b5cec5bbeecf6e4d9f847f2406f1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellRenderer</name></member>
      <member refid="classwx_grid_1a74c437fe1ba3b08ebb3cdfb6d6112309" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellSize</name></member>
      <member refid="classwx_grid_1a60a0d68be7e62daa5bd6228d3b0e22eb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellTextColour</name></member>
      <member refid="classwx_grid_1adbcbd091140c6adf0f8d04ea1642b24d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellTextColour</name></member>
      <member refid="classwx_grid_1acec369b195d29fe8aaa16772989240f1" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellTextColour</name></member>
      <member refid="classwx_grid_1aabb3c207aa790ea5702593ade8a53962" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellValue</name></member>
      <member refid="classwx_grid_1af014f09c7e47dfa3ef9a9857a1adbba5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellValue</name></member>
      <member refid="classwx_grid_1ae8954e4868ef687120064e9ac580287c" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetCellValue</name></member>
      <member refid="classwx_grid_1a650ccd4df9bd5a578ee167241163b714" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColAttr</name></member>
      <member refid="classwx_grid_1ab4f77e5af6df083db01f764ff65ee31a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColFormatBool</name></member>
      <member refid="classwx_grid_1a88ea5b14ed0c2c56b04e7696c5968521" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColFormatCustom</name></member>
      <member refid="classwx_grid_1a75e677b2b01b5fd4cae78d4ba58e2aa4" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColFormatFloat</name></member>
      <member refid="classwx_grid_1ae6533497c78d470b16b47c1036e9ae19" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColFormatNumber</name></member>
      <member refid="classwx_grid_1a60414126439340d5d80e62b8c1b2cbab" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColLabelAlignment</name></member>
      <member refid="classwx_grid_1a96236117dc8e4f8f16653abf98db7555" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColLabelSize</name></member>
      <member refid="classwx_grid_1a69351c33ed17234b561f9bc6dcb1361f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColLabelTextOrientation</name></member>
      <member refid="classwx_grid_1a71dc9acfcc9fb12daf75325d55c4b241" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColLabelValue</name></member>
      <member refid="classwx_grid_1a92c78351515c034604ddb69cf8122ab3" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColMinimalAcceptableWidth</name></member>
      <member refid="classwx_grid_1a470eedb04977ef54ead3429ddbb0baaf" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColMinimalWidth</name></member>
      <member refid="classwx_grid_1abc846e26dc0080ad129f368bfaa6a49f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColPos</name></member>
      <member refid="classwx_grid_1ac790e2c667a549b04fc21e0d2a792224" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColSize</name></member>
      <member refid="classwx_grid_1a812bca5cff53174769e976fd2ba537de" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColSizes</name></member>
      <member refid="classwx_grid_1a8bf7dd6407a3097a84493a23f054f116" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetColumnsOrder</name></member>
      <member refid="classwx_grid_1ae4dabe2d98427cd34ade7088c204bf9f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultCellAlignment</name></member>
      <member refid="classwx_grid_1a08f50e2e88b487e54ac70a708443b824" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultCellBackgroundColour</name></member>
      <member refid="classwx_grid_1a27a342fc4f4fbc09ca6476565b5d6c7c" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultCellFont</name></member>
      <member refid="classwx_grid_1a7006f512cd4ff8d3ce7ddef573ed5088" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultCellOverflow</name></member>
      <member refid="classwx_grid_1a987dc8537b08f658b95db9ea9e7f3205" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultCellTextColour</name></member>
      <member refid="classwx_grid_1a790d3b6250b39090f71b9647a4740f6a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultColSize</name></member>
      <member refid="classwx_grid_1a730dfc4eef2d1bf5b1939d06cd638863" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultEditor</name></member>
      <member refid="classwx_grid_1acee5b448bb394d1dc846c6340789e1da" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultRenderer</name></member>
      <member refid="classwx_grid_1a5a50adddf3fd511e1aeb40bf1ea4ab62" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetDefaultRowSize</name></member>
      <member refid="classwx_grid_1ae20437a17200690302fb7c97784f1100" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetGridCursor</name></member>
      <member refid="classwx_grid_1a03dcb7d4169045f21aa8b2721bc55006" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetGridCursor</name></member>
      <member refid="classwx_grid_1a7854f6a6cf63fc159770a28d954ab1bd" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetGridLineColour</name></member>
      <member refid="classwx_grid_1a392ffec2ebdb3c81a3ead052ba90346f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetLabelBackgroundColour</name></member>
      <member refid="classwx_grid_1af5eafcd2c99e714b68d7db7ef7bd1dea" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetLabelFont</name></member>
      <member refid="classwx_grid_1ac8513e3c842f0036ed20fc01912d0744" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetLabelTextColour</name></member>
      <member refid="classwx_grid_1a3c229e19961c463891278084f576ba11" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetMargins</name></member>
      <member refid="classwx_grid_1a75a19910c37b2eb66ee598b2ceaeb34b" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetReadOnly</name></member>
      <member refid="classwx_grid_1ac82a0059b9baa385f3143ef5f9504dfd" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowAttr</name></member>
      <member refid="classwx_grid_1a236c79c6b27033b4790e1a1c978a70b2" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowLabelAlignment</name></member>
      <member refid="classwx_grid_1a9072318969deffab8fcf99694e5a4943" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowLabelSize</name></member>
      <member refid="classwx_grid_1ae67491f6e506a37dd45bc52e47a09fdc" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowLabelValue</name></member>
      <member refid="classwx_grid_1a6be28cd73c4497e0d8c31cdac3968a0f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowMinimalAcceptableHeight</name></member>
      <member refid="classwx_grid_1ab831d58057598419eefc9b7e1f392025" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowMinimalHeight</name></member>
      <member refid="classwx_grid_1a58ab2f54c69ee51a19fd1b82da49750a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowSize</name></member>
      <member refid="classwx_grid_1a07a8fc5ffab7932e63a3741ea364d958" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetRowSizes</name></member>
      <member refid="classwx_scrolled_1a5c8829d39d00ce53901a8b1a67d5d780" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetScale</name></member>
      <member refid="classwx_scrolled_1af5d940f364bb5097f20fee4a8e1210bb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetScrollbars</name></member>
      <member refid="classwx_grid_1a4c84b4bac1295f9b27776ce02b83a57b" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetScrollLineX</name></member>
      <member refid="classwx_grid_1a42bd20841dad3ceca0db6b63225f9145" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetScrollLineY</name></member>
      <member refid="classwx_scrolled_1aa160351f31a0080784a00023947a06f6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetScrollPageSize</name></member>
      <member refid="classwx_scrolled_1a76286e2efa55d0ba85d37106a44a9401" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetScrollRate</name></member>
      <member refid="classwx_grid_1ae0fdd68c596ec67da406ee6a05d13d2e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetSelectionBackground</name></member>
      <member refid="classwx_grid_1aa7847467f1f396326b6c53f54301cac7" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetSelectionForeground</name></member>
      <member refid="classwx_grid_1a9da14b2045b0292cecc8e91b65993d29" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetSelectionMode</name></member>
      <member refid="classwx_grid_1a0139fd340f8c663e09ae670e2877598f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetSortingColumn</name></member>
      <member refid="classwx_grid_1a3f0bb553b28e7f00185c6c56d3c1262e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetTabBehaviour</name></member>
      <member refid="classwx_grid_1af7ddc545bc6f1c84f63982e3d9bcb5d5" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetTable</name></member>
      <member refid="classwx_scrolled_1aee90a87e1b3f7f0f70a89e085c0d9928" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetTargetRect</name></member>
      <member refid="classwx_scrolled_1a117dc8edabb3e1250199eab089e4fa5b" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetTargetWindow</name></member>
      <member refid="classwx_grid_1a1a5872a6e126933b0bf2582716279a41" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>SetUseNativeColLabels</name></member>
      <member refid="classwx_grid_1ae1b31c23cf43c32b2757fdf469d89ac6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ShowCellEditControl</name></member>
      <member refid="classwx_grid_1a82f280ae62d92b6db3eafe2583e7905e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ShowCol</name></member>
      <member refid="classwx_grid_1a0efc4bd576b2589b4cca510faac3c0d3" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ShowRow</name></member>
      <member refid="classwx_scrolled_1a8590337dc643a64437c56031cf5f2e71" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>ShowScrollbars</name></member>
      <member refid="classwx_scrolled_1a33c3daf5feb84c357357012e1b0e7a0a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>StopAutoScrolling</name></member>
      <member refid="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77ea44372b92451f5fbfbbc04cb9715d6845" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>Tab_Leave</name></member>
      <member refid="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77eaba1f385a175029a3987f62277ebd3ade" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>Tab_Stop</name></member>
      <member refid="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77ea52b3bd87557d9d5cb7e5abfdf010717f" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>Tab_Wrap</name></member>
      <member refid="classwx_grid_1acd42a9c04692a5ef6b0a4997c4e9a77e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>TabBehaviour</name></member>
      <member refid="classwx_grid_1aa8379d119a0d916a7e85cbb12b2e818e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>UnsetSortingColumn</name></member>
      <member refid="classwx_grid_1a4842fe48764f456260145947baa582d8" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>UseNativeColHeader</name></member>
      <member refid="classwx_grid_1ae2f7231fe2b518966b5698c8513bf66a" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxGrid</name></member>
      <member refid="classwx_grid_1a484d6912058684ebc262af49d9486064" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxGrid</name></member>
      <member refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6a328a6fa22102d968dde6f4d480f71309" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxGridSelectCells</name></member>
      <member refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6ace0517bc3256b7a57f672151a4512d24" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxGridSelectColumns</name></member>
      <member refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxGridSelectionModes</name></member>
      <member refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6ab30da9546471d575f372b3ed8a160cde" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxGridSelectRows</name></member>
      <member refid="classwx_grid_1a567e86cd28859368c01321d5f67e08d6a8f106290f813a6868e9be5e10b8c0565" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxGridSelectRowsOrColumns</name></member>
      <member refid="classwx_scrolled_1a01d0ecb5daa59ebb7a0806f16b7ac267" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxScrolled</name></member>
      <member refid="classwx_scrolled_1ae68b98d2386b81f413e08cd5410401fc" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>wxScrolled</name></member>
      <member refid="classwx_grid_1a84e9fa5825fc211e6394eb0d2e5553c3" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>XToCol</name></member>
      <member refid="classwx_grid_1a9948488c4b6feb52abe1c41d0fd6bbeb" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>XToEdgeOfCol</name></member>
      <member refid="classwx_grid_1a7588cd5b535273b8ab7c8933b1cf764e" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>XYToCell</name></member>
      <member refid="classwx_grid_1a634e46d9e41130e89c6f3a48e1596a1d" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>XYToCell</name></member>
      <member refid="classwx_grid_1a6de10b73fbf3a1e9f6c200172badf647" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>YToEdgeOfRow</name></member>
      <member refid="classwx_grid_1a4e9093b16b52dd09491c49e17833fbd2" prot="public" virt="non-virtual"><scope>wxGrid</scope><name>YToRow</name></member>
      <member refid="classwx_grid_1a38a39bf514eb5c96d85b0ecfe2f6f8c8" prot="public" virt="virtual"><scope>wxGrid</scope><name>~wxGrid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
