<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_list_ctrl" kind="class" language="C++" prot="public">
    <compoundname>wxListCtrl</compoundname>
    <basecompoundref refid="classwx_control" prot="public" virt="non-virtual">wxControl</basecompoundref>
    <derivedcompoundref refid="classwx_list_view" prot="public" virt="non-virtual">wxListView</derivedcompoundref>
    <includes local="no">wx/listctrl.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_list_ctrl_1a6941e35348b00a288e833871fd0138e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxListCtrl::wxListCtrl</definition>
        <argsstring>()</argsstring>
        <name>wxListCtrl</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aaf98aeeba06ad86fa471f9218ae91097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxListCtrl::wxListCtrl</definition>
        <argsstring>(wxWindow *parent, wxWindowID id, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=wxLC_ICON, const wxValidator &amp;validator=wxDefaultValidator, const wxString &amp;name=wxListCtrlNameStr)</argsstring>
        <name>wxListCtrl</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1ad47b04a448f7d8d6835abe40632837cd" kindref="member">wxLC_ICON</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_validator" kindref="compound">wxValidator</ref> &amp;</type>
          <declname>validator</declname>
          <defval><ref refid="validate_8h_1af1e90d8aa1824fd2ce4024ef7e40703c" kindref="member">wxDefaultValidator</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxListCtrlNameStr</defval>
        </param>
        <briefdescription>
<para>Constructor, creating and showing a list control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent window. Must not be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Window identifier. The value wxID_ANY indicates a default value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Window position. If <ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref> is specified then a default position is chosen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size. If <ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref> is specified then the window is sized appropriately. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Window style. See <ref refid="classwx_list_ctrl" kindref="compound">wxListCtrl</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>validator</parametername>
</parameternamelist>
<parameterdescription>
<para>Window validator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Window name.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classwx_list_ctrl_1a5b13e700b9957677468d63558d73d5df" kindref="member">Create()</ref>, <ref refid="classwx_validator" kindref="compound">wxValidator</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a8b9f3f6517e7e1ddfcd2f45c86741209" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxListCtrl::~wxListCtrl</definition>
        <argsstring>()</argsstring>
        <name>~wxListCtrl</name>
        <briefdescription>
<para>Destructor, destroying the list control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a793791d7b014ffc521d2f727050a15e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::AppendColumn</definition>
        <argsstring>(const wxString &amp;heading, wxListColumnFormat format=wxLIST_FORMAT_LEFT, int width=-1)</argsstring>
        <name>AppendColumn</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type><ref refid="interface_2wx_2listctrl_8h_1afddccbb0d7cf18f9b205f00efc5738d0" kindref="member">wxListColumnFormat</ref></type>
          <declname>format</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1afddccbb0d7cf18f9b205f00efc5738d0a53ef6990b28b4ef0b18f06da3f8c630d" kindref="member">wxLIST_FORMAT_LEFT</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Adds a new column to the list control in report view mode. </para>        </briefdescription>
        <detaileddescription>
<para>This is just a convenient wrapper for <ref refid="classwx_list_ctrl_1a75337fbb43f767eafc82d47966943141" kindref="member">InsertColumn()</ref> which adds the new column after all the existing ones without having to specify its position explicitly.</para><para><simplesect kind="since"><para>2.9.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a18017016afaf8f9b564df7eb692e5e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::Arrange</definition>
        <argsstring>(int flag=wxLIST_ALIGN_DEFAULT)</argsstring>
        <name>Arrange</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1a96a58e29e8dbf2b5bdeb775cba46556eab50a3c50716f6c9da66f0e3081a2b986" kindref="member">wxLIST_ALIGN_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>Arranges the items in icon or small icon view. </para>        </briefdescription>
        <detaileddescription>
<para>This only has effect on Win32. <emphasis>flag</emphasis> is one of:<itemizedlist>
<listitem><para>wxLIST_ALIGN_DEFAULT: Default alignment.</para></listitem><listitem><para>wxLIST_ALIGN_LEFT: Align to the left side of the control.</para></listitem><listitem><para>wxLIST_ALIGN_TOP: Align to the top side of the control.</para></listitem><listitem><para>wxLIST_ALIGN_SNAP_TO_GRID: Snap to grid. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1abea2212faca2067fc5a8b8ce261906f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::AssignImageList</definition>
        <argsstring>(wxImageList *imageList, int which)</argsstring>
        <name>AssignImageList</name>
        <param>
          <type><ref refid="classwx_image_list" kindref="compound">wxImageList</ref> *</type>
          <declname>imageList</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Sets the image list associated with the control and takes ownership of it (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>the control will, unlike when using <ref refid="classwx_list_ctrl_1a9a6b0ebe6f4b0a8fbef31c4e17fe235f" kindref="member">SetImageList()</ref>, delete the list when destroyed). <emphasis>which</emphasis> is one of <computeroutput>wxIMAGE_LIST_NORMAL</computeroutput>, <computeroutput>wxIMAGE_LIST_SMALL</computeroutput>, <computeroutput>wxIMAGE_LIST_STATE</computeroutput> (the last is unimplemented).</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1a9a6b0ebe6f4b0a8fbef31c4e17fe235f" kindref="member">SetImageList()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a834e6ee38695323f882ad2ee5cc7a979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::ClearAll</definition>
        <argsstring>()</argsstring>
        <name>ClearAll</name>
        <briefdescription>
<para>Deletes all items and all columns. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This sends an event of type <computeroutput>wxEVT_LIST_DELETE_ALL_ITEMS</computeroutput> under all platforms. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a5b13e700b9957677468d63558d73d5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::Create</definition>
        <argsstring>(wxWindow *parent, wxWindowID id, const wxPoint &amp;pos=wxDefaultPosition, const wxSize &amp;size=wxDefaultSize, long style=wxLC_ICON, const wxValidator &amp;validator=wxDefaultValidator, const wxString &amp;name=wxListCtrlNameStr)</argsstring>
        <name>Create</name>
        <param>
          <type><ref refid="classwx_window" kindref="compound">wxWindow</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="windowid_8h_1ae8091432cc2cb2485d45f2302fb51133" kindref="member">wxWindowID</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
          <defval><ref refid="gdicmn_8h_1af5a90c753eaf3d3e3e5068a19ec3c1d0" kindref="member">wxDefaultPosition</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_size" kindref="compound">wxSize</ref> &amp;</type>
          <declname>size</declname>
          <defval><ref refid="gdicmn_8h_1a33a012cdb075e9f78c93f63bec2dc27b" kindref="member">wxDefaultSize</ref></defval>
        </param>
        <param>
          <type>long</type>
          <declname>style</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1ad47b04a448f7d8d6835abe40632837cd" kindref="member">wxLC_ICON</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_validator" kindref="compound">wxValidator</ref> &amp;</type>
          <declname>validator</declname>
          <defval><ref refid="validate_8h_1af1e90d8aa1824fd2ce4024ef7e40703c" kindref="member">wxDefaultValidator</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>name</declname>
          <defval>wxListCtrlNameStr</defval>
        </param>
        <briefdescription>
<para>Creates the list control. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_list_ctrl_1a6941e35348b00a288e833871fd0138e8" kindref="member">wxListCtrl()</ref> for further details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a02a7ce5ad3eb09cd1b5af937f118a9e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::DeleteAllColumns</definition>
        <argsstring>()</argsstring>
        <name>DeleteAllColumns</name>
        <briefdescription>
<para>Delete all columns in the list control. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all columns were successfully deleted, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aa9fe817f4a8fd36fca7e8cd5e9818291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::DeleteAllItems</definition>
        <argsstring>()</argsstring>
        <name>DeleteAllItems</name>
        <briefdescription>
<para>Deletes all items in the list control. </para>        </briefdescription>
        <detaileddescription>
<para>This function does <emphasis>not</emphasis> send the <computeroutput>wxEVT_LIST_DELETE_ITEM</computeroutput> event because deleting many items from the control would be too slow then (unlike <ref refid="classwx_list_ctrl_1aa4d9e2fd4e35137f970b65f0d60b6058" kindref="member">wxListCtrl::DeleteItem</ref>) but it does send the special <computeroutput>wxEVT_LIST_DELETE_ALL_ITEMS</computeroutput> event if the control was not empty. If it was already empty, nothing is done and no event is sent.</para><para><simplesect kind="return"><para>true if the items were successfully deleted or if the control was already empty, false if an error occurred while deleting the items. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a6d30022b48a69999ceafa8c6420bba5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::DeleteColumn</definition>
        <argsstring>(int col)</argsstring>
        <name>DeleteColumn</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Deletes a column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aa4d9e2fd4e35137f970b65f0d60b6058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::DeleteItem</definition>
        <argsstring>(long item)</argsstring>
        <name>DeleteItem</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Deletes the specified item. </para>        </briefdescription>
        <detaileddescription>
<para>This function sends the <computeroutput>wxEVT_LIST_DELETE_ITEM</computeroutput> event for the item being deleted.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1aa9fe817f4a8fd36fca7e8cd5e9818291" kindref="member">DeleteAllItems()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a95b0ed5ccc8bcf8640534db5977bdd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> *</type>
        <definition>wxTextCtrl* wxListCtrl::EditLabel</definition>
        <argsstring>(long item, wxClassInfo *textControlClass=wxCLASSINFO(wxTextCtrl))</argsstring>
        <name>EditLabel</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="classwx_class_info" kindref="compound">wxClassInfo</ref> *</type>
          <declname>textControlClass</declname>
          <defval><ref refid="group__group__funcmacro__rtti_1gacee897a7d4e704e1aa53568220f2396e" kindref="member">wxCLASSINFO</ref>(<ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref>)</defval>
        </param>
        <briefdescription>
<para>Starts editing the label of the given item. </para>        </briefdescription>
        <detaileddescription>
<para>This function generates a <computeroutput>EVT_LIST_BEGIN_LABEL_EDIT</computeroutput> event which can be vetoed so that no text control will appear for in-place editing.</para><para>If the user changed the label (i.e. s/he does not press ESC or leave the text control without changes, a <computeroutput>EVT_LIST_END_LABEL_EDIT</computeroutput> event will be sent which can be vetoed as well. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a274e98c1c5101725bbdca9b19d8678a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::EnableAlternateRowColours</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>EnableAlternateRowColours</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enable alternating row background colours (also called zebra striping). </para>        </briefdescription>
        <detaileddescription>
<para>This method can only be called for the control in virtual report mode, i.e. having <ref refid="interface_2wx_2listctrl_8h_1ababe906ea6ac44adac57b655eda07d25" kindref="member">wxLC_REPORT</ref> and <ref refid="interface_2wx_2listctrl_8h_1a65384b7671f9f7998d572a0a5298f9c1" kindref="member">wxLC_VIRTUAL</ref> styles.</para><para>When enabling alternating colours, the appropriate colour for the even rows is chosen automatically depending on the default foreground and background colours which are used for the odd rows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, enable alternating row background colours, i.e. different colours for the odd and even rows. If false, disable this feature and use the same background colour for all rows.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.5</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_list_ctrl_1a7ed18be1794a1db88f264cf641b738da" kindref="member">SetAlternateRowColour()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a88057252d356c0b6f9a6eaaac7a91ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::EnableBellOnNoMatch</definition>
        <argsstring>(bool on=true)</argsstring>
        <name>EnableBellOnNoMatch</name>
        <param>
          <type>bool</type>
          <declname>on</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Enable or disable a beep if there is no match for the currently entered text when searching for the item from keyboard. </para>        </briefdescription>
        <detaileddescription>
<para>The default is to not beep in this case except in wxMSW where the beep is always generated by the native control and cannot be disabled, i.e. calls to this function do nothing there.</para><para><simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a037b5c94e79661110663d542f093d3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::EndEditLabel</definition>
        <argsstring>(bool cancel)</argsstring>
        <name>EndEditLabel</name>
        <param>
          <type>bool</type>
          <declname>cancel</declname>
        </param>
        <briefdescription>
<para>Finish editing the label. </para>        </briefdescription>
        <detaileddescription>
<para>This method allows to programmatically end editing a list control item in place. Usually it will only be called when editing is in progress, i.e. if <ref refid="classwx_list_ctrl_1a6fa5ceab722dee2c98537e648e39413e" kindref="member">GetEditControl()</ref> returns non-NULL. In particular, do not call it from EVT_LIST_BEGIN_LABEL_EDIT handler as the edit control is not yet fully created by then, just veto the event in this handler instead to prevent the editing from even starting.</para><para>Notice that calling this method will result in EVT_LIST_END_LABEL_EDIT event being generated.</para><para>Currently only implemented in wxMSW.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cancel</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, discard the changes made by user, as if <computeroutput>Escape</computeroutput> key was pressed. Otherwise, accept the changes as if <computeroutput>Return</computeroutput> was pressed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if item editing was finished or false if no item as being edited. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a59373c7c7b3b02522c40f97dd6493534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::EnsureVisible</definition>
        <argsstring>(long item)</argsstring>
        <name>EnsureVisible</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Ensures this item is visible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ad8d64b6d1b4af0df31e61ae9521388d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::FindItem</definition>
        <argsstring>(long start, const wxString &amp;str, bool partial=false)</argsstring>
        <name>FindItem</name>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>partial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Find an item whose label matches this string, starting from start or the beginning if start is <computeroutput>-1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The string comparison is case insensitive.</para><para>If <emphasis>partial</emphasis> is true then this method will look for items which begin with <emphasis>str</emphasis>.</para><para><simplesect kind="return"><para>The next matching item if any or <computeroutput>-1</computeroutput> (wxNOT_FOUND) otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ab027c0950e2d425b86461324765e8d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::FindItem</definition>
        <argsstring>(long start, wxUIntPtr data)</argsstring>
        <name>FindItem</name>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1a74cc3a4753ec135e9e2ee6b155c97216" kindref="member">wxUIntPtr</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Find an item whose data matches this data, starting from start or the beginning if &apos;start&apos; is <computeroutput>-1</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method is implemented as FindItemData(start, data).</para><para><simplesect kind="return"><para>The next matching item if any or <computeroutput>-1</computeroutput> (wxNOT_FOUND) otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ae46c0aa927816ae5b10afeea7a040e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::FindItem</definition>
        <argsstring>(long start, const wxPoint &amp;pt, int direction)</argsstring>
        <name>FindItem</name>
        <param>
          <type>long</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Find an item nearest this position in the specified direction, starting from <emphasis>start</emphasis> or the beginning if <emphasis>start</emphasis> is -1. </para>        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method is implemented as FindItemAtPos(start, pt, direction).</para><para><simplesect kind="return"><para>The next matching item if any or <computeroutput>-1</computeroutput> (wxNOT_FOUND) otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a48e4808a48ba5f9b349ac6f725a6d8a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::GetColumn</definition>
        <argsstring>(int col, wxListItem &amp;item) const</argsstring>
        <name>GetColumn</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="classwx_list_item" kindref="compound">wxListItem</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Gets information about this column. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_list_ctrl_1a65a4d9f5fa5bc363e4a93317777d57b4" kindref="member">SetItem()</ref> for more information.</para><para><bold>wxPerl Note:</bold> In wxPerl this method takes only the <emphasis>col</emphasis> parameter and returns a <computeroutput>Wx::ListItem</computeroutput> (or <computeroutput>undef</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a48f2f5b4f062e3372d10c38542fdfc1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetColumnCount</definition>
        <argsstring>() const</argsstring>
        <name>GetColumnCount</name>
        <briefdescription>
<para>Returns the number of columns. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a79411a2c63b0bc9bd6d9d48838aa86c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetColumnIndexFromOrder</definition>
        <argsstring>(int pos) const</argsstring>
        <name>GetColumnIndexFromOrder</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Gets the column index from its position in visual order. </para>        </briefdescription>
        <detaileddescription>
<para>After calling <ref refid="classwx_list_ctrl_1a2a499df49ebcefb3451a44146f76457d" kindref="member">SetColumnsOrder()</ref>, the index returned by this function corresponds to the value of the element number <emphasis>pos</emphasis> in the array returned by <ref refid="classwx_list_ctrl_1aa239433ed39608fba50692a2100c17cc" kindref="member">GetColumnsOrder()</ref>.</para><para>Please see <ref refid="classwx_list_ctrl_1a2a499df49ebcefb3451a44146f76457d" kindref="member">SetColumnsOrder()</ref> documentation for an example and additional remarks about the columns ordering.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1aab1126b7921769b13f634a7f3a9a88a9" kindref="member">GetColumnOrder()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aab1126b7921769b13f634a7f3a9a88a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetColumnOrder</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetColumnOrder</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Gets the column visual order position. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the index of the column which appears at the given visual position, e.g. calling it with <emphasis>col</emphasis> equal to 0 returns the index of the first shown column.</para><para>Please see <ref refid="classwx_list_ctrl_1a2a499df49ebcefb3451a44146f76457d" kindref="member">SetColumnsOrder()</ref> documentation for an example and additional remarks about the columns ordering.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1aa239433ed39608fba50692a2100c17cc" kindref="member">GetColumnsOrder()</ref>, <ref refid="classwx_list_ctrl_1a79411a2c63b0bc9bd6d9d48838aa86c1" kindref="member">GetColumnIndexFromOrder()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a1dee53dfab57448b307e50394caa581d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetColumnWidth</definition>
        <argsstring>(int col) const</argsstring>
        <name>GetColumnWidth</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Gets the column width (report view only). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aa239433ed39608fba50692a2100c17cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref></type>
        <definition>wxArrayInt wxListCtrl::GetColumnsOrder</definition>
        <argsstring>() const</argsstring>
        <name>GetColumnsOrder</name>
        <briefdescription>
<para>Returns the array containing the orders of all columns. </para>        </briefdescription>
        <detaileddescription>
<para>On error, an empty array is returned.</para><para>Please see <ref refid="classwx_list_ctrl_1a2a499df49ebcefb3451a44146f76457d" kindref="member">SetColumnsOrder()</ref> documentation for an example and additional remarks about the columns ordering.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1aab1126b7921769b13f634a7f3a9a88a9" kindref="member">GetColumnOrder()</ref>, <ref refid="classwx_list_ctrl_1a79411a2c63b0bc9bd6d9d48838aa86c1" kindref="member">GetColumnIndexFromOrder()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1af3e656c293986ee6cc397bdc517ce5f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetCountPerPage</definition>
        <argsstring>() const</argsstring>
        <name>GetCountPerPage</name>
        <briefdescription>
<para>Gets the number of items that can fit vertically in the visible area of the list control (list or report view) or the total number of items in the list control (icon or small icon view). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a6fa5ceab722dee2c98537e648e39413e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_text_ctrl" kindref="compound">wxTextCtrl</ref> *</type>
        <definition>wxTextCtrl* wxListCtrl::GetEditControl</definition>
        <argsstring>() const</argsstring>
        <name>GetEditControl</name>
        <briefdescription>
<para>Returns the edit control being currently used to edit a label. </para>        </briefdescription>
        <detaileddescription>
<para>Returns NULL if no label is being edited.</para><para><simplesect kind="note"><para>It is currently only implemented for wxMSW and the generic version, not for the native Mac OS X version. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a8dea93f1590fe0c06affe607f20e9674" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_image_list" kindref="compound">wxImageList</ref> *</type>
        <definition>wxImageList* wxListCtrl::GetImageList</definition>
        <argsstring>(int which) const</argsstring>
        <name>GetImageList</name>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Returns the specified image list. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>which</emphasis> may be one of:<itemizedlist>
<listitem><para>wxIMAGE_LIST_NORMAL: The normal (large icon) image list.</para></listitem><listitem><para>wxIMAGE_LIST_SMALL: The small icon image list.</para></listitem><listitem><para>wxIMAGE_LIST_STATE: The user-defined state image list (unimplemented). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a74369e6c808beefe37ff5a6fe141784f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::GetItem</definition>
        <argsstring>(wxListItem &amp;info) const</argsstring>
        <name>GetItem</name>
        <param>
          <type><ref refid="classwx_list_item" kindref="compound">wxListItem</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Gets information about the item. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_list_ctrl_1a65a4d9f5fa5bc363e4a93317777d57b4" kindref="member">SetItem()</ref> for more information.</para><para>You must call <emphasis>info.SetId()</emphasis> to set the ID of item you&apos;re interested in before calling this method, and <emphasis>info.SetMask()</emphasis> with the flags indicating what fields you need to retrieve from <emphasis>info</emphasis>.</para><para><bold>wxPerl Note:</bold> In wxPerl this method takes as parameter the ID of the item and (optionally) the column, and returns a Wx::ListItem object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a6f95294168e46663aaa3ab1712429649" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxListCtrl::GetItemBackgroundColour</definition>
        <argsstring>(long item) const</argsstring>
        <name>GetItemBackgroundColour</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns the colour for this item. </para>        </briefdescription>
        <detaileddescription>
<para>If the item has no specific colour, returns an invalid colour (and not the default background control of the control itself).</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1a52400b14563d1ff8fa7e9728a5bbf3ae" kindref="member">GetItemTextColour()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a8d09520c767e1b09db6586bea6afa77a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetItemCount</definition>
        <argsstring>() const</argsstring>
        <name>GetItemCount</name>
        <briefdescription>
<para>Returns the number of items in the list control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1af8413e60f706e59c5340bf37b0c12f95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a74cc3a4753ec135e9e2ee6b155c97216" kindref="member">wxUIntPtr</ref></type>
        <definition>wxUIntPtr wxListCtrl::GetItemData</definition>
        <argsstring>(long item) const</argsstring>
        <name>GetItemData</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Gets the application-defined data associated with this item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ac51bdea8ff28404780f43d8d12bbf39f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_font" kindref="compound">wxFont</ref></type>
        <definition>wxFont wxListCtrl::GetItemFont</definition>
        <argsstring>(long item) const</argsstring>
        <name>GetItemFont</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns the item&apos;s font. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a0215890b6e8ac6ae49730d01f3f8ffca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::GetItemPosition</definition>
        <argsstring>(long item, wxPoint &amp;pos) const</argsstring>
        <name>GetItemPosition</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Returns the position of the item, in icon or small icon view. </para>        </briefdescription>
        <detaileddescription>
<para><bold>wxPerl Note:</bold> In wxPerl this method takes only the <emphasis>item</emphasis> parameter and returns a <computeroutput>Wx::Point</computeroutput> (or <computeroutput>undef</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a7672f86c151cfa91c0df7d31c6509fea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::GetItemRect</definition>
        <argsstring>(long item, wxRect &amp;rect, int code=wxLIST_RECT_BOUNDS) const</argsstring>
        <name>GetItemRect</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1a458e651af6690959efa2afb96be7d609aff45f4057710f0c4f5cca0a7abf3f29d" kindref="member">wxLIST_RECT_BOUNDS</ref></defval>
        </param>
        <briefdescription>
<para>Returns the rectangle representing the item&apos;s size and position, in physical coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>code</emphasis> is one of wxLIST_RECT_BOUNDS, wxLIST_RECT_ICON, wxLIST_RECT_LABEL.</para><para><bold>wxPerl Note:</bold> In wxPerl this method takes only the <emphasis>item</emphasis> and <emphasis>code</emphasis> parameters and returns a <computeroutput>Wx::Rect</computeroutput> (or <computeroutput>undef</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a2b50b4871a486561192e5ecb16658dc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_size" kindref="compound">wxSize</ref></type>
        <definition>wxSize wxListCtrl::GetItemSpacing</definition>
        <argsstring>() const</argsstring>
        <name>GetItemSpacing</name>
        <briefdescription>
<para>Retrieves the spacing between icons in pixels: horizontal spacing is returned as <computeroutput>x</computeroutput> component of the <ref refid="classwx_size" kindref="compound">wxSize</ref> object and the vertical spacing as its <computeroutput>y</computeroutput> component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1adfe1f96d1262dbfb51a79c31f4c6a77f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetItemState</definition>
        <argsstring>(long item, long stateMask) const</argsstring>
        <name>GetItemState</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>stateMask</declname>
        </param>
        <briefdescription>
<para>Gets the item state. </para>        </briefdescription>
        <detaileddescription>
<para>For a list of state flags, see <ref refid="classwx_list_ctrl_1a65a4d9f5fa5bc363e4a93317777d57b4" kindref="member">SetItem()</ref>. The <emphasis>stateMask</emphasis> indicates which state flags are of interest. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1af6030eb517baa0c331aa4424f53e915f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxListCtrl::GetItemText</definition>
        <argsstring>(long item, int col=0) const</argsstring>
        <name>GetItemText</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the item text for this item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Item (zero-based) index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Item column (zero-based) index. Column 0 is the default. This parameter is new in wxWidgets 2.9.1. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a52400b14563d1ff8fa7e9728a5bbf3ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxListCtrl::GetItemTextColour</definition>
        <argsstring>(long item) const</argsstring>
        <name>GetItemTextColour</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns the colour for this item. </para>        </briefdescription>
        <detaileddescription>
<para>If the item has no specific colour, returns an invalid colour (and not the default foreground control of the control itself as this wouldn&apos;t allow distinguishing between items having the same colour as the current control foreground and items with default colour which, hence, have always the same colour as the control). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a4d6793dc14feadac68516da9bf21cd67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::GetNextItem</definition>
        <argsstring>(long item, int geometry=wxLIST_NEXT_ALL, int state=wxLIST_STATE_DONTCARE) const</argsstring>
        <name>GetNextItem</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int</type>
          <declname>geometry</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1a4caf8d8f829279fba122163d961608a4ade6f41ef8b2af3e3486906ed7a391c1e" kindref="member">wxLIST_NEXT_ALL</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>state</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1a824dd5fb04d1cde986763478f865cd7c" kindref="member">wxLIST_STATE_DONTCARE</ref></defval>
        </param>
        <briefdescription>
<para>Searches for an item with the given geometry or state, starting from <emphasis>item</emphasis> but excluding the <emphasis>item</emphasis> itself. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>item</emphasis> is -1, the first item that matches the specified flags will be returned. Returns the first item with given state following <emphasis>item</emphasis> or -1 if no such item found. This function may be used to find all selected items in the control like this:</para><para><programlisting><codeline><highlight class="normal">long<sp/>item<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(<sp/>;;<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>listctrl-&gt;GetNextItem(item,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLIST_NEXT_ALL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLIST_STATE_SELECTED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>item<sp/>==<sp/>-1<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>this<sp/>item<sp/>is<sp/>selected<sp/>-<sp/>do<sp/>whatever<sp/>is<sp/>needed<sp/>with<sp/>it</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxLogMessage(&quot;Item<sp/>%ld<sp/>is<sp/>selected.&quot;,<sp/>item);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><emphasis>geometry</emphasis> can be one of:<itemizedlist>
<listitem><para>wxLIST_NEXT_ABOVE: Searches for an item above the specified item.</para></listitem><listitem><para>wxLIST_NEXT_ALL: Searches for subsequent item by index.</para></listitem><listitem><para>wxLIST_NEXT_BELOW: Searches for an item below the specified item.</para></listitem><listitem><para>wxLIST_NEXT_LEFT: Searches for an item to the left of the specified item.</para></listitem><listitem><para>wxLIST_NEXT_RIGHT: Searches for an item to the right of the specified item.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>this parameter is only supported by wxMSW currently and ignored on other platforms.</para></simplesect>
<emphasis>state</emphasis> can be a bitlist of the following:<itemizedlist>
<listitem><para>wxLIST_STATE_DONTCARE: Don&apos;t care what the state is.</para></listitem><listitem><para>wxLIST_STATE_DROPHILITED: The item indicates it is a drop target.</para></listitem><listitem><para>wxLIST_STATE_FOCUSED: The item has the focus.</para></listitem><listitem><para>wxLIST_STATE_SELECTED: The item is selected.</para></listitem><listitem><para>wxLIST_STATE_CUT: The item is selected as part of a cut and paste operation. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1abfeaae84557fbbbf67ae1703dc4d61d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxListCtrl::GetSelectedItemCount</definition>
        <argsstring>() const</argsstring>
        <name>GetSelectedItemCount</name>
        <briefdescription>
<para>Returns the number of selected items in the list control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ac528fabd73e6947a0760f804d53e9a30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::GetSubItemRect</definition>
        <argsstring>(long item, long subItem, wxRect &amp;rect, int code=wxLIST_RECT_BOUNDS) const</argsstring>
        <name>GetSubItemRect</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>subItem</declname>
        </param>
        <param>
          <type><ref refid="classwx_rect" kindref="compound">wxRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1a458e651af6690959efa2afb96be7d609aff45f4057710f0c4f5cca0a7abf3f29d" kindref="member">wxLIST_RECT_BOUNDS</ref></defval>
        </param>
        <briefdescription>
<para>Returns the rectangle representing the size and position, in physical coordinates, of the given subitem, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>the part of the row <emphasis>item</emphasis> in the column <emphasis>subItem</emphasis>.</para><para>This method is only meaningful when the <ref refid="classwx_list_ctrl" kindref="compound">wxListCtrl</ref> is in the report mode. If <emphasis>subItem</emphasis> parameter is equal to the special value <computeroutput>wxLIST_GETSUBITEMRECT_WHOLEITEM</computeroutput> the return value is the same as for <ref refid="classwx_list_ctrl_1a7672f86c151cfa91c0df7d31c6509fea" kindref="member">GetItemRect()</ref>.</para><para><emphasis>code</emphasis> can be one of <computeroutput>wxLIST_RECT_BOUNDS</computeroutput>, <computeroutput>wxLIST_RECT_ICON</computeroutput> or <computeroutput>wxLIST_RECT_LABEL</computeroutput>.</para><para><simplesect kind="since"><para>2.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="757" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a4ea334b0fdc8b16e5aaf5ab3d5a10395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_colour" kindref="compound">wxColour</ref></type>
        <definition>wxColour wxListCtrl::GetTextColour</definition>
        <argsstring>() const</argsstring>
        <name>GetTextColour</name>
        <briefdescription>
<para>Gets the text colour of the list control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a837666df6594a128cb6d1eca00fadbb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::GetTopItem</definition>
        <argsstring>() const</argsstring>
        <name>GetTopItem</name>
        <briefdescription>
<para>Gets the index of the topmost visible item when in list or report view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="768" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ab1032138f5ff418bbe2e13ab5ea5d659" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_rect" kindref="compound">wxRect</ref></type>
        <definition>wxRect wxListCtrl::GetViewRect</definition>
        <argsstring>() const</argsstring>
        <name>GetViewRect</name>
        <briefdescription>
<para>Returns the rectangle taken by all items in the control. </para>        </briefdescription>
        <detaileddescription>
<para>In other words, if the controls client size were equal to the size of this rectangle, no scrollbars would be needed and no free space would be left.</para><para>Note that this function only works in the icon and small icon views, not in list or report views (this is a limitation of the native Win32 control). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a7ed18be1794a1db88f264cf641b738da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetAlternateRowColour</definition>
        <argsstring>(const wxColour &amp;colour)</argsstring>
        <name>SetAlternateRowColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Set the alternative row background colour to a specific colour. </para>        </briefdescription>
        <detaileddescription>
<para>It is recommended to call <ref refid="classwx_list_ctrl_1a274e98c1c5101725bbdca9b19d8678a4" kindref="member">EnableAlternateRowColours()</ref> instead of using these methods as native implementations of this control might support alternating row colours but not setting the exact colour to be used for them.</para><para>As <ref refid="classwx_list_ctrl_1a274e98c1c5101725bbdca9b19d8678a4" kindref="member">EnableAlternateRowColours()</ref>, this method can only be used with controls having <ref refid="interface_2wx_2listctrl_8h_1ababe906ea6ac44adac57b655eda07d25" kindref="member">wxLC_REPORT</ref> and <ref refid="interface_2wx_2listctrl_8h_1a65384b7671f9f7998d572a0a5298f9c1" kindref="member">wxLC_VIRTUAL</ref> styles.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid alternative row background colour to enable alternating rows or invalid colour to disable them and use the same colour for all rows.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>2.9.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ac75506f2203ffa9fbebcd8ecf240f27c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::HitTest</definition>
        <argsstring>(const wxPoint &amp;point, int &amp;flags, long *ptrSubItem=NULL) const</argsstring>
        <name>HitTest</name>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>ptrSubItem</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Determines which item (if any) is at the specified point, giving details in <emphasis>flags</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns index of the item or <computeroutput>wxNOT_FOUND</computeroutput> if no item is at the specified point.</para><para><emphasis>flags</emphasis> will be a combination of the following flags:<itemizedlist>
<listitem><para>wxLIST_HITTEST_ABOVE: Above the client area.</para></listitem><listitem><para>wxLIST_HITTEST_BELOW: Below the client area.</para></listitem><listitem><para>wxLIST_HITTEST_NOWHERE: In the client area but below the last item.</para></listitem><listitem><para>wxLIST_HITTEST_ONITEMICON: On the bitmap associated with an item.</para></listitem><listitem><para>wxLIST_HITTEST_ONITEMLABEL: On the label (string) associated with an item.</para></listitem><listitem><para>wxLIST_HITTEST_ONITEMRIGHT: In the area to the right of an item.</para></listitem><listitem><para>wxLIST_HITTEST_ONITEMSTATEICON: On the state icon for a tree view item that is in a user-defined state.</para></listitem><listitem><para>wxLIST_HITTEST_TOLEFT: To the right of the client area.</para></listitem><listitem><para>wxLIST_HITTEST_TORIGHT: To the left of the client area.</para></listitem><listitem><para>wxLIST_HITTEST_ONITEM: Combination of <computeroutput>wxLIST_HITTEST_ONITEMICON</computeroutput>, <computeroutput>wxLIST_HITTEST_ONITEMLABEL</computeroutput>, <computeroutput>wxLIST_HITTEST_ONITEMSTATEICON</computeroutput>.</para></listitem></itemizedlist>
</para><para>If <emphasis>ptrSubItem</emphasis> is not NULL and the <ref refid="classwx_list_ctrl" kindref="compound">wxListCtrl</ref> is in the report mode the subitem (or column) number will also be provided. This feature is only available in version 2.7.0 or higher and is currently only implemented under wxMSW and requires at least comctl32.dll of version 4.70 on the host system or the value stored in <emphasis>ptrSubItem</emphasis> will be always -1. To compile this feature into wxWidgets library you need to have access to commctrl.h of version 4.70 that is provided by Microsoft.</para><para><bold>wxPerl Note:</bold> In wxPerl this method only takes the <emphasis>point</emphasis> parameter and returns a 2-element list (item, flags). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="832" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ad05564e94d55f56bf7b10f960acb3e20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::InReportView</definition>
        <argsstring>() const</argsstring>
        <name>InReportView</name>
        <briefdescription>
<para>Returns true if the control is currently using <ref refid="interface_2wx_2listctrl_8h_1ababe906ea6ac44adac57b655eda07d25" kindref="member">wxLC_REPORT</ref> style. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="837" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a75337fbb43f767eafc82d47966943141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::InsertColumn</definition>
        <argsstring>(long col, const wxListItem &amp;info)</argsstring>
        <name>InsertColumn</name>
        <param>
          <type>long</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_list_item" kindref="compound">wxListItem</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>For report view mode (only), inserts a column. </para>        </briefdescription>
        <detaileddescription>
<para>For more details, see <ref refid="classwx_list_ctrl_1a65a4d9f5fa5bc363e4a93317777d57b4" kindref="member">SetItem()</ref>. Also see InsertColumn(long, const <ref refid="classwx_string" kindref="compound">wxString</ref>&amp;, int, int) overload for a usually more convenient alternative to this method and the description of how the item width is interpreted by this method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1abd8d55b0f89e9a63372e3837c19c32d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::InsertColumn</definition>
        <argsstring>(long col, const wxString &amp;heading, int format=wxLIST_FORMAT_LEFT, int width=wxLIST_AUTOSIZE)</argsstring>
        <name>InsertColumn</name>
        <param>
          <type>long</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1afddccbb0d7cf18f9b205f00efc5738d0a53ef6990b28b4ef0b18f06da3f8c630d" kindref="member">wxLIST_FORMAT_LEFT</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval><ref refid="interface_2wx_2listctrl_8h_1ab48899087cc647f0f791ed0c459adc53ad8e121a8cc4230175e4687b8d05ef612" kindref="member">wxLIST_AUTOSIZE</ref></defval>
        </param>
        <briefdescription>
<para>For report view mode (only), inserts a column. </para>        </briefdescription>
        <detaileddescription>
<para>Insert a new column in the list control in report view mode at the given position specifying its most common attributes.</para><para>Notice that to set the image for the column you need to use Insert(long, const wxListItem&amp;) overload and specify <ref refid="interface_2wx_2listctrl_8h_1a45f7eff49d8fcd41b0fa657201aa9505" kindref="member">wxLIST_MASK_IMAGE</ref> in the item mask.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The index where the column should be inserted. Valid indices are from 0 up to <ref refid="classwx_list_ctrl_1a48f2f5b4f062e3372d10c38542fdfc1a" kindref="member">GetColumnCount()</ref> inclusive and the latter can be used to append the new column after the last existing one. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heading</parametername>
</parameternamelist>
<parameterdescription>
<para>The string specifying the column heading. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags specifying the control heading text alignment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>If positive, the width of the column in pixels. Otherwise it can be <computeroutput>wxLIST_AUTOSIZE</computeroutput> to choose the default size for the column or <computeroutput>wxLIST_AUTOSIZE_USEHEADER</computeroutput> to fit the column width to <emphasis>heading</emphasis> or to extend to fill all the remaining space for the last column. Notice that in case of <computeroutput>wxLIST_AUTOSIZE</computeroutput> fixed width is used as there are no items in this column to use for determining its best size yet. If you want to fit the column to its contents, use <ref refid="classwx_list_ctrl_1ac5818d43ce3913f7f70a6a759485cd6c" kindref="member">SetColumnWidth()</ref> after adding the items with values in this column. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the inserted column or -1 if adding it failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aa65a5ca4e7bd7c0e60a0522a9092a693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::InsertItem</definition>
        <argsstring>(wxListItem &amp;info)</argsstring>
        <name>InsertItem</name>
        <param>
          <type><ref refid="classwx_list_item" kindref="compound">wxListItem</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Inserts an item, returning the index of the new item if successful, -1 otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classwx_list_item" kindref="compound">wxListItem</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a66128e3a4806a7b545e83b6de0f49ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::InsertItem</definition>
        <argsstring>(long index, const wxString &amp;label)</argsstring>
        <name>InsertItem</name>
        <param>
          <type>long</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Insert an string item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the new item, supplied by the application </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>String label</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method is implemented as InsertStringItem(index, label). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a5a01ced78c631b056d781cf6f2ae6626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::InsertItem</definition>
        <argsstring>(long index, int imageIndex)</argsstring>
        <name>InsertItem</name>
        <param>
          <type>long</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>imageIndex</declname>
        </param>
        <briefdescription>
<para>Insert an image item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the new item, supplied by the application </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imageIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index into the image list associated with this control and view style</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method is implemented as InsertImageItem(index, imageIndex). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ad06b98bdb32f5d3b15703db8e8f5f5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::InsertItem</definition>
        <argsstring>(long index, const wxString &amp;label, int imageIndex)</argsstring>
        <name>InsertItem</name>
        <param>
          <type>long</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int</type>
          <declname>imageIndex</declname>
        </param>
        <briefdescription>
<para>Insert an image/string item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the new item, supplied by the application </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>String label </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imageIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index into the image list associated with this control and view style</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method is implemented as InsertImageStringItem(index, label, imageIndex). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="933" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a69ec74781f9eeee8b1edda6f984be85d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::IsVirtual</definition>
        <argsstring>() const</argsstring>
        <name>IsVirtual</name>
        <briefdescription>
<para>Returns true if the control is currently in virtual report view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="939" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ab8a88dac752a883ad4e02bb42a7d5015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::RefreshItem</definition>
        <argsstring>(long item)</argsstring>
        <name>RefreshItem</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Redraws the given <emphasis>item</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This is only useful for the virtual list controls as without calling this function the displayed value of the item doesn&apos;t change even when the underlying data does change.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1aaa6b0180a9dcdf46be8ec4baffc61efc" kindref="member">RefreshItems()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="950" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aaa6b0180a9dcdf46be8ec4baffc61efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::RefreshItems</definition>
        <argsstring>(long itemFrom, long itemTo)</argsstring>
        <name>RefreshItems</name>
        <param>
          <type>long</type>
          <declname>itemFrom</declname>
        </param>
        <param>
          <type>long</type>
          <declname>itemTo</declname>
        </param>
        <briefdescription>
<para>Redraws the items between <emphasis>itemFrom</emphasis> and <emphasis>itemTo</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The starting item must be less than or equal to the ending one.</para><para>Just as <ref refid="classwx_list_ctrl_1ab8a88dac752a883ad4e02bb42a7d5015" kindref="member">RefreshItem()</ref> this is only useful for virtual list controls. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="958" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a7e620aa7cc9953d5e98846b130034135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::ScrollList</definition>
        <argsstring>(int dx, int dy)</argsstring>
        <name>ScrollList</name>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <briefdescription>
<para>Scrolls the list control. </para>        </briefdescription>
        <detaileddescription>
<para>If in icon, small icon or report view mode, <emphasis>dx</emphasis> specifies the number of pixels to scroll. If in list view mode, <emphasis>dx</emphasis> specifies the number of columns to scroll. <emphasis>dy</emphasis> always specifies the number of pixels to scroll vertically.</para><para><simplesect kind="note"><para>This method is currently only implemented in the Windows version. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="968" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a935412e9017c3fe511514cfc360a3117" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxListCtrl::SetBackgroundColour</definition>
        <argsstring>(const wxColour &amp;col)</argsstring>
        <name>SetBackgroundColour</name>
        <reimplements refid="classwx_window_1a37219df52734626e23401fd83b25d8a0">SetBackgroundColour</reimplements>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the background colour. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the <ref refid="classwx_window_1af51668ec32e9e44db45574a15ec215b4" kindref="member">wxWindow::GetBackgroundColour()</ref> function of <ref refid="classwx_window" kindref="compound">wxWindow</ref> base class can be used to retrieve the current background colour. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="976" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a61244b9721214359b0ad3992135920c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetColumn</definition>
        <argsstring>(int col, wxListItem &amp;item)</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="classwx_list_item" kindref="compound">wxListItem</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Sets information about this column. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classwx_list_ctrl_1a65a4d9f5fa5bc363e4a93317777d57b4" kindref="member">SetItem()</ref> for more information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="982" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ac5818d43ce3913f7f70a6a759485cd6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetColumnWidth</definition>
        <argsstring>(int col, int width)</argsstring>
        <name>SetColumnWidth</name>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Sets the column width. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>width</emphasis> can be a width in pixels or <computeroutput>wxLIST_AUTOSIZE</computeroutput> (-1) or <computeroutput>wxLIST_AUTOSIZE_USEHEADER</computeroutput> (-2).</para><para><computeroutput>wxLIST_AUTOSIZE</computeroutput> will resize the column to the length of its longest item.</para><para><computeroutput>wxLIST_AUTOSIZE_USEHEADER</computeroutput> will resize the column to the length of the header (Win32) or 80 pixels (other platforms).</para><para>In small or normal icon view, <emphasis>col</emphasis> must be -1, and the column width is set for all columns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="998" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a2a499df49ebcefb3451a44146f76457d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetColumnsOrder</definition>
        <argsstring>(const wxArrayInt &amp;orders)</argsstring>
        <name>SetColumnsOrder</name>
        <param>
          <type>const <ref refid="dynarray_8h_1add87f199292e36ee87efd6d7f0d4ee66" kindref="member">wxArrayInt</ref> &amp;</type>
          <declname>orders</declname>
        </param>
        <briefdescription>
<para>Changes the order in which the columns are shown. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the columns of a list control appear on the screen in order of their indices, i.e. the column 0 appears first, the column 1 next and so on. However by using this function it is possible to arbitrarily reorder the columns visual order and the user can also rearrange the columns interactively by dragging them. In this case, the index of the column is not the same as its order and the functions <ref refid="classwx_list_ctrl_1aab1126b7921769b13f634a7f3a9a88a9" kindref="member">GetColumnOrder()</ref> and <ref refid="classwx_list_ctrl_1a79411a2c63b0bc9bd6d9d48838aa86c1" kindref="member">GetColumnIndexFromOrder()</ref> should be used to translate between them. Notice that all the other functions still work with the column indices, i.e. the visual positioning of the columns on screen doesn&apos;t affect the code setting or getting their values for example.</para><para>The <emphasis>orders</emphasis> array must have the same number elements as the number of columns and contain each position exactly once. Its n-th element contains the index of the column to be shown in n-th position, so for a control with three columns passing an array with elements 2, 0 and 1 results in the third column being displayed first, the first one next and the second one last.</para><para>Example of using it: <programlisting><codeline><highlight class="normal">wxListCtrl<sp/>*list<sp/>=<sp/>new<sp/>wxListCtrl(...);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>list-&gt;InsertColumn(i,<sp/>wxString::Format(&quot;Column<sp/>%d&quot;,<sp/>i));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wxArrayInt<sp/>order(3);</highlight></codeline>
<codeline><highlight class="normal">order[0]<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">order[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">order[2]<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">list-&gt;SetColumnsOrder(order);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>now<sp/>list-&gt;GetColumnsOrder()<sp/>will<sp/>return<sp/>order<sp/>and</highlight></codeline>
<codeline><highlight class="normal">//<sp/>list-&gt;GetColumnIndexFromOrder(n)<sp/>will<sp/>return<sp/>order[n]<sp/>and</highlight></codeline>
<codeline><highlight class="normal">//<sp/>list-&gt;GetColumnOrder()<sp/>will<sp/>return<sp/>1,<sp/>2<sp/>and<sp/>0<sp/>for<sp/>the<sp/>column<sp/>0,</highlight></codeline>
<codeline><highlight class="normal">//<sp/>1<sp/>and<sp/>2<sp/>respectively</highlight></codeline>
</programlisting></para><para>Please notice that this function makes sense for report view only and currently is only implemented in wxMSW port. To avoid explicit tests for <computeroutput><bold>WXMSW</bold></computeroutput> in your code, please use <computeroutput>wxHAS_LISTCTRL_COLUMN_ORDER</computeroutput> as this will allow it to start working under the other platforms when support for the column reordering is added there.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1aa239433ed39608fba50692a2100c17cc" kindref="member">GetColumnsOrder()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a9a6b0ebe6f4b0a8fbef31c4e17fe235f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetImageList</definition>
        <argsstring>(wxImageList *imageList, int which)</argsstring>
        <name>SetImageList</name>
        <param>
          <type><ref refid="classwx_image_list" kindref="compound">wxImageList</ref> *</type>
          <declname>imageList</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Sets the image list associated with the control. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>which</emphasis> is one of <computeroutput>wxIMAGE_LIST_NORMAL</computeroutput>, <computeroutput>wxIMAGE_LIST_SMALL</computeroutput>, <computeroutput>wxIMAGE_LIST_STATE</computeroutput> (the last is unimplemented).</para><para>This method does not take ownership of the image list, you have to delete it yourself.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1abea2212faca2067fc5a8b8ce261906f2" kindref="member">AssignImageList()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a65a4d9f5fa5bc363e4a93317777d57b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetItem</definition>
        <argsstring>(wxListItem &amp;info)</argsstring>
        <name>SetItem</name>
        <param>
          <type><ref refid="classwx_list_item" kindref="compound">wxListItem</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Sets the data of an item. </para>        </briefdescription>
        <detaileddescription>
<para>Using the <ref refid="classwx_list_item" kindref="compound">wxListItem</ref>&apos;s mask and state mask, you can change only selected attributes of a <ref refid="classwx_list_ctrl" kindref="compound">wxListCtrl</ref> item. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aa1ea1a3071677e667af1fcc909cefa03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxListCtrl::SetItem</definition>
        <argsstring>(long index, int column, const wxString &amp;label, int imageId=-1)</argsstring>
        <name>SetItem</name>
        <param>
          <type>long</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int</type>
          <declname>imageId</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Sets an item string field at a particular column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1073" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1adf07b82511dc77d64097c0ffefdc9a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetItemBackgroundColour</definition>
        <argsstring>(long item, const wxColour &amp;col)</argsstring>
        <name>SetItemBackgroundColour</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the background colour for this item. </para>        </briefdescription>
        <detaileddescription>
<para>This function only works in report view mode. The colour can be retrieved using <ref refid="classwx_list_ctrl_1a6f95294168e46663aaa3ab1712429649" kindref="member">GetItemBackgroundColour()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1080" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a83d08f3aefb0a20b25fad05f19fad67d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetItemColumnImage</definition>
        <argsstring>(long item, long column, int image)</argsstring>
        <name>SetItemColumnImage</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>column</declname>
        </param>
        <param>
          <type>int</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Sets the image associated with the item. </para>        </briefdescription>
        <detaileddescription>
<para>In report view, you can specify the column. The image is an index into the image list associated with the list control. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1087" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a5ded9342e4969eeeb60d1305f75995fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetItemCount</definition>
        <argsstring>(long count)</argsstring>
        <name>SetItemCount</name>
        <param>
          <type>long</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>This method can only be used with virtual list controls. </para>        </briefdescription>
        <detaileddescription>
<para>It is used to indicate to the control the number of items it contains. After calling it, the main program should be ready to handle calls to various item callbacks (such as <ref refid="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" kindref="member">wxListCtrl::OnGetItemText</ref>) for all items in the range from 0 to <emphasis>count</emphasis>.</para><para>Notice that the control is not necessarily redrawn after this call as it may be undesirable if an item which is not visible on the screen anyhow was added to or removed from a control displaying many items, if you do need to refresh the display you can just call <ref refid="classwx_window_1a29dc7251746154c821b17841b9877830" kindref="member">Refresh()</ref> manually. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a54825c8c66e7fb59cee6076d6554f8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetItemData</definition>
        <argsstring>(long item, long data)</argsstring>
        <name>SetItemData</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Associates application-defined data with this item. </para>        </briefdescription>
        <detaileddescription>
<para>Notice that this function cannot be used to associate pointers with the control items, use <ref refid="classwx_list_ctrl_1a748edc3f8e43939632f2838756599863" kindref="member">SetItemPtrData()</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1acfc640f1aba5634ab25186e71ffc278f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetItemFont</definition>
        <argsstring>(long item, const wxFont &amp;font)</argsstring>
        <name>SetItemFont</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_font" kindref="compound">wxFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Sets the item&apos;s font. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1afe006faba05c34bbc70539f100e72c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetItemImage</definition>
        <argsstring>(long item, int image, int selImage=-1)</argsstring>
        <name>SetItemImage</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selImage</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Sets the unselected and selected images associated with the item. </para>        </briefdescription>
        <detaileddescription>
<para>The images are indices into the image list associated with the list control. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a13525147c745a26eeb54fe55dfdbad46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetItemPosition</definition>
        <argsstring>(long item, const wxPoint &amp;pos)</argsstring>
        <name>SetItemPosition</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_point" kindref="compound">wxPoint</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Sets the position of the item, in icon or small icon view. </para>        </briefdescription>
        <detaileddescription>
<para>Windows only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a748edc3f8e43939632f2838756599863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetItemPtrData</definition>
        <argsstring>(long item, wxUIntPtr data)</argsstring>
        <name>SetItemPtrData</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1a74cc3a4753ec135e9e2ee6b155c97216" kindref="member">wxUIntPtr</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Associates application-defined data with this item. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>data</emphasis> parameter may be either an integer or a pointer cast to the <computeroutput>wxUIntPtr</computeroutput> type which is guaranteed to be large enough to be able to contain all integer types and pointers.</para><para><simplesect kind="since"><para>2.8.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a172d78854092aec2b784b8519bf5be08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SetItemState</definition>
        <argsstring>(long item, long state, long stateMask)</argsstring>
        <name>SetItemState</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>state</declname>
        </param>
        <param>
          <type>long</type>
          <declname>stateMask</declname>
        </param>
        <briefdescription>
<para>Sets the item state. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>stateMask</emphasis> is a combination of <computeroutput>wxLIST_STATE_XXX</computeroutput> constants described in <ref refid="classwx_list_item" kindref="compound">wxListItem</ref> documentation. For each of the bits specified in <emphasis>stateMask</emphasis>, the corresponding state is set or cleared depending on whether <emphasis>state</emphasis> argument contains the same bit or not.</para><para>So to select an item you can use <programlisting><codeline><highlight class="normal">list-&gt;SetItemState(item,<sp/>wxLIST_STATE_SELECTED,<sp/>wxLIST_STATE_SELECTED);</highlight></codeline>
</programlisting> while to deselect it you should use <programlisting><codeline><highlight class="normal">list-&gt;SetItemState(item,<sp/>0,<sp/>wxLIST_STATE_SELECTED);</highlight></codeline>
</programlisting></para><para>Consider using <ref refid="classwx_list_view" kindref="compound">wxListView</ref> if possible to avoid dealing with this error-prone and confusing method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1af4d70a5a6a15011590fa0b94254ecbd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetItemText</definition>
        <argsstring>(long item, const wxString &amp;text)</argsstring>
        <name>SetItemText</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Sets the item text for this item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a069801dda4c0df09ddb0c7cdefcdaf11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetItemTextColour</definition>
        <argsstring>(long item, const wxColour &amp;col)</argsstring>
        <name>SetItemTextColour</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the colour for this item. </para>        </briefdescription>
        <detaileddescription>
<para>This function only works in report view. The colour can be retrieved using <ref refid="classwx_list_ctrl_1a52400b14563d1ff8fa7e9728a5bbf3ae" kindref="member">GetItemTextColour()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a20daa8d70dc41ba23d00bcf6a652ab28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetSingleStyle</definition>
        <argsstring>(long style, bool add=true)</argsstring>
        <name>SetSingleStyle</name>
        <param>
          <type>long</type>
          <declname>style</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>add</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Adds or removes a single window style. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1af3e129f2ac6412c8bd602f286b95300f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetTextColour</definition>
        <argsstring>(const wxColour &amp;col)</argsstring>
        <name>SetTextColour</name>
        <param>
          <type>const <ref refid="classwx_colour" kindref="compound">wxColour</ref> &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Sets the text colour of the list control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ae719fa247088c1f5e3b6bd7de2cfcc39" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void wxListCtrl::SetWindowStyleFlag</definition>
        <argsstring>(long style)</argsstring>
        <name>SetWindowStyleFlag</name>
        <reimplements refid="classwx_window_1aee2cf342f80523432e7f2299d299451b">SetWindowStyleFlag</reimplements>
        <param>
          <type>long</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Sets the whole window style, deleting all items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a5a36fae3701f7df7021362b0330f9640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxListCtrl::SortItems</definition>
        <argsstring>(wxListCtrlCompare fnSortCallBack, wxIntPtr data)</argsstring>
        <name>SortItems</name>
        <param>
          <type>wxListCtrlCompare</type>
          <declname>fnSortCallBack</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1adc7fafddfefae454021d2e0660c96487" kindref="member">wxIntPtr</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Call this function to sort the items in the list control. </para>        </briefdescription>
        <detaileddescription>
<para>Sorting is done using the specified <emphasis>fnSortCallBack</emphasis> function. This function must have the following prototype: <programlisting><codeline><highlight class="normal">int<sp/>wxCALLBACK<sp/>wxListCompareFunction(wxIntPtr<sp/>item1,<sp/>wxIntPtr<sp/>item2,<sp/>wxIntPtr<sp/>sortData)</highlight></codeline>
</programlisting></para><para>It is called each time when the two items must be compared and should return 0 if the items are equal, negative value if the first item is less than the second one and positive value if the first one is greater than the second one (the same convention as used by <computeroutput>qsort(3)</computeroutput>).</para><para>The parameter <emphasis>item1</emphasis> is the client data associated with the first item (NOT the index). The parameter <emphasis>item2</emphasis> is the client data associated with the second item (NOT the index). The parameter <emphasis>data</emphasis> is the value passed to <ref refid="classwx_list_ctrl_1a5a36fae3701f7df7021362b0330f9640" kindref="member">SortItems()</ref> itself.</para><para>Notice that the control may only be sorted on client data associated with the items, so you must use SetItemData if you want to be able to sort the items in the control.</para><para>Please see the <ref refid="page_samples_1page_samples_listctrl" kindref="member">List Control Sample</ref> for an example of using this function.</para><para><bold>wxPerl Note:</bold> In wxPerl the comparison function must take just two parameters; however, you may use a closure to achieve an effect similar to the SortItems third parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1218" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_list_item_attr" kindref="compound">wxListItemAttr</ref> *</type>
        <definition>virtual wxListItemAttr* wxListCtrl::OnGetItemAttr</definition>
        <argsstring>(long item) const</argsstring>
        <name>OnGetItemAttr</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>This function may be overridden in the derived class for a control with <computeroutput>wxLC_VIRTUAL</computeroutput> style. </para>        </briefdescription>
        <detaileddescription>
<para>It should return the attribute for the specified <computeroutput>item</computeroutput> or NULL to use the default appearance parameters.</para><para><ref refid="classwx_list_ctrl" kindref="compound">wxListCtrl</ref> will not delete the pointer or keep a reference of it. You can return the same <ref refid="classwx_list_item_attr" kindref="compound">wxListItemAttr</ref> pointer for every <ref refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" kindref="member">OnGetItemAttr()</ref> call.</para><para>The base class version always returns NULL.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" kindref="member">OnGetItemImage()</ref>, <ref refid="classwx_list_ctrl_1ac09eedfc42de9b02fe8f961367074ca1" kindref="member">OnGetItemColumnImage()</ref>, <ref refid="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" kindref="member">OnGetItemText()</ref>, <ref refid="classwx_list_ctrl_1a23c68145cbc2a1d5fce88058a399fd0f" kindref="member">OnGetItemColumnAttr()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a23c68145cbc2a1d5fce88058a399fd0f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_list_item_attr" kindref="compound">wxListItemAttr</ref> *</type>
        <definition>virtual wxListItemAttr* wxListCtrl::OnGetItemColumnAttr</definition>
        <argsstring>(long item, long column) const</argsstring>
        <name>OnGetItemColumnAttr</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>This function may be overridden in the derived class for a control with <computeroutput>wxLC_VIRTUAL</computeroutput> style. </para>        </briefdescription>
        <detaileddescription>
<para>It should return the attribute for the for the specified <emphasis>item</emphasis> and <emphasis>column</emphasis> or NULL to use the default appearance parameters.</para><para>The base class version returns <computeroutput>OnGetItemAttr(item)</computeroutput>.</para><para><simplesect kind="note"><para>Currently this function is only called under wxMSW, the other ports only support <ref refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" kindref="member">OnGetItemAttr()</ref></para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" kindref="member">OnGetItemAttr()</ref>, <ref refid="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" kindref="member">OnGetItemText()</ref>, <ref refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" kindref="member">OnGetItemImage()</ref>, <ref refid="classwx_list_ctrl_1ac09eedfc42de9b02fe8f961367074ca1" kindref="member">OnGetItemColumnImage()</ref>, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1ac09eedfc42de9b02fe8f961367074ca1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxListCtrl::OnGetItemColumnImage</definition>
        <argsstring>(long item, long column) const</argsstring>
        <name>OnGetItemColumnImage</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Override this function in the derived class for a control with <computeroutput>wxLC_VIRTUAL</computeroutput> and <computeroutput>wxLC_REPORT</computeroutput> styles in order to specify the image index for the given line and column. </para>        </briefdescription>
        <detaileddescription>
<para>The base class version always calls <ref refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" kindref="member">OnGetItemImage()</ref> for the first column, else it returns -1.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" kindref="member">OnGetItemText()</ref>, <ref refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" kindref="member">OnGetItemImage()</ref>, <ref refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" kindref="member">OnGetItemAttr()</ref>, <ref refid="classwx_list_ctrl_1a23c68145cbc2a1d5fce88058a399fd0f" kindref="member">OnGetItemColumnAttr()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxListCtrl::OnGetItemImage</definition>
        <argsstring>(long item) const</argsstring>
        <name>OnGetItemImage</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>This function must be overridden in the derived class for a control with <computeroutput>wxLC_VIRTUAL</computeroutput> style having an &quot;image list&quot; (see <ref refid="classwx_list_ctrl_1a9a6b0ebe6f4b0a8fbef31c4e17fe235f" kindref="member">SetImageList()</ref>; if the control doesn&apos;t have an image list, it is not necessary to override it). </para>        </briefdescription>
        <detaileddescription>
<para>It should return the index of the items image in the controls image list or -1 for no image.</para><para>In a control with <computeroutput>wxLC_REPORT</computeroutput> style, <ref refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" kindref="member">OnGetItemImage()</ref> only gets called for the first column of each line.</para><para>The base class version always returns -1.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" kindref="member">OnGetItemText()</ref>, <ref refid="classwx_list_ctrl_1ac09eedfc42de9b02fe8f961367074ca1" kindref="member">OnGetItemColumnImage()</ref>, <ref refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" kindref="member">OnGetItemAttr()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxListCtrl::OnGetItemText</definition>
        <argsstring>(long item, long column) const</argsstring>
        <name>OnGetItemText</name>
        <param>
          <type>long</type>
          <declname>item</declname>
        </param>
        <param>
          <type>long</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>This function <bold>must</bold> be overridden in the derived class for a control with <computeroutput>wxLC_VIRTUAL</computeroutput> style. </para>        </briefdescription>
        <detaileddescription>
<para>It should return the string containing the text of the given <emphasis>column</emphasis> for the specified <computeroutput>item</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="classwx_list_ctrl_1a5ded9342e4969eeeb60d1305f75995fd" kindref="member">SetItemCount()</ref>, <ref refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" kindref="member">OnGetItemImage()</ref>, <ref refid="classwx_list_ctrl_1ac09eedfc42de9b02fe8f961367074ca1" kindref="member">OnGetItemColumnImage()</ref>, <ref refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" kindref="member">OnGetItemAttr()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/listctrl.h" line="1290" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A list control presents lists in a number of formats: list view, report view, icon view and small icon view. </para>    </briefdescription>
    <detaileddescription>
<para>In any case, elements are numbered from zero. For all these modes, the items are stored in the control and must be added to it using <ref refid="classwx_list_ctrl_1aa65a5ca4e7bd7c0e60a0522a9092a693" kindref="member">wxListCtrl::InsertItem</ref> method.</para><para>A special case of report view quite different from the other modes of the list control is a virtual control in which the items data (including text, images and attributes) is managed by the main program and is requested by the control itself only when needed which allows to have controls with millions of items without consuming much memory. To use virtual list control you must use <ref refid="classwx_list_ctrl_1a5ded9342e4969eeeb60d1305f75995fd" kindref="member">wxListCtrl::SetItemCount</ref> first and override at least <ref refid="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" kindref="member">wxListCtrl::OnGetItemText</ref> (and optionally <ref refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" kindref="member">wxListCtrl::OnGetItemImage</ref> or <ref refid="classwx_list_ctrl_1ac09eedfc42de9b02fe8f961367074ca1" kindref="member">wxListCtrl::OnGetItemColumnImage</ref> and <ref refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" kindref="member">wxListCtrl::OnGetItemAttr</ref>) to return the information about the items when the control requests it.</para><para>Virtual list control can be used as a normal one except that no operations which can take time proportional to the number of items in the control happen <ndash/> this is required to allow having a practically infinite number of items. For example, in a multiple selection virtual list control, the selections won&apos;t be sent when many items are selected at once because this could mean iterating over all the items.</para><para>Using many of <ref refid="classwx_list_ctrl" kindref="compound">wxListCtrl</ref> features is shown in the <ref refid="page_samples_1page_samples_listctrl" kindref="member">corresponding sample</ref>.</para><para>To intercept events from a list control, use the event table macros described in <ref refid="classwx_list_event" kindref="compound">wxListEvent</ref>.</para><para><bold>wxMac Note</bold>: Starting with wxWidgets 2.8, <ref refid="classwx_list_ctrl" kindref="compound">wxListCtrl</ref> uses a native implementation for report mode, and uses a generic implementation for other modes. You can use the generic implementation for report mode as well by setting the <computeroutput>mac.listctrl.always_use_generic</computeroutput> system option (see <ref refid="classwx_system_options" kindref="compound">wxSystemOptions</ref>) to 1.</para><para><linebreak/>
<heading level="2">Styles</heading>
</para><para>This class supports the following styles:</para><para> <itemizedlist>
<listitem><para>wxLC_LIST: Multicolumn list view, with optional small icons. Columns are computed automatically, i.e. you don&apos;t set columns as in <computeroutput>wxLC_REPORT</computeroutput>. In other words, the list wraps, unlike a <ref refid="classwx_list_box" kindref="compound">wxListBox</ref>. </para></listitem>
<listitem><para>wxLC_REPORT: Single or multicolumn report view, with optional header. </para></listitem>
<listitem><para>wxLC_VIRTUAL: The application provides items text on demand. May only be used with <computeroutput>wxLC_REPORT</computeroutput>. </para></listitem>
<listitem><para>wxLC_ICON: Large icon view, with optional labels. </para></listitem>
<listitem><para>wxLC_SMALL_ICON: Small icon view, with optional labels. </para></listitem>
<listitem><para>wxLC_ALIGN_TOP: Icons align to the top. Win32 default, Win32 only. </para></listitem>
<listitem><para>wxLC_ALIGN_LEFT: Icons align to the left. </para></listitem>
<listitem><para>wxLC_AUTOARRANGE: Icons arrange themselves. Win32 only. </para></listitem>
<listitem><para>wxLC_EDIT_LABELS: Labels are editable: the application will be notified when editing starts. </para></listitem>
<listitem><para>wxLC_NO_HEADER: No header in report mode. </para></listitem>
<listitem><para>wxLC_SINGLE_SEL: Single selection (default is multiple). </para></listitem>
<listitem><para>wxLC_SORT_ASCENDING: Sort in ascending order. (You must still supply a comparison callback in <ref refid="classwx_list_ctrl_1a5a36fae3701f7df7021362b0330f9640" kindref="member">wxListCtrl::SortItems</ref>.) </para></listitem>
<listitem><para>wxLC_SORT_DESCENDING: Sort in descending order. (You must still supply a comparison callback in <ref refid="classwx_list_ctrl_1a5a36fae3701f7df7021362b0330f9640" kindref="member">wxListCtrl::SortItems</ref>.) </para></listitem>
<listitem><para>wxLC_HRULES: Draws light horizontal rules between rows in report mode. </para></listitem>
<listitem><para>wxLC_VRULES: Draws light vertical rules between columns in report mode. <linebreak/>
</para></listitem>
</itemizedlist>
<linebreak/>
<heading level="2">Events emitted by this class</heading>
</para><para>The following event handler macros redirect the events to member function handlers &apos;<bold>func</bold>&apos; with prototypes like: void<nonbreakablespace/>handlerFuncName(<ref refid="classwx_list_event" kindref="compound">wxListEvent</ref>&amp;<nonbreakablespace/>event)</para><para>Event macros for events emitted by this class: <itemizedlist>
<listitem><para>EVT_LIST_BEGIN_DRAG(id,  func): Begin dragging with the left mouse button. Processes a <computeroutput>wxEVT_LIST_BEGIN_DRAG</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_BEGIN_RDRAG(id,  func): Begin dragging with the right mouse button. Processes a <computeroutput>wxEVT_LIST_BEGIN_RDRAG</computeroutput> event type. </para></listitem>
<listitem><para>EVT_BEGIN_LABEL_EDIT(id,  func): Begin editing a label. This can be prevented by calling Veto(). Processes a <computeroutput>wxEVT_LIST_BEGIN_LABEL_EDIT</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_END_LABEL_EDIT(id,  func): Finish editing a label. This can be prevented by calling Veto(). Processes a <computeroutput>wxEVT_LIST_END_LABEL_EDIT</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_DELETE_ITEM(id,  func): An item was deleted. Processes a <computeroutput>wxEVT_LIST_DELETE_ITEM</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_DELETE_ALL_ITEMS(id,  func): All items were deleted. Processes a <computeroutput>wxEVT_LIST_DELETE_ALL_ITEMS</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_ITEM_SELECTED(id,  func): The item has been selected. Processes a <computeroutput>wxEVT_LIST_ITEM_SELECTED</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_ITEM_DESELECTED(id,  func): The item has been deselected. Processes a <computeroutput>wxEVT_LIST_ITEM_DESELECTED</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_ITEM_ACTIVATED(id,  func): The item has been activated (ENTER or double click). Processes a <computeroutput>wxEVT_LIST_ITEM_ACTIVATED</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_ITEM_FOCUSED(id,  func): The currently focused item has changed. Processes a <computeroutput>wxEVT_LIST_ITEM_FOCUSED</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_ITEM_MIDDLE_CLICK(id,  func): The middle mouse button has been clicked on an item. This is only supported by the generic control. Processes a <computeroutput>wxEVT_LIST_ITEM_MIDDLE_CLICK</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_ITEM_RIGHT_CLICK(id,  func): The right mouse button has been clicked on an item. Processes a <computeroutput>wxEVT_LIST_ITEM_RIGHT_CLICK</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_KEY_DOWN(id,  func): A key has been pressed. Processes a <computeroutput>wxEVT_LIST_KEY_DOWN</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_INSERT_ITEM(id,  func): An item has been inserted. Processes a <computeroutput>wxEVT_LIST_INSERT_ITEM</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_COL_CLICK(id,  func): A column (m_col) has been left-clicked. Processes a <computeroutput>wxEVT_LIST_COL_CLICK</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_COL_RIGHT_CLICK(id,  func): A column (m_col) has been right-clicked. Processes a <computeroutput>wxEVT_LIST_COL_RIGHT_CLICK</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_COL_BEGIN_DRAG(id,  func): The user started resizing a column - can be vetoed. Processes a <computeroutput>wxEVT_LIST_COL_BEGIN_DRAG</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_COL_DRAGGING(id,  func): The divider between columns is being dragged. Processes a <computeroutput>wxEVT_LIST_COL_DRAGGING</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_COL_END_DRAG(id,  func): A column has been resized by the user. Processes a <computeroutput>wxEVT_LIST_COL_END_DRAG</computeroutput> event type. </para></listitem>
<listitem><para>EVT_LIST_CACHE_HINT(id,  func): Prepare cache for a virtual list control. Processes a <computeroutput>wxEVT_LIST_CACHE_HINT</computeroutput> event type. <linebreak/>
</para></listitem>
</itemizedlist>
<heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt; <linebreak/>
<image type="html" name="appear-listctrl-msw.png">wxMSW Appearance</image>
<linebreak/>
<linebreak/>
<image type="html" name="appear-listctrl-gtk.png">wxGTK Appearance</image>
<linebreak/>
<linebreak/>
<image type="html" name="appear-listctrl-mac.png">wxOSX Appearance</image>
<linebreak/>
</para><para><simplesect kind="see"><para><ref refid="overview_listctrl" kindref="compound">wxListCtrl Overview</ref>, <ref refid="classwx_list_view" kindref="compound">wxListView</ref>, <ref refid="classwx_list_box" kindref="compound">wxListBox</ref>, <ref refid="classwx_tree_ctrl" kindref="compound">wxTreeCtrl</ref>, <ref refid="classwx_image_list" kindref="compound">wxImageList</ref>, <ref refid="classwx_list_event" kindref="compound">wxListEvent</ref>, <ref refid="classwx_list_item" kindref="compound">wxListItem</ref>, <ref refid="classwx_editable_list_box" kindref="compound">wxEditableListBox</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3899">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="3898">
        <label>wxEvtHandler</label>
        <link refid="classwx_evt_handler"/>
        <childnode refid="3899" relation="public-inheritance">
        </childnode>
        <childnode refid="3900" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3900">
        <label>wxTrackable</label>
        <link refid="classwx_trackable"/>
      </node>
      <node id="3896">
        <label>wxControl</label>
        <link refid="classwx_control"/>
        <childnode refid="3897" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3901">
        <label>wxListView</label>
        <link refid="classwx_list_view"/>
        <childnode refid="3895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3897">
        <label>wxWindow</label>
        <link refid="classwx_window"/>
        <childnode refid="3898" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3895">
        <label>wxListCtrl</label>
        <link refid="classwx_list_ctrl"/>
        <childnode refid="3896" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3906">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="3907" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="3905">
        <label>wxEvtHandler</label>
        <link refid="classwx_evt_handler"/>
        <childnode refid="3906" relation="public-inheritance">
        </childnode>
        <childnode refid="3908" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3908">
        <label>wxTrackable</label>
        <link refid="classwx_trackable"/>
      </node>
      <node id="3903">
        <label>wxControl</label>
        <link refid="classwx_control"/>
        <childnode refid="3904" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3904">
        <label>wxWindow</label>
        <link refid="classwx_window"/>
        <childnode refid="3905" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3902">
        <label>wxListCtrl</label>
        <link refid="classwx_list_ctrl"/>
        <childnode refid="3903" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3907">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/listctrl.h" line="275" column="1" bodyfile="interface/wx/listctrl.h" bodystart="274" bodyend="1291"/>
    <listofallmembers>
      <member refid="classwx_window_1a1da8baa734b9872d0c085b86a7b5d817" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>AcceptsFocus</name></member>
      <member refid="classwx_window_1a3a0cb3bd5e82462b19df9f24ad6d9ac4" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>AcceptsFocusFromKeyboard</name></member>
      <member refid="classwx_window_1af0c30b930ecf57f94b8cfc8871e8fd94" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>AcceptsFocusRecursively</name></member>
      <member refid="classwx_window_1abf60159278059a5bb397eb8647227bb3" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>AddChild</name></member>
      <member refid="classwx_evt_handler_1a7dc3c701781f4044372049de5004137e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>AddFilter</name></member>
      <member refid="classwx_window_1a774b5b5548a6258727b5e2099e63ae9a" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>AddPendingEvent</name></member>
      <member refid="classwx_window_1a71d1daa71f1ad1f6cbaac54db7e71af3" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>AdjustForLayoutDirection</name></member>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxListCtrl</scope><name>AllocExclusive</name></member>
      <member refid="classwx_window_1aae29552806a328c6a55ef8f07647f5ba" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>AlwaysShowScrollbars</name></member>
      <member refid="classwx_list_ctrl_1a793791d7b014ffc521d2f727050a15e1" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>AppendColumn</name></member>
      <member refid="classwx_list_ctrl_1a18017016afaf8f9b564df7eb692e5e5f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Arrange</name></member>
      <member refid="classwx_list_ctrl_1abea2212faca2067fc5a8b8ce261906f2" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>AssignImageList</name></member>
      <member refid="classwx_window_1ab4cea6ace96193b5c4282e097a6fbfee" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>BeginRepositioningChildren</name></member>
      <member refid="classwx_evt_handler_1a0f30c8fa5583b4a5f661897d63de3b62" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Bind</name></member>
      <member refid="classwx_evt_handler_1a03cc68ca201fb79c7e837919025be71a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Bind</name></member>
      <member refid="classwx_window_1a11b5d8d94efd0ab52eb2c95a6aa88cdf" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CacheBestSize</name></member>
      <member refid="classwx_evt_handler_1a63c7351618fd77330d80a250b3719519" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CallAfter</name></member>
      <member refid="classwx_evt_handler_1a910416e4d0b1f38cec02213b8a0c6a12" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CallAfter</name></member>
      <member refid="classwx_window_1acc4e456ed056a27ec61cd296b96c1e3e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CanAcceptFocus</name></member>
      <member refid="classwx_window_1ade15bb13dc6d51a8e6ecd49eb3f0f99b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CanAcceptFocusFromKeyboard</name></member>
      <member refid="classwx_window_1a6b5bbd3bf890f98897187879152ad97a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CanScroll</name></member>
      <member refid="classwx_window_1a64f7f6fb75bf4b7281e1d33542d523c7" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>CanSetTransparent</name></member>
      <member refid="classwx_window_1a5c72c6260a73ef77bb0b1f7ec85fcfef" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CaptureMouse</name></member>
      <member refid="classwx_window_1a06c0ecb262995b40083bfb446a6cff99" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Center</name></member>
      <member refid="classwx_window_1a2dc4e0a85d33fc55cc9650eaea1da0a4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CenterOnParent</name></member>
      <member refid="classwx_window_1a4a1819eeee3f2143cdde4f329ffde787" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Centre</name></member>
      <member refid="classwx_window_1ab8e9b91b0e2db344fd71259616dfd433" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>CentreOnParent</name></member>
      <member refid="classwx_list_ctrl_1a834e6ee38695323f882ad2ee5cc7a979" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ClearAll</name></member>
      <member refid="classwx_window_1a61e833684ee5c89775e91e88be1a9a52" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>ClearBackground</name></member>
      <member refid="classwx_window_1af5e852c8695297c0328f1dfe3908605a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ClientToScreen</name></member>
      <member refid="classwx_window_1add6f5472d0d8fe0074145a886568721c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ClientToScreen</name></member>
      <member refid="classwx_window_1a5c72ca7de40d4e99aff55e79aad3962e" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>ClientToWindowSize</name></member>
      <member refid="classwx_object_1a436fc8fe68cf8a31000296d9cd3d2427" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>CloneRefData</name></member>
      <member refid="classwx_window_1a3e44f4a494fc9ef4346c4fba70c8de0c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Close</name></member>
      <member refid="classwx_control_1a8cd7ac81debaf506d6d146528c3d9a82" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Command</name></member>
      <member refid="classwx_evt_handler_1a78719e8b82c9f9c6e4056b3449df1943" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Connect</name></member>
      <member refid="classwx_evt_handler_1a1e8b5fc4c7e7f6d32d40bc00d4108ba4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Connect</name></member>
      <member refid="classwx_evt_handler_1aa290d9b67348e74c1da8497955a4e35c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Connect</name></member>
      <member refid="classwx_window_1a3dbe034120d742c4f5f6d64dc5d69590" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ConvertDialogToPixels</name></member>
      <member refid="classwx_window_1ad70d63964459bb21f81bc0b1f09e84f4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ConvertDialogToPixels</name></member>
      <member refid="classwx_window_1a321de67666eff37b39556802c8029201" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ConvertPixelsToDialog</name></member>
      <member refid="classwx_window_1a533552c4673c7a11f05bf9261b4dff5c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ConvertPixelsToDialog</name></member>
      <member refid="classwx_list_ctrl_1a5b13e700b9957677468d63558d73d5df" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Create</name></member>
      <member refid="classwx_window_1a95b7ca8faa033f5ab35458887c07bf38" prot="public" virt="non-virtual" ambiguityscope="wxWindow::"><scope>wxListCtrl</scope><name>Create</name></member>
      <member refid="classwx_object_1a3f4f497c65cef611e121c41f21dd5ccc" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>CreateRefData</name></member>
      <member refid="classwx_list_ctrl_1a02a7ce5ad3eb09cd1b5af937f118a9e4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>DeleteAllColumns</name></member>
      <member refid="classwx_list_ctrl_1aa9fe817f4a8fd36fca7e8cd5e9818291" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>DeleteAllItems</name></member>
      <member refid="classwx_list_ctrl_1a6d30022b48a69999ceafa8c6420bba5e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>DeleteColumn</name></member>
      <member refid="classwx_list_ctrl_1aa4d9e2fd4e35137f970b65f0d60b6058" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>DeleteItem</name></member>
      <member refid="classwx_evt_handler_1a6e7f9cf4ebd0623c1d94979855d096f8" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>DeletePendingEvents</name></member>
      <member refid="classwx_window_1a6bf0c5be864544d9ce0560087667b7fc" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Destroy</name></member>
      <member refid="classwx_window_1aff47b32c8d42d515ea0bb6a6c2fea917" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>DestroyChildren</name></member>
      <member refid="classwx_window_1a26d7329a9a753fa0445501f01f66c41e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Disable</name></member>
      <member refid="classwx_evt_handler_1a13061cf0ed01ac10a804ac057ef4bdbc" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Disconnect</name></member>
      <member refid="classwx_evt_handler_1a2f171e19444b9c4034c5e11f24fa9c91" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Disconnect</name></member>
      <member refid="classwx_evt_handler_1a16a6f823853e4b74b43dd9a2cf3abee6" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Disconnect</name></member>
      <member refid="classwx_window_1a2d10b472a4962d1c852c83d55252c44b" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>DoCentre</name></member>
      <member refid="classwx_window_1ae07ab0b5cabb750f4e396b6c95e4abf7" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>DoGetBestClientHeight</name></member>
      <member refid="classwx_window_1a68f3ec28a29b2a514b20c3e80255d82e" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>DoGetBestClientSize</name></member>
      <member refid="classwx_window_1ac68cb9912dc456e2faa8c745b2437b75" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>DoGetBestClientWidth</name></member>
      <member refid="classwx_window_1aac6408f1814dce3f8332cc69fe5104f1" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>DoGetBestSize</name></member>
      <member refid="classwx_window_1ae8a84a80645e99f4d24a22e5c386f626" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>DoUpdateWindowUI</name></member>
      <member refid="classwx_window_1a7e7015bc61bd79b6821d2dccaecf9eda" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>DragAcceptFiles</name></member>
      <member refid="classwx_list_ctrl_1a95b0ed5ccc8bcf8640534db5977bdd7c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>EditLabel</name></member>
      <member refid="classwx_control_1a0bb834cae2a8986aceddb89f84ef4ed1" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Ellipsize</name></member>
      <member refid="classwx_window_1a4e933aa891f42fbb3b87438057c573af" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Enable</name></member>
      <member refid="classwx_list_ctrl_1a274e98c1c5101725bbdca9b19d8678a4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>EnableAlternateRowColours</name></member>
      <member refid="classwx_list_ctrl_1a88057252d356c0b6f9a6eaaac7a91ceb" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>EnableBellOnNoMatch</name></member>
      <member refid="classwx_list_ctrl_1a037b5c94e79661110663d542f093d3a4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>EndEditLabel</name></member>
      <member refid="classwx_window_1a1203fbd238d781253b44e0e459532301" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>EndRepositioningChildren</name></member>
      <member refid="classwx_list_ctrl_1a59373c7c7b3b02522c40f97dd6493534" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>EnsureVisible</name></member>
      <member refid="classwx_control_1abdbd9c0684856546671e759dd95b23d4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>EscapeMnemonics</name></member>
      <member refid="classwx_window_1a777258379a3eef1b0530f12db6b77cab" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindFocus</name></member>
      <member refid="classwx_list_ctrl_1ad8d64b6d1b4af0df31e61ae9521388d4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindItem</name></member>
      <member refid="classwx_list_ctrl_1ab027c0950e2d425b86461324765e8d43" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindItem</name></member>
      <member refid="classwx_list_ctrl_1ae46c0aa927816ae5b10afeea7a040e47" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindItem</name></member>
      <member refid="classwx_window_1a619b5743645b86054aa3fff12ba4c7ce" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindWindow</name></member>
      <member refid="classwx_window_1a3b2f2c9b6346bdb3dcba0edfd9a7f224" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindWindow</name></member>
      <member refid="classwx_window_1a101201b12ccd5fba49fa06ed19b5c6fb" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindWindowById</name></member>
      <member refid="classwx_window_1ab8eb148fffae109e0fac86e88d569670" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindWindowByLabel</name></member>
      <member refid="classwx_window_1adbe4eea02f615313c12a2c00557a44c3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>FindWindowByName</name></member>
      <member refid="classwx_window_1a2bf38a6cbd1f82fb46f274396f482994" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Fit</name></member>
      <member refid="classwx_window_1a55aca401aab29d59f7cc53f89ba2e38d" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>FitInside</name></member>
      <member refid="classwx_window_1a15c678314cfc1d807196bc298b713ed3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Freeze</name></member>
      <member refid="classwx_window_1aefc02d7275010ebb8d5b66569e7287c4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetAcceleratorTable</name></member>
      <member refid="classwx_window_1ae0469b554e9c501b356b3ed4b6d8a3af" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetAccessible</name></member>
      <member refid="classwx_window_1a64e3f936ab812d24966827ea4e0f15c0" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetAutoLayout</name></member>
      <member refid="classwx_window_1af51668ec32e9e44db45574a15ec215b4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetBackgroundColour</name></member>
      <member refid="classwx_window_1a4f09e6a20858a0667df3dda44715d6b9" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetBackgroundStyle</name></member>
      <member refid="classwx_window_1a9ec151255cbb44935136d9bbff31a082" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetBestHeight</name></member>
      <member refid="classwx_window_1ae507a81d682023383e465d8e913595b6" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetBestSize</name></member>
      <member refid="classwx_window_1a1e4b09c35c0e5495905da45c1580709d" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetBestVirtualSize</name></member>
      <member refid="classwx_window_1a5c797a38418a6f2fb79f800112ec73b0" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetBestWidth</name></member>
      <member refid="classwx_window_1a42908ba076f2a93ee81201dc151c3b23" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetBorder</name></member>
      <member refid="classwx_window_1a94e3a0ce6c1aae57562678996adbf2fd" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetBorder</name></member>
      <member refid="classwx_window_1a483d3f73925bd38c3964dad058672f0a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetCapture</name></member>
      <member refid="classwx_window_1a2ee3eba6dbfb37944ed0ce03383bfc34" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetCaret</name></member>
      <member refid="classwx_window_1aa488520238094f858bea3c3a2c6b9809" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetCharHeight</name></member>
      <member refid="classwx_window_1a8f92c15635a44b85392d16f5906c31ef" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetCharWidth</name></member>
      <member refid="classwx_window_1ad500085ad0511879b5e018706c91a494" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetChildren</name></member>
      <member refid="classwx_window_1afcd1cf1f16e375d00b8d0885997adc90" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetChildren</name></member>
      <member refid="classwx_window_1a170d85e4aa0cbacbfcdd0728120e1417" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetClassDefaultAttributes</name></member>
      <member refid="classwx_object_1ae6d365f2556b26767ced8410c5e839d0" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetClassInfo</name></member>
      <member refid="classwx_window_1a4a1b567002d1039bc630885fc09808ae" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetClientAreaOrigin</name></member>
      <member refid="classwx_evt_handler_1a291bc92c1bea8abfff276a8e333d46db" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetClientData</name></member>
      <member refid="classwx_evt_handler_1a371742bda1686e82065f3a1f2acb31c8" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetClientObject</name></member>
      <member refid="classwx_window_1a5c6428c6aa8634b5c5963d1d0eaa75c7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetClientRect</name></member>
      <member refid="classwx_window_1ad34d4bbd6d3064aa56e7a2cc3ee97be3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetClientSize</name></member>
      <member refid="classwx_window_1a13d04f24ab78611f895bc40776118e90" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetClientSize</name></member>
      <member refid="classwx_list_ctrl_1a48e4808a48ba5f9b349ac6f725a6d8a4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetColumn</name></member>
      <member refid="classwx_list_ctrl_1a48f2f5b4f062e3372d10c38542fdfc1a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetColumnCount</name></member>
      <member refid="classwx_list_ctrl_1a79411a2c63b0bc9bd6d9d48838aa86c1" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetColumnIndexFromOrder</name></member>
      <member refid="classwx_list_ctrl_1aab1126b7921769b13f634a7f3a9a88a9" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetColumnOrder</name></member>
      <member refid="classwx_list_ctrl_1aa239433ed39608fba50692a2100c17cc" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetColumnsOrder</name></member>
      <member refid="classwx_list_ctrl_1a1dee53dfab57448b307e50394caa581d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetColumnWidth</name></member>
      <member refid="classwx_window_1ade068146db3eea2adcde2533de17473b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetConstraints</name></member>
      <member refid="classwx_window_1aec50a3057efbfb35ad16f433603f6f00" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetContainingSizer</name></member>
      <member refid="classwx_window_1a7070700104b0f739260a8d803c64e0e1" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetContentScaleFactor</name></member>
      <member refid="classwx_list_ctrl_1af3e656c293986ee6cc397bdc517ce5f7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetCountPerPage</name></member>
      <member refid="classwx_window_1aa467591bdb0ae14a625045553e62a120" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetCursor</name></member>
      <member refid="classwx_window_1a377de92ac032b60a9241fab88efdbf11" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetDefaultAttributes</name></member>
      <member refid="classwx_window_1ae4bec3096f7e13eec8a537aa24cd6112" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetDropTarget</name></member>
      <member refid="classwx_list_ctrl_1a6fa5ceab722dee2c98537e648e39413e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetEditControl</name></member>
      <member refid="classwx_window_1aa88f6c4946d1ae4821aca652efbf7c62" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetEffectiveMinSize</name></member>
      <member refid="classwx_window_1ad54b0c1662006da89d7e5bf8a64f93eb" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetEventHandler</name></member>
      <member refid="classwx_evt_handler_1a7742d81c5eb7849a0ad75b9de8575153" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetEvtHandlerEnabled</name></member>
      <member refid="classwx_window_1a0db5cd18ab5166b44da9d07f92bb5070" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetExtraStyle</name></member>
      <member refid="classwx_window_1af25f8a799106d61b50d3ee796ba43728" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetFont</name></member>
      <member refid="classwx_window_1ad9a607b86d9175d395f245ecbe00f38b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetForegroundColour</name></member>
      <member refid="classwx_window_1abe0d47e5d63394b098bdad64eb1a60d2" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetGrandParent</name></member>
      <member refid="classwx_window_1a108426e918ac377fef17662885a7a459" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetHandle</name></member>
      <member refid="classwx_window_1acb28971fe25abd1f5c6d768e203a042a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetHelpText</name></member>
      <member refid="classwx_window_1a7d11a419fede5049d7c12c337e5f5dfc" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetHelpTextAtPoint</name></member>
      <member refid="classwx_window_1a79037f68b290bba5811628ec67bf3b24" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetId</name></member>
      <member refid="classwx_list_ctrl_1a8dea93f1590fe0c06affe607f20e9674" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetImageList</name></member>
      <member refid="classwx_list_ctrl_1a74369e6c808beefe37ff5a6fe141784f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItem</name></member>
      <member refid="classwx_list_ctrl_1a6f95294168e46663aaa3ab1712429649" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemBackgroundColour</name></member>
      <member refid="classwx_list_ctrl_1a8d09520c767e1b09db6586bea6afa77a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemCount</name></member>
      <member refid="classwx_list_ctrl_1af8413e60f706e59c5340bf37b0c12f95" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemData</name></member>
      <member refid="classwx_list_ctrl_1ac51bdea8ff28404780f43d8d12bbf39f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemFont</name></member>
      <member refid="classwx_list_ctrl_1a0215890b6e8ac6ae49730d01f3f8ffca" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemPosition</name></member>
      <member refid="classwx_list_ctrl_1a7672f86c151cfa91c0df7d31c6509fea" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemRect</name></member>
      <member refid="classwx_list_ctrl_1a2b50b4871a486561192e5ecb16658dc5" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemSpacing</name></member>
      <member refid="classwx_list_ctrl_1adfe1f96d1262dbfb51a79c31f4c6a77f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemState</name></member>
      <member refid="classwx_list_ctrl_1af6030eb517baa0c331aa4424f53e915f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemText</name></member>
      <member refid="classwx_list_ctrl_1a52400b14563d1ff8fa7e9728a5bbf3ae" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetItemTextColour</name></member>
      <member refid="classwx_control_1a9d03cd7f44c4bb1722f39fbc7a5d8cbd" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetLabel</name></member>
      <member refid="classwx_control_1a4ec6a7ee61553cd1df77d50491cee820" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetLabelText</name></member>
      <member refid="classwx_control_1ae892fefe6b88168c158e11e975633665" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetLabelText</name></member>
      <member refid="classwx_window_1afafd17cbb5dd6d899b25360255e0bdae" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetLayoutDirection</name></member>
      <member refid="classwx_window_1a6690ee82a5a246e070bf0a7dc4bcb5b3" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetMaxClientSize</name></member>
      <member refid="classwx_window_1a98bbe53eddb91b508b0082783402d954" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetMaxHeight</name></member>
      <member refid="classwx_window_1a107966aa1b2d50107b3b95cf0d7d9901" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetMaxSize</name></member>
      <member refid="classwx_window_1afde7288b24e48f2d0b5d2c7376f10426" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetMaxWidth</name></member>
      <member refid="classwx_window_1a24d22aacd834cbe6cd5b252fa91c3bd9" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetMinClientSize</name></member>
      <member refid="classwx_window_1a81bfd762272d33850c0511d65d896ca3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetMinHeight</name></member>
      <member refid="classwx_window_1a90ce6ffc8e0af7476157c9e1e6b616df" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetMinSize</name></member>
      <member refid="classwx_window_1a327e1a8054d604a34cc5473a8c415e4d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetMinWidth</name></member>
      <member refid="classwx_window_1a93b9ec7d9eaf152c17f3bf2698551ef4" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetName</name></member>
      <member refid="classwx_evt_handler_1addedbed1c9f970c2b1e2893a42805b6a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetNextHandler</name></member>
      <member refid="classwx_list_ctrl_1a4d6793dc14feadac68516da9bf21cd67" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetNextItem</name></member>
      <member refid="classwx_window_1ad256ad684063935d897956a87c932b38" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetNextSibling</name></member>
      <member refid="classwx_window_1a6cd311a6c6ca7329714b969834f679f9" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetParent</name></member>
      <member refid="classwx_window_1a9b7de6ea85ca926b668ba0682a61a93e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetPopupMenuSelectionFromUser</name></member>
      <member refid="classwx_window_1a00f5cb3cac003205317a565a33d4bb27" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetPopupMenuSelectionFromUser</name></member>
      <member refid="classwx_window_1ac2eece00a4b4b83e1433b59a5d31584f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetPosition</name></member>
      <member refid="classwx_window_1abfeeca6db664c24603f6371811397e0d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetPosition</name></member>
      <member refid="classwx_evt_handler_1a69bfde9623d89eb91e363c53616e4587" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetPreviousHandler</name></member>
      <member refid="classwx_window_1a02b3a109f926c86fa1f34a00c1b5ec67" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetPrevSibling</name></member>
      <member refid="classwx_window_1a68e83a724887b18525fdbd947b2d8c88" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetRect</name></member>
      <member refid="classwx_object_1af3c6c76a775864832f1536d3c0de3a2b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetRefData</name></member>
      <member refid="classwx_window_1a285a81f00ed59fa09938343708938566" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetScreenPosition</name></member>
      <member refid="classwx_window_1a5786c420fd2958bde726c923621700aa" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetScreenPosition</name></member>
      <member refid="classwx_window_1ae8f6c4a201650ad63bb5ebe4f35eb41e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetScreenRect</name></member>
      <member refid="classwx_window_1add5f4e225e16154f9148451a7d32d0b3" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetScrollPos</name></member>
      <member refid="classwx_window_1a23b41cf939ab67a002d8f404ac4cf76b" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetScrollRange</name></member>
      <member refid="classwx_window_1ac34f47fef73e3a178e8c335aa38ce567" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetScrollThumb</name></member>
      <member refid="classwx_list_ctrl_1abfeaae84557fbbbf67ae1703dc4d61d9" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetSelectedItemCount</name></member>
      <member refid="classwx_window_1a36ea282508dd55d6f3981ec205ed0449" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetSize</name></member>
      <member refid="classwx_window_1a36bf1ac809da1b0cd9c67fd806c4d9b5" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetSize</name></member>
      <member refid="classwx_control_1a252c7408d6dfa8d70e8dbe88cea9695d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetSizeFromTextSize</name></member>
      <member refid="classwx_control_1a4d9169af074418aa3528f7b5fca61f94" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetSizeFromTextSize</name></member>
      <member refid="classwx_window_1a01e9d43576615166ee309f4358bdd26d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetSizer</name></member>
      <member refid="classwx_list_ctrl_1ac528fabd73e6947a0760f804d53e9a30" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetSubItemRect</name></member>
      <member refid="classwx_list_ctrl_1a4ea334b0fdc8b16e5aaf5ab3d5a10395" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetTextColour</name></member>
      <member refid="classwx_window_1a4220668e42f3a173bf29d335da4db2c3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetTextExtent</name></member>
      <member refid="classwx_window_1a69fc79069821a633eba9c5d917fd8b7b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetTextExtent</name></member>
      <member refid="classwx_window_1a578145344f92cfee755a9c87f6703432" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetThemeEnabled</name></member>
      <member refid="classwx_window_1a44eecb46979b528c184e26ce6c52b3fa" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetToolTip</name></member>
      <member refid="classwx_window_1a7e7c9a92f9efbb47073704646db1344e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetToolTipText</name></member>
      <member refid="classwx_list_ctrl_1a837666df6594a128cb6d1eca00fadbb7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetTopItem</name></member>
      <member refid="classwx_window_1a23370688a951ed60ac25146af854d2ec" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetUpdateClientRect</name></member>
      <member refid="classwx_window_1a522f73fd32e54b11466284acc43f76f3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetUpdateRegion</name></member>
      <member refid="classwx_window_1a6a332586346cb9ece4a8fe058a7b88c4" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetValidator</name></member>
      <member refid="classwx_list_ctrl_1ab1032138f5ff418bbe2e13ab5ea5d659" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetViewRect</name></member>
      <member refid="classwx_window_1a557f92e6c66b6654c95315d4461d0e11" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_window_1a24cefbb69173899ec4d62460b2932ed9" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetVirtualSize</name></member>
      <member refid="classwx_window_1a21c97d5bcf61c4c664bd33066f5567b1" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetWindowBorderSize</name></member>
      <member refid="classwx_window_1a418007123fec131b47d9841ac6d34891" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetWindowStyle</name></member>
      <member refid="classwx_window_1ad67a731cd937a21e561593d4a0c44979" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>GetWindowStyleFlag</name></member>
      <member refid="classwx_window_1a9027305e391de617259407f2c12a54bf" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>GetWindowVariant</name></member>
      <member refid="classwx_window_1a89d1b079de97aac170e999692095872c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>HandleAsNavigationKey</name></member>
      <member refid="classwx_window_1a89816f1b78c125c59418463caea35c9a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>HandleWindowEvent</name></member>
      <member refid="classwx_window_1a41e1b77ac82c7420d34b8030d5f26046" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>HasCapture</name></member>
      <member refid="classwx_window_1aeee5333e672a3a510db48d2af37ddee9" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>HasExtraStyle</name></member>
      <member refid="classwx_window_1a3d1d00b4cd51fa3c187e9d609d022aa4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>HasFlag</name></member>
      <member refid="classwx_window_1adaf042744bdbb8a5f9feccbe7749468a" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>HasFocus</name></member>
      <member refid="classwx_window_1a55c7b73596f2eec2694e8f512013ee81" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>HasMultiplePages</name></member>
      <member refid="classwx_window_1ae50c259b165d9366729734bc124cf184" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>HasScrollbar</name></member>
      <member refid="classwx_window_1ab9cbcb6d6f4a272c2f0342e69a13b59a" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>HasTransparentBackground</name></member>
      <member refid="classwx_window_1a7ed103df04014cb3c59c6a3fb4d95328" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Hide</name></member>
      <member refid="classwx_window_1a5326fbb26557a224507a1c06e5640e89" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>HideWithEffect</name></member>
      <member refid="classwx_list_ctrl_1ac75506f2203ffa9fbebcd8ecf240f27c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>HitTest</name></member>
      <member refid="classwx_window_1ae8705e241daca73105921b72326258b5" prot="public" virt="non-virtual" ambiguityscope="wxControl::"><scope>wxListCtrl</scope><name>HitTest</name></member>
      <member refid="classwx_window_1ace65f76df096662bd15722d10c1905c9" prot="public" virt="non-virtual" ambiguityscope="wxControl::"><scope>wxListCtrl</scope><name>HitTest</name></member>
      <member refid="classwx_window_1a9fd5b6520c1b30eb8e82bb5d56bc24c0" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>InformFirstDirection</name></member>
      <member refid="classwx_window_1a6b1bf9e099704e7a493b8c4666b1f7f7" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>InheritAttributes</name></member>
      <member refid="classwx_window_1af05b95cfeed0bee6f44797572367b26e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InheritsBackgroundColour</name></member>
      <member refid="classwx_window_1aa90a260c0a835a133043460b7d0024a8" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>InitDialog</name></member>
      <member refid="classwx_list_ctrl_1ad05564e94d55f56bf7b10f960acb3e20" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InReportView</name></member>
      <member refid="classwx_list_ctrl_1a75337fbb43f767eafc82d47966943141" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InsertColumn</name></member>
      <member refid="classwx_list_ctrl_1abd8d55b0f89e9a63372e3837c19c32d8" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InsertColumn</name></member>
      <member refid="classwx_list_ctrl_1aa65a5ca4e7bd7c0e60a0522a9092a693" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InsertItem</name></member>
      <member refid="classwx_list_ctrl_1a66128e3a4806a7b545e83b6de0f49ed5" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InsertItem</name></member>
      <member refid="classwx_list_ctrl_1a5a01ced78c631b056d781cf6f2ae6626" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InsertItem</name></member>
      <member refid="classwx_list_ctrl_1ad06b98bdb32f5d3b15703db8e8f5f5c3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InsertItem</name></member>
      <member refid="classwx_window_1ae1b56ca87d8590ee5e576012229a380a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>InvalidateBestSize</name></member>
      <member refid="classwx_window_1a5fd3fba5d43efb67a834c0483a9c3d0e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsBeingDeleted</name></member>
      <member refid="classwx_window_1ab7f60a0c4acdd832a46aabf0d09cd54a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsDescendant</name></member>
      <member refid="classwx_window_1abe7a8c61796262b517f5e0765374cc2b" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>IsDoubleBuffered</name></member>
      <member refid="classwx_window_1a0c186513884fb2020c6af3c62f0913d2" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsEnabled</name></member>
      <member refid="classwx_window_1a687120c4b7095481bbc6d483187d0c56" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1afde1844b856787b95afbb686aaaa206d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1a3017e9cdde376d567ee37b2a96913eca" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1ac4653d89376b9e88afbec8c342d32530" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsExposed</name></member>
      <member refid="classwx_window_1ad78eb073c4fe8271caa4c65301a24ee2" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsFocusable</name></member>
      <member refid="classwx_window_1adf34f121a9a94fd7159a8818355f2b67" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsFrozen</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsKindOf</name></member>
      <member refid="classwx_window_1a77443cb35d15b5006b96a8c5ea0944f6" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>IsRetained</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsSameAs</name></member>
      <member refid="classwx_window_1abf4f5068ebf648197ed9ca8ca58f38df" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>IsScrollbarAlwaysShown</name></member>
      <member refid="classwx_window_1ad3544f9c364b7952ac0676217e400061" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>IsShown</name></member>
      <member refid="classwx_window_1ac2722709783e89e76b2eeb7f9f93236a" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>IsShownOnScreen</name></member>
      <member refid="classwx_window_1a1c6a83e5421bb7cfb8a9ad804d251b65" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsThisEnabled</name></member>
      <member refid="classwx_window_1afe04dba2155b58429d6c4e0a5a5e1664" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>IsTopLevel</name></member>
      <member refid="classwx_window_1a21c6e2be327062520d9d0aae55b1e8b0" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>IsTransparentBackgroundSupported</name></member>
      <member refid="classwx_evt_handler_1ac0734578a8d929b8b0be440ce0b53ad6" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsUnlinked</name></member>
      <member refid="classwx_list_ctrl_1a69ec74781f9eeee8b1edda6f984be85d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>IsVirtual</name></member>
      <member refid="classwx_window_1a1b143c3e72bd0af533b76db4830a6113" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Layout</name></member>
      <member refid="classwx_window_1ade808784f0e64d9985e2f279b5ca8c02" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>LineDown</name></member>
      <member refid="classwx_window_1afc0816a174ceee6d36d1995c6824a273" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>LineUp</name></member>
      <member refid="classwx_window_1a124944524f36b71385dad8fddaad8ded" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Lower</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxListCtrl</scope><name>m_refData</name></member>
      <member refid="classwx_window_1ab1cb98c8d25b9e6ff7b706b1446c3df7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Move</name></member>
      <member refid="classwx_window_1a22a22c1e23ca05776707e7999d8047fe" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Move</name></member>
      <member refid="classwx_window_1a79e66079125e8420de269811bdb6f2b6" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>MoveAfterInTabOrder</name></member>
      <member refid="classwx_window_1af2b92f61cd9f9e2e0efe4cce307e25b1" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>MoveBeforeInTabOrder</name></member>
      <member refid="classwx_window_1a86904f6785df4af6036b33383490a805" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Navigate</name></member>
      <member refid="classwx_window_1aa58039c8fc65e19160becf510ee1d1d5" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>NavigateIn</name></member>
      <member refid="classwx_window_1a8175da594e6045635a1d1cfe775cdddb" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>NewControlId</name></member>
      <member refid="classwx_list_ctrl_1ad9aa2b87ac8ab53eae2a7c7bad5e1005" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>OnGetItemAttr</name></member>
      <member refid="classwx_list_ctrl_1a23c68145cbc2a1d5fce88058a399fd0f" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>OnGetItemColumnAttr</name></member>
      <member refid="classwx_list_ctrl_1ac09eedfc42de9b02fe8f961367074ca1" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>OnGetItemColumnImage</name></member>
      <member refid="classwx_list_ctrl_1aff527069cbb6a6def46dc314bcc81cc8" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>OnGetItemImage</name></member>
      <member refid="classwx_list_ctrl_1a9bba0df2697bfe237920d035500b9909" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>OnGetItemText</name></member>
      <member refid="classwx_window_1a6b5654c0c6c6245d592c279521f7099c" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>OnInternalIdle</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>operator new</name></member>
      <member refid="classwx_window_1a61e78cb48ece3e9e989e37b475ac1e35" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PageDown</name></member>
      <member refid="classwx_window_1aa7c2bbc480d8863d9f139c01d7abc1b1" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PageUp</name></member>
      <member refid="classwx_window_1ac45c1f4cf96c70779764c14cf528790b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PopEventHandler</name></member>
      <member refid="classwx_window_1a8f715d238cf74a845488b0e2645e98df" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PopupMenu</name></member>
      <member refid="classwx_window_1a834bcdfd41f5e5370ebd9ea401c92900" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PopupMenu</name></member>
      <member refid="classwx_window_1ab1943463e6661f97e072b43337c6cc09" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PostSizeEvent</name></member>
      <member refid="classwx_window_1aa080d8dcda58bcc6ea2abd8bea592e3e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PostSizeEventToParent</name></member>
      <member refid="classwx_window_1a5ebdbd87c28644149a07f1742996df96" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>ProcessEvent</name></member>
      <member refid="classwx_evt_handler_1ac0f5d2cb29a04c1f7f82eb6b351f79fb" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ProcessEventLocally</name></member>
      <member refid="classwx_window_1a7cbee38944dab02d753a4dba74230443" prot="protected" virt="non-virtual"><scope>wxListCtrl</scope><name>ProcessPendingEvents</name></member>
      <member refid="classwx_window_1a9350b3a9c2e380707eaea92cedad12a5" prot="protected" virt="non-virtual"><scope>wxListCtrl</scope><name>ProcessThreadEvent</name></member>
      <member refid="classwx_window_1a0a76891d726ad5f9a729e27e4eab2b57" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ProcessWindowEvent</name></member>
      <member refid="classwx_window_1a0a11aa4a50491d051f947e2618e52178" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ProcessWindowEventLocally</name></member>
      <member refid="classwx_window_1a398c11ab9af7956067a964f560d1978c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>PushEventHandler</name></member>
      <member refid="classwx_window_1a69e450f21b0d7013269ec1a4771f043b" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>QueueEvent</name></member>
      <member refid="classwx_window_1a54808c933f22a891c5db646f6209fa4d" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Raise</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Ref</name></member>
      <member refid="classwx_window_1a29dc7251746154c821b17841b9877830" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Refresh</name></member>
      <member refid="classwx_list_ctrl_1ab8a88dac752a883ad4e02bb42a7d5015" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>RefreshItem</name></member>
      <member refid="classwx_list_ctrl_1aaa6b0180a9dcdf46be8ec4baffc61efc" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>RefreshItems</name></member>
      <member refid="classwx_window_1ab0ae6b9898cd261c39ebeb2891aa3d67" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>RefreshRect</name></member>
      <member refid="classwx_window_1a53ca57872dac5851ea6ba55a494b899b" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>RegisterHotKey</name></member>
      <member refid="classwx_window_1adcc538819c11ecb3bd3e4e5d13c5ba7a" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ReleaseMouse</name></member>
      <member refid="classwx_window_1acee332ed4368d26e8bc3db5767c1240a" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>RemoveChild</name></member>
      <member refid="classwx_window_1aacbfe424fa527966b954229a1db96ab5" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>RemoveEventHandler</name></member>
      <member refid="classwx_evt_handler_1a67a57b759c447b121bf70a7c9804c8f2" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>RemoveFilter</name></member>
      <member refid="classwx_control_1ab7df4ca0dfde3a6409833cf470ee02e6" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>RemoveMnemonics</name></member>
      <member refid="classwx_window_1a7977b749284e65aecfed2ce146799cb9" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Reparent</name></member>
      <member refid="classwx_window_1a0f9814efc50316b4c57b7ec2bf78b716" prot="protected" virt="non-virtual"><scope>wxListCtrl</scope><name>SafelyProcessEvent</name></member>
      <member refid="classwx_window_1a09aca554d41d6e771d3dc72f26b9cacc" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ScreenToClient</name></member>
      <member refid="classwx_window_1a5f4dab599fda780823841bb2fe5f2f99" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ScreenToClient</name></member>
      <member refid="classwx_window_1aa5c5b683bd11a0d9771bd2fcdf643c64" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>ScrollLines</name></member>
      <member refid="classwx_list_ctrl_1a7e620aa7cc9953d5e98846b130034135" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ScrollList</name></member>
      <member refid="classwx_window_1adc0ed5e1c4925223cb901ced14b8343d" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>ScrollPages</name></member>
      <member refid="classwx_window_1ab7be4956ff22da37fff2b8aaa581045c" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>ScrollWindow</name></member>
      <member refid="classwx_evt_handler_1a3c07426130d2868a5ae7fa918a251f49" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SearchEventTable</name></member>
      <member refid="classwx_window_1a7e21eb6a0819281b29134a6432d064fe" prot="protected" virt="non-virtual"><scope>wxListCtrl</scope><name>SendDestroyEvent</name></member>
      <member refid="classwx_window_1a1afc1653413957537073c074dcc3eade" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SendIdleEvents</name></member>
      <member refid="classwx_window_1a237f739b21937d3e8f1bff5fa82ba4c2" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SendSizeEvent</name></member>
      <member refid="classwx_window_1af7987987978fd8a93df88b29b19a6388" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SendSizeEventToParent</name></member>
      <member refid="classwx_window_1a0af5e9aa4dee6a4e92c0700f92605642" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetAcceleratorTable</name></member>
      <member refid="classwx_window_1a413220ead41f05a2ec2cfe10b3d573df" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetAccessible</name></member>
      <member refid="classwx_list_ctrl_1a7ed18be1794a1db88f264cf641b738da" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetAlternateRowColour</name></member>
      <member refid="classwx_window_1ad369fe1db5c20f9d9edff7b5eb1f7226" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetAutoLayout</name></member>
      <member refid="classwx_list_ctrl_1a935412e9017c3fe511514cfc360a3117" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetBackgroundColour</name></member>
      <member refid="classwx_window_1af14f8fd2ed2d30a9bbb5d4f9fd6594ec" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetBackgroundStyle</name></member>
      <member refid="classwx_window_1a2b8b2e99231a0ec1a05f5066f1b7f3d8" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetCanFocus</name></member>
      <member refid="classwx_window_1acfef5e1cada92c73e2937b84ff57ff57" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetCaret</name></member>
      <member refid="classwx_evt_handler_1a82c74f2cebfa02cb3c1563d459c872bf" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetClientData</name></member>
      <member refid="classwx_evt_handler_1af1e33a06087b8b2ddc43c7d15a91b326" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetClientObject</name></member>
      <member refid="classwx_window_1aa59f715217fffa5bcf14cd97f92e7840" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetClientSize</name></member>
      <member refid="classwx_window_1ab2aadc857ee7f55f47ab9a8669e3beb7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetClientSize</name></member>
      <member refid="classwx_window_1a582d4d1f60a3f777627773b2da0bb2ef" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetClientSize</name></member>
      <member refid="classwx_list_ctrl_1a61244b9721214359b0ad3992135920c4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetColumn</name></member>
      <member refid="classwx_list_ctrl_1a2a499df49ebcefb3451a44146f76457d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetColumnsOrder</name></member>
      <member refid="classwx_list_ctrl_1ac5818d43ce3913f7f70a6a759485cd6c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetColumnWidth</name></member>
      <member refid="classwx_window_1afa75d111bbd9a68f837101a5fbed60a7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetConstraints</name></member>
      <member refid="classwx_window_1a0ccf78fe06722b500adfb7f36b8ce443" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetContainingSizer</name></member>
      <member refid="classwx_window_1ad83f9c51c6f31e0e05f598b47a19ed98" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetCursor</name></member>
      <member refid="classwx_window_1a5477a89c17fdcc3ec6c90274796eb1c3" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetDoubleBuffered</name></member>
      <member refid="classwx_window_1ae34b4d45433ca8287df0e47d46411e58" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetDropTarget</name></member>
      <member refid="classwx_window_1af6c84b7679183b377ba27a52a2f708b4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetEventHandler</name></member>
      <member refid="classwx_evt_handler_1a7388ae19c8657e5656471b658c320036" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetEvtHandlerEnabled</name></member>
      <member refid="classwx_window_1ae9655f7c35ce7ac89cac2f6c0054b103" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetExtraStyle</name></member>
      <member refid="classwx_window_1a697f9f8d3ff389790f1c74b59bcb1d75" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetFocus</name></member>
      <member refid="classwx_window_1a6fa03f82d7917dff482754d0d2e2b1c8" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetFocusFromKbd</name></member>
      <member refid="classwx_window_1a9ab11e7da57a1d08918aa75fc33f6ad3" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetFont</name></member>
      <member refid="classwx_window_1a69f1e1c7ddd370d72e68c70f13ac8de9" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetForegroundColour</name></member>
      <member refid="classwx_window_1a4c1a2cbc7363237b3a7c70af4e702c72" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetHelpText</name></member>
      <member refid="classwx_window_1a7f27d0faed14effa013381bdc40e1bcd" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetId</name></member>
      <member refid="classwx_list_ctrl_1a9a6b0ebe6f4b0a8fbef31c4e17fe235f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetImageList</name></member>
      <member refid="classwx_window_1ae6dfe0b0d4a8c666b21ce8df8d96727b" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>SetInitialBestSize</name></member>
      <member refid="classwx_window_1a1b309ca50ba87e34f968c83b79af1397" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetInitialSize</name></member>
      <member refid="classwx_list_ctrl_1a65a4d9f5fa5bc363e4a93317777d57b4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItem</name></member>
      <member refid="classwx_list_ctrl_1aa1ea1a3071677e667af1fcc909cefa03" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItem</name></member>
      <member refid="classwx_list_ctrl_1adf07b82511dc77d64097c0ffefdc9a30" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemBackgroundColour</name></member>
      <member refid="classwx_list_ctrl_1a83d08f3aefb0a20b25fad05f19fad67d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemColumnImage</name></member>
      <member refid="classwx_list_ctrl_1a5ded9342e4969eeeb60d1305f75995fd" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemCount</name></member>
      <member refid="classwx_list_ctrl_1a54825c8c66e7fb59cee6076d6554f8ec" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemData</name></member>
      <member refid="classwx_list_ctrl_1acfc640f1aba5634ab25186e71ffc278f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemFont</name></member>
      <member refid="classwx_list_ctrl_1afe006faba05c34bbc70539f100e72c86" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemImage</name></member>
      <member refid="classwx_list_ctrl_1a13525147c745a26eeb54fe55dfdbad46" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemPosition</name></member>
      <member refid="classwx_list_ctrl_1a748edc3f8e43939632f2838756599863" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemPtrData</name></member>
      <member refid="classwx_list_ctrl_1a172d78854092aec2b784b8519bf5be08" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemState</name></member>
      <member refid="classwx_list_ctrl_1af4d70a5a6a15011590fa0b94254ecbd9" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemText</name></member>
      <member refid="classwx_list_ctrl_1a069801dda4c0df09ddb0c7cdefcdaf11" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetItemTextColour</name></member>
      <member refid="classwx_control_1a2c2ae20554e7db5e765f163022ce09c0" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetLabel</name></member>
      <member refid="classwx_control_1afeb308dc3b54d8d735b33cb250395503" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetLabelMarkup</name></member>
      <member refid="classwx_control_1ae092899c3fe658831a9c796755a65eb7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetLabelText</name></member>
      <member refid="classwx_window_1a7d494549f7fcfed44af95f8ee364c1f9" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetLayoutDirection</name></member>
      <member refid="classwx_window_1a664e5b2ddd817d9c58788269fe1d8479" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetMaxClientSize</name></member>
      <member refid="classwx_window_1a38b496214d728a3212afadee5ed51606" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetMaxSize</name></member>
      <member refid="classwx_window_1a6e35ba44b97e374dfffa460d41d94b31" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetMinClientSize</name></member>
      <member refid="classwx_window_1a3fc066f4d8083319f004ac43811d545d" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetMinSize</name></member>
      <member refid="classwx_window_1af80875cda5e1af98dcd7c8e712e3c800" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetName</name></member>
      <member refid="classwx_window_1aeab905f61df7004c1b76a3351dca9e96" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetNextHandler</name></member>
      <member refid="classwx_window_1a9a3f9d8477aab1d9176cd66ee56e75d9" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetOwnBackgroundColour</name></member>
      <member refid="classwx_window_1a89a4f62f23c1e7c845b8d07cecae4c43" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetOwnFont</name></member>
      <member refid="classwx_window_1a53f4a878e4e2d440bd00543f8014aaaa" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetOwnForegroundColour</name></member>
      <member refid="classwx_window_1aee57358435d6bd33f598c81354b47425" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetPalette</name></member>
      <member refid="classwx_window_1a81f23590239934fa10fded0566a65d8c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetPosition</name></member>
      <member refid="classwx_window_1a07f5f7ed3f78e0ef7b3dee3f4da81001" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetPreviousHandler</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetRefData</name></member>
      <member refid="classwx_window_1aa842d59529f873683e55cd8392ec46e9" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetScrollbar</name></member>
      <member refid="classwx_window_1afbf4dc9064cf70cfe6884554b97a27bf" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetScrollPos</name></member>
      <member refid="classwx_list_ctrl_1a20daa8d70dc41ba23d00bcf6a652ab28" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetSingleStyle</name></member>
      <member refid="classwx_window_1a180312d5ad4a4a5ad805b8d52d67a74e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a8e383bc6d5ca008965922a36c676aea0" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a030a928cd854de3def97c5720f14695b" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a2ea9b25296d591aea4470c8fd99ff7cb" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetSize</name></member>
      <member refid="classwx_window_1a307329dc3b10f5584aeb2cbce9293ffd" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetSizeHints</name></member>
      <member refid="classwx_window_1ae813c640e1e2bc6014423247050846cf" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetSizeHints</name></member>
      <member refid="classwx_window_1abc95691b45e29a52c24aa9d33d46dec1" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetSizer</name></member>
      <member refid="classwx_window_1a29938af9828fd35da666536cdfb6b73c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetSizerAndFit</name></member>
      <member refid="classwx_list_ctrl_1af3e129f2ac6412c8bd602f286b95300f" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetTextColour</name></member>
      <member refid="classwx_window_1a41dd19ed8809fd8ec662e2aa2a9579c3" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetThemeEnabled</name></member>
      <member refid="classwx_window_1a81a9fb74e3c6c7f4416e882f5e589b8c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetToolTip</name></member>
      <member refid="classwx_window_1a494e0b7cfca9299caa40e847767e7357" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetToolTip</name></member>
      <member refid="classwx_window_1ac8cf4398cec50ac36634760f45a0656f" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetTransparent</name></member>
      <member refid="classwx_window_1a00066c70049a7be3ce6b648d206e6432" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetValidator</name></member>
      <member refid="classwx_window_1a37f293b7904bc6668b86cccb0aea5669" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetVirtualSize</name></member>
      <member refid="classwx_window_1a8e95201edebe43b9623bd3bdc555af4d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetVirtualSize</name></member>
      <member refid="classwx_window_1a306af30adec68689f74ed537b4f9d5fd" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetWindowStyle</name></member>
      <member refid="classwx_list_ctrl_1ae719fa247088c1f5e3b6bd7de2cfcc39" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>SetWindowStyleFlag</name></member>
      <member refid="classwx_window_1acd955418c336e73b3e32cadf1ca46e29" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SetWindowVariant</name></member>
      <member refid="classwx_window_1aa51b169745cda1746c1a45b4ffe3217a" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>ShouldInheritColours</name></member>
      <member refid="classwx_window_1a7fbc92ce240a8d4f6956b6e0276ef07f" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Show</name></member>
      <member refid="classwx_window_1a596b1715edfc7609f352b2e000ecbaec" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>ShowWithEffect</name></member>
      <member refid="classwx_list_ctrl_1a5a36fae3701f7df7021362b0330f9640" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>SortItems</name></member>
      <member refid="classwx_window_1a279a532124073261b28131b6afb59a1e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Thaw</name></member>
      <member refid="classwx_window_1a8a4fa47129de552bfec37db8c69688a2" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>ToggleWindowStyle</name></member>
      <member refid="classwx_window_1ab8e51f36e7d8790b361c8d8c6f37b1ad" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>TransferDataFromWindow</name></member>
      <member refid="classwx_window_1a88cc65e424a129d9b0057756cdb67ec9" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>TransferDataToWindow</name></member>
      <member refid="classwx_evt_handler_1a5e25fece1cb6cbc11fd1d41ec140319c" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>TryAfter</name></member>
      <member refid="classwx_evt_handler_1ad4b0eac704dd005ac6a88fdb1e673c13" prot="protected" virt="virtual"><scope>wxListCtrl</scope><name>TryBefore</name></member>
      <member refid="classwx_evt_handler_1a2b7df8272075a96daea78cdd799c00da" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Unbind</name></member>
      <member refid="classwx_evt_handler_1aa49f9c4ad4462456b4fe4bd1ab53533d" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Unbind</name></member>
      <member refid="classwx_evt_handler_1a22e5db2ec1d19c8252c056fd116975d7" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>Unlink</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>UnRef</name></member>
      <member refid="classwx_window_1a695f60d65f8f6c12e3c3645ad9c0c35b" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>UnregisterHotKey</name></member>
      <member refid="classwx_window_1ad9bc342d1e38d221e37f0f6396950c8c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>UnreserveControlId</name></member>
      <member refid="classwx_window_1ae75712451673658b0a533480bf5eeaa4" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>UnsetToolTip</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>UnShare</name></member>
      <member refid="classwx_window_1abaf28f1a075fd1b10f761a8febe597ec" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Update</name></member>
      <member refid="classwx_window_1adf0a4987728bd0bf69f922641b3efbfc" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>UpdateWindowUI</name></member>
      <member refid="classwx_window_1a9131e424ddc3b332a08377e5ad713c60" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>UseBgCol</name></member>
      <member refid="classwx_window_1ac87f253253a0c5eb498871c83afa40fd" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>Validate</name></member>
      <member refid="classwx_window_1ac500152d1eca3a2ee98a68e7ea7372b5" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>WarpPointer</name></member>
      <member refid="classwx_window_1a75e9c29023e441305574056cd5a725ff" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>WindowToClientSize</name></member>
      <member refid="classwx_control_1adb8f3edf807efa9159de826bf92d6a44" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxControl</name></member>
      <member refid="classwx_control_1a08428de2ba5cc988a86fe17071d49522" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxControl</name></member>
      <member refid="classwx_evt_handler_1a3f0166c4154227d05575b01eb2c8d4be" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxEvtHandler</name></member>
      <member refid="classwx_list_ctrl_1a6941e35348b00a288e833871fd0138e8" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxListCtrl</name></member>
      <member refid="classwx_list_ctrl_1aaf98aeeba06ad86fa471f9218ae91097" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxListCtrl</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxObject</name></member>
      <member refid="classwx_window_1a695200a4915b934926dcf32afa44544c" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxWindow</name></member>
      <member refid="classwx_window_1a7799009b10d1765d1bbb6db4994f922e" prot="public" virt="non-virtual"><scope>wxListCtrl</scope><name>wxWindow</name></member>
      <member refid="classwx_evt_handler_1a372d2239d91521eddc8fd2715fcab584" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>~wxEvtHandler</name></member>
      <member refid="classwx_list_ctrl_1a8b9f3f6517e7e1ddfcd2f45c86741209" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>~wxListCtrl</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>~wxObject</name></member>
      <member refid="classwx_window_1a0c2a46181a89c349327f0b276f5ef8d7" prot="public" virt="virtual"><scope>wxListCtrl</scope><name>~wxWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
