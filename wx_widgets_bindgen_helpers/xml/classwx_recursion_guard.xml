<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_recursion_guard" kind="class" language="C++" prot="public">
    <compoundname>wxRecursionGuard</compoundname>
    <includes local="no">wx/recguard.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_recursion_guard_1a9dde9c6284b26edda237c219eff09145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRecursionGuard::wxRecursionGuard</definition>
        <argsstring>(wxRecursionGuardFlag &amp;flag)</argsstring>
        <name>wxRecursionGuard</name>
        <param>
          <type><ref refid="classwx_recursion_guard_flag" kindref="compound">wxRecursionGuardFlag</ref> &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>A <ref refid="classwx_recursion_guard" kindref="compound">wxRecursionGuard</ref> object must always be initialized with a <computeroutput>static</computeroutput> <ref refid="classwx_recursion_guard_flag" kindref="compound">wxRecursionGuardFlag</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The constructor saves the value of the flag to be able to return the correct value from <ref refid="classwx_recursion_guard_1a153c6366ddc2e1002d49bda38bee236e" kindref="member">IsInside()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/recguard.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_recursion_guard_1adeb06fb439b4529d96f3e45544a27187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxRecursionGuard::~wxRecursionGuard</definition>
        <argsstring>()</argsstring>
        <name>~wxRecursionGuard</name>
        <briefdescription>
<para>The destructor resets the flag value so that the function can be entered again the next time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not virtual, so this class is not meant to be derived from (besides, there is absolutely no reason to do it anyhow). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/recguard.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_recursion_guard_1a153c6366ddc2e1002d49bda38bee236e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxRecursionGuard::IsInside</definition>
        <argsstring>() const</argsstring>
        <name>IsInside</name>
        <briefdescription>
<para>Returns true if we&apos;re already inside the code block &quot;protected&quot; by this <ref refid="classwx_recursion_guard" kindref="compound">wxRecursionGuard</ref> (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>between this line and the end of current scope). Usually the function using <ref refid="classwx_recursion_guard" kindref="compound">wxRecursionGuard</ref> takes some specific actions in such case (may be simply returning) to prevent reentrant calls to itself.</para><para>If this method returns false, it is safe to continue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/recguard.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_recursion_guard" kindref="compound">wxRecursionGuard</ref> is a very simple class which can be used to prevent reentrancy problems in a function. </para>    </briefdescription>
    <detaileddescription>
<para>It is not thread-safe and so should be used only in single-threaded programs or in combination with some thread synchronization mechanisms.</para><para><ref refid="classwx_recursion_guard" kindref="compound">wxRecursionGuard</ref> is always used together with the <ref refid="classwx_recursion_guard_flag" kindref="compound">wxRecursionGuardFlag</ref> like in this example:</para><para><programlisting><codeline><highlight class="normal">void<sp/>Foo()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>wxRecursionGuardFlag<sp/>s_flag;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxRecursionGuard<sp/>guard(s_flag);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>guard.IsInside()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>don&apos;t<sp/>allow<sp/>reentrancy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>As you can see, <ref refid="classwx_recursion_guard" kindref="compound">wxRecursionGuard</ref> simply tests the flag value and sets it to true if it hadn&apos;t been already set. <ref refid="classwx_recursion_guard_1a153c6366ddc2e1002d49bda38bee236e" kindref="member">IsInside()</ref> allows testing the old flag value. The advantage of using this class compared to directly manipulating the flag is that the flag is always reset in the <ref refid="classwx_recursion_guard" kindref="compound">wxRecursionGuard</ref> destructor and so you don&apos;t risk to forget to do it even if the function returns in an unexpected way (for example because an exception has been thrown).</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt; </para>    </detaileddescription>
    <location file="interface/wx/recguard.h" line="68" column="1" bodyfile="interface/wx/recguard.h" bodystart="67" bodyend="96"/>
    <listofallmembers>
      <member refid="classwx_recursion_guard_1a153c6366ddc2e1002d49bda38bee236e" prot="public" virt="non-virtual"><scope>wxRecursionGuard</scope><name>IsInside</name></member>
      <member refid="classwx_recursion_guard_1a9dde9c6284b26edda237c219eff09145" prot="public" virt="non-virtual"><scope>wxRecursionGuard</scope><name>wxRecursionGuard</name></member>
      <member refid="classwx_recursion_guard_1adeb06fb439b4529d96f3e45544a27187" prot="public" virt="non-virtual"><scope>wxRecursionGuard</scope><name>~wxRecursionGuard</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
