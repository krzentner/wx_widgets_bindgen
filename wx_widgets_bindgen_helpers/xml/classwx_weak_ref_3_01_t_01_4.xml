<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_weak_ref_3_01_t_01_4" kind="class" language="C++" prot="public">
    <compoundname>wxWeakRef&lt; T &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">wxTrackerNode</basecompoundref>
    <includes local="no">wx/weakref.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classwx_weak_ref_3_01_t_01_4_1a4fecc24579d3b687f2901c3ffb376265" prot="public" static="no">
        <type>T</type>
        <definition>typedef T wxWeakRef&lt; T &gt;::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
<para>Type of the element stored by this reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="105" column="1" bodyfile="interface/wx/weakref.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ac3c5efac31ae83a70849e27643f0a82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxWeakRef&lt; T &gt;::wxWeakRef</definition>
        <argsstring>(T *pobj=NULL)</argsstring>
        <name>wxWeakRef</name>
        <param>
          <type>T *</type>
          <declname>pobj</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The weak reference is initialized to <emphasis>pobj</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ae751cee14dffbd70905482265f7cbab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxWeakRef&lt; T &gt;::wxWeakRef</definition>
        <argsstring>(const wxWeakRef&lt; T &gt; &amp;wr)</argsstring>
        <name>wxWeakRef</name>
        <param>
          <type>const wxWeakRef&lt; T &gt; &amp;</type>
          <declname>wr</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a58810f09705aecf916d451bb16415c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxWeakRef&lt; T &gt;::~wxWeakRef</definition>
        <argsstring>()</argsstring>
        <name>~wxWeakRef</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1acb31fe6e5191ee43a2b467b28df3c126" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxWeakRef&lt; T &gt;::OnObjectDestroy</definition>
        <argsstring>()</argsstring>
        <name>OnObjectDestroy</name>
        <briefdescription>
<para>Called when the tracked object is destroyed. </para>        </briefdescription>
        <detaileddescription>
<para>Be default sets internal pointer to NULL. You need to call this method if you override it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ab175c77e8fabc30fcc3489aa69aca139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxWeakRef&lt; T &gt;::Release</definition>
        <argsstring>()</argsstring>
        <name>Release</name>
        <briefdescription>
<para>Release currently tracked object and rests object reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a7a599fb918f2701283c9b452bda16776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Returns pointer to the tracked object or NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a5523917fdaace96d8a9e15e43a242e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator=</definition>
        <argsstring>(wxWeakRef&lt; T &gt; &amp;wr)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classwx_weak_ref_3_01_t_01_4_1ac3c5efac31ae83a70849e27643f0a82d" kindref="member">wxWeakRef</ref>&lt; T &gt; &amp;</type>
          <declname>wr</declname>
        </param>
        <briefdescription>
<para>Release currently tracked object and start tracking the same object as the wxWeakRef <emphasis>wr</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a796bd355ea04a208c5474578a1366841" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Implicit conversion to T*. </para>        </briefdescription>
        <detaileddescription>
<para>Returns pointer to the tracked object or NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a9fe5a6a70acd4522238386e76c0f4eb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; wxWeakRef&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Returns a reference to the tracked object. </para>        </briefdescription>
        <detaileddescription>
<para>If the internal pointer is NULL this method will cause an assert in debug mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1ac11befd5621ba4f71ff45c681e281fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Smart pointer member access. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the tracked object. If the internal pointer is NULL this method will cause an assert in debug mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_weak_ref_3_01_t_01_4_1a63400d0275ad3735b4f94b6421d44326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* wxWeakRef&lt; T &gt;::operator=</definition>
        <argsstring>(T *pobj)</argsstring>
        <name>operator=</name>
        <param>
          <type>T *</type>
          <declname>pobj</declname>
        </param>
        <briefdescription>
<para>Releases the currently tracked object and starts tracking <emphasis>pobj</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>A weak reference may be reset by passing <emphasis></emphasis> NULL as <emphasis>pobj</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/weakref.h" line="167" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> is a template class for weak references to wxWidgets objects, such as <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref>, <ref refid="classwx_window" kindref="compound">wxWindow</ref> and <ref refid="classwx_object" kindref="compound">wxObject</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>A weak reference behaves much like an ordinary pointer, but when the object pointed is destroyed, the weak reference is automatically reset to a NULL pointer.</para><para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> can be used whenever one must keep a pointer to an object that one does not directly own, and that may be destroyed before the object holding the reference.</para><para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> is a small object and the mechanism behind it is fast (<bold>O(1)</bold>). So the overall cost of using it is small.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">wxWindow<sp/>*wnd<sp/>=<sp/>new<sp/>wxWindow(<sp/>parent,<sp/>wxID_ANY,<sp/>&quot;wxWindow&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal">wxWeakRef&lt;wxWindow&gt;<sp/>wr<sp/>=<sp/>wnd;</highlight></codeline>
<codeline><highlight class="normal">wxWindowRef<sp/>wr2<sp/>=<sp/>wnd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Same<sp/>as<sp/>above,<sp/>but<sp/>using<sp/>a<sp/>typedef</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Do<sp/>things<sp/>with<sp/>window</highlight></codeline>
<codeline><highlight class="normal">wnd-&gt;Show(<sp/>true<sp/>);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Weak<sp/>ref<sp/>is<sp/>used<sp/>like<sp/>an<sp/>ordinary<sp/>pointer</highlight></codeline>
<codeline><highlight class="normal">wr-&gt;Show(<sp/>false<sp/>);</highlight></codeline>
<codeline><highlight class="normal">wnd-&gt;Destroy();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Now<sp/>the<sp/>weak<sp/>ref<sp/>has<sp/>been<sp/>reset,<sp/>so<sp/>we<sp/>don&apos;t<sp/>risk<sp/>accessing</highlight></codeline>
<codeline><highlight class="normal">//<sp/>a<sp/>dangling<sp/>pointer:</highlight></codeline>
<codeline><highlight class="normal">wxASSERT(<sp/>wr==NULL<sp/>);</highlight></codeline>
</programlisting></para><para><ref refid="classwx_weak_ref_3_01_t_01_4" kindref="compound">wxWeakRef&lt;T&gt;</ref> works for any objects that are derived from <ref refid="classwx_trackable" kindref="compound">wxTrackable</ref>. By default, <ref refid="classwx_evt_handler" kindref="compound">wxEvtHandler</ref> and <ref refid="classwx_window" kindref="compound">wxWindow</ref> derive from <ref refid="classwx_trackable" kindref="compound">wxTrackable</ref>. However, <ref refid="classwx_object" kindref="compound">wxObject</ref> does not, so types like <ref refid="classwx_font" kindref="compound">wxFont</ref> and <ref refid="classwx_colour" kindref="compound">wxColour</ref> are not trackable. The example below shows how to create a <ref refid="classwx_object" kindref="compound">wxObject</ref> derived class that is trackable:</para><para><programlisting><codeline><highlight class="normal">class<sp/>wxMyTrackableObject<sp/>:<sp/>public<sp/>wxObject,<sp/>public<sp/>wxTrackable</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...<sp/>other<sp/>members<sp/>here</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>The following types of weak references are predefined:</para><para><programlisting><codeline><highlight class="normal">typedef<sp/>wxWeakRef&lt;wxEvtHandler&gt;<sp/><sp/>wxEvtHandlerRef;</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>wxWeakRef&lt;wxWindow&gt;<sp/><sp/><sp/><sp/><sp/><sp/>wxWindowRef;</highlight></codeline>
</programlisting></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to which the smart pointer points to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/>None; this class implementation is entirely header-based. &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="classwx_shared_ptr_3_01_t_01_4" kindref="compound">wxSharedPtr&lt;T&gt;</ref>, <ref refid="classwx_scoped_ptr_3_01_t_01_4" kindref="compound">wxScopedPtr&lt;T&gt;</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="8583">
        <label>wxWeakRef&lt; T &gt;</label>
        <link refid="classwx_weak_ref_3_01_t_01_4"/>
        <childnode refid="8584" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8584">
        <label>wxTrackerNode</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8585">
        <label>wxWeakRef&lt; T &gt;</label>
        <link refid="classwx_weak_ref_3_01_t_01_4"/>
        <childnode refid="8586" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8586">
        <label>wxTrackerNode</label>
      </node>
    </collaborationgraph>
    <location file="interface/wx/weakref.h" line="102" column="1" bodyfile="interface/wx/weakref.h" bodystart="101" bodyend="168"/>
    <listofallmembers>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a4fecc24579d3b687f2901c3ffb376265" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>element_type</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a7a599fb918f2701283c9b452bda16776" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>get</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1acb31fe6e5191ee43a2b467b28df3c126" prot="public" virt="virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>OnObjectDestroy</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a796bd355ea04a208c5474578a1366841" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator*</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a9fe5a6a70acd4522238386e76c0f4eb4" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator*</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ac11befd5621ba4f71ff45c681e281fb2" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator-&gt;</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a5523917fdaace96d8a9e15e43a242e0d" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a63400d0275ad3735b4f94b6421d44326" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>operator=</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ab175c77e8fabc30fcc3489aa69aca139" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>Release</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ac3c5efac31ae83a70849e27643f0a82d" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>wxWeakRef</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1ae751cee14dffbd70905482265f7cbab3" prot="public" virt="non-virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>wxWeakRef</name></member>
      <member refid="classwx_weak_ref_3_01_t_01_4_1a58810f09705aecf916d451bb16415c05" prot="public" virt="virtual"><scope>wxWeakRef&lt; T &gt;</scope><name>~wxWeakRef</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
