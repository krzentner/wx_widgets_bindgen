<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_protocol" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>wxProtocol</compoundname>
    <basecompoundref refid="classwx_socket_client" prot="public" virt="non-virtual">wxSocketClient</basecompoundref>
    <derivedcompoundref refid="classwx_f_t_p" prot="public" virt="non-virtual">wxFTP</derivedcompoundref>
    <derivedcompoundref refid="classwx_h_t_t_p" prot="public" virt="non-virtual">wxHTTP</derivedcompoundref>
    <includes local="no">wx/protocol/protocol.h</includes>
      <sectiondef kind="user-defined">
      <header>Logging support.</header>
      <description><para>Each <ref refid="classwx_protocol" kindref="compound">wxProtocol</ref> object may have the associated logger (by default there is none) which is used to log network requests and responses.</para><para><simplesect kind="see"><para><ref refid="classwx_protocol_log" kindref="compound">wxProtocolLog</ref> </para></simplesect>
</para></description>
      <memberdef kind="function" id="classwx_protocol_1aad66b5f4dd52e5a34fe80ef44d4fab52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxProtocol::SetLog</definition>
        <argsstring>(wxProtocolLog *log)</argsstring>
        <name>SetLog</name>
        <param>
          <type><ref refid="classwx_protocol_log" kindref="compound">wxProtocolLog</ref> *</type>
          <declname>log</declname>
        </param>
        <briefdescription>
<para>Set the logger, deleting the old one and taking ownership of this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>New logger allocated on the heap or NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1aeda59b8f64b04633e31a55d904ff7445" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classwx_protocol_log" kindref="compound">wxProtocolLog</ref> *</type>
        <definition>wxProtocolLog* wxProtocol::GetLog</definition>
        <argsstring>() const</argsstring>
        <name>GetLog</name>
        <briefdescription>
<para>Return the current logger, may be NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="131" column="1" bodyfile="interface/wx/protocol/protocol.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1a5b385ca23b57e99fd6ff41e455efe736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_protocol_log" kindref="compound">wxProtocolLog</ref> *</type>
        <definition>wxProtocolLog* wxProtocol::DetachLog</definition>
        <argsstring>()</argsstring>
        <name>DetachLog</name>
        <briefdescription>
<para>Detach the existing logger without deleting it. </para>        </briefdescription>
        <detaileddescription>
<para>The caller is responsible for deleting the returned pointer if it&apos;s non-<computeroutput>NULL</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1a99159e95daa826e4b74b229f652a3766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxProtocol::LogRequest</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>LogRequest</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Call <ref refid="classwx_protocol_log_1addf45beaed76b87ccbf6b43022076bf6" kindref="member">wxProtocolLog::LogRequest()</ref> if we have a valid logger or do nothing otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1a03c4ee18cd126eeec76fd79c016de2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxProtocol::LogResponse</definition>
        <argsstring>(const wxString &amp;str)</argsstring>
        <name>LogResponse</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Call <ref refid="classwx_protocol_log_1af4d66c55be1aa518626bbc97982d756b" kindref="member">wxProtocolLog::LogResponse()</ref> if we have a valid logger or do nothing otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_protocol_1a251f4c7e9d13fc23a863540bbbedd81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool wxProtocol::Abort</definition>
        <argsstring>()=0</argsstring>
        <name>Abort</name>
        <reimplementedby refid="classwx_f_t_p_1a9f1d0c38321f880302959c07c4749d4d">Abort</reimplementedby>
        <briefdescription>
<para>Abort the current stream. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is advised to destroy the input stream instead of aborting the stream this way.</para></simplesect>
<simplesect kind="return"><para>Returns true, if successful, else false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1af51b393375c8cec2eb30c85b4c92cfb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>virtual wxString wxProtocol::GetContentType</definition>
        <argsstring>() const</argsstring>
        <name>GetContentType</name>
        <briefdescription>
<para>Returns the type of the content of the last opened stream. </para>        </briefdescription>
        <detaileddescription>
<para>It is a mime-type. May be an empty string if the content-type is unknown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1a6caa8f1c508eb5602dbb21c2d3ff10d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="protocol_8h_1ad89a82eacf487f3cc4ff9016c7c18087" kindref="member">wxProtocolError</ref></type>
        <definition>virtual wxProtocolError wxProtocol::GetError</definition>
        <argsstring>() const</argsstring>
        <name>GetError</name>
        <briefdescription>
<para>Returns the last occurred error. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="protocol_8h_1ad89a82eacf487f3cc4ff9016c7c18087" kindref="member">wxProtocolError</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1a1adc6bb4d61c1ef993cc17006562acae" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> *</type>
        <definition>virtual wxInputStream* wxProtocol::GetInputStream</definition>
        <argsstring>(const wxString &amp;path)=0</argsstring>
        <name>GetInputStream</name>
        <reimplementedby refid="classwx_h_t_t_p_1a10939b192691ad1d619d9770116368bf">GetInputStream</reimplementedby>
        <reimplementedby refid="classwx_f_t_p_1a97d34cb6df2b6075e49a50b88d4a54b9">GetInputStream</reimplementedby>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Creates a new input stream on the specified path. </para>        </briefdescription>
        <detaileddescription>
<para>You can use all but seek() functionality of wxStream. Seek() isn&apos;t available on all streams. For example, HTTP or FTP streams don&apos;t deal with it. Other functions like StreamSize() and Tell() aren&apos;t available for the moment for this sort of stream. You will be notified when the EOF is reached by an error.</para><para><simplesect kind="return"><para>Returns the initialized stream. You will have to delete it yourself once you don&apos;t use it anymore. The destructor closes the network connection.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_input_stream" kindref="compound">wxInputStream</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1a98f5d494d988353de194104bd7e83fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxProtocol::Reconnect</definition>
        <argsstring>()</argsstring>
        <name>Reconnect</name>
        <briefdescription>
<para>Tries to reestablish a previous opened connection (close and renegotiate connection). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true, if the connection is established, else false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1adde2801803a01311e8911e9f5c30607b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxProtocol::SetPassword</definition>
        <argsstring>(const wxString &amp;user)</argsstring>
        <name>SetPassword</name>
        <reimplementedby refid="classwx_f_t_p_1a9fda9b5eceee7c10cfdea9e5e062a084">SetPassword</reimplementedby>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Sets the authentication password. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1ab1f11044077ce6755e17eab0b0b461a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void wxProtocol::SetUser</definition>
        <argsstring>(const wxString &amp;user)</argsstring>
        <name>SetUser</name>
        <reimplementedby refid="classwx_f_t_p_1aa98a9516aacb33260942d5f65e4189ae">SetUser</reimplementedby>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Sets the authentication user. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_protocol_1ab1e5d1001c2a7b4c6cf50b8e26829985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxProtocol::SetDefaultTimeout</definition>
        <argsstring>(wxUint32 Value)</argsstring>
        <name>SetDefaultTimeout</name>
        <param>
          <type><ref refid="defs_8h_1afdb12e5345c3fae4b537e813df9f02a3" kindref="member">wxUint32</ref></type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Sets a new default timeout for the network operations. </para>        </briefdescription>
        <detaileddescription>
<para>The default timeout is 60 seconds.</para><para><simplesect kind="see"><para><ref refid="classwx_socket_base_1ac24247e3f866154825c14de46a911e50" kindref="member">wxSocketBase::SetTimeout</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/protocol/protocol.h" line="108" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a protocol for use with <ref refid="classwx_u_r_l" kindref="compound">wxURL</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>Note that you may want to change the default time-out for HTTP/FTP connections and network operations (using <ref refid="classwx_protocol_1ab1e5d1001c2a7b4c6cf50b8e26829985" kindref="member">SetDefaultTimeout()</ref>) since the default time-out value is quite long (60 seconds).</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxnet" kindref="member">wxNet</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="classwx_socket_base" kindref="compound">wxSocketBase</ref>, <ref refid="classwx_u_r_l" kindref="compound">wxURL</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5788">
        <label>wxSocketBase</label>
        <link refid="classwx_socket_base"/>
        <childnode refid="5789" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5789">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="5787">
        <label>wxSocketClient</label>
        <link refid="classwx_socket_client"/>
        <childnode refid="5788" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5790">
        <label>wxFTP</label>
        <link refid="classwx_f_t_p"/>
        <childnode refid="5786" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5791">
        <label>wxHTTP</label>
        <link refid="classwx_h_t_t_p"/>
        <childnode refid="5786" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5786">
        <label>wxProtocol</label>
        <link refid="classwx_protocol"/>
        <childnode refid="5787" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5794">
        <label>wxSocketBase</label>
        <link refid="classwx_socket_base"/>
        <childnode refid="5795" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5795">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="5796" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="5793">
        <label>wxSocketClient</label>
        <link refid="classwx_socket_client"/>
        <childnode refid="5794" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5792">
        <label>wxProtocol</label>
        <link refid="classwx_protocol"/>
        <childnode refid="5793" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5796">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/protocol/protocol.h" line="40" column="1" bodyfile="interface/wx/protocol/protocol.h" bodystart="39" bodyend="154"/>
    <listofallmembers>
      <member refid="classwx_protocol_1a251f4c7e9d13fc23a863540bbbedd81b" prot="public" virt="pure-virtual"><scope>wxProtocol</scope><name>Abort</name></member>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxProtocol</scope><name>AllocExclusive</name></member>
      <member refid="classwx_object_1a436fc8fe68cf8a31000296d9cd3d2427" prot="protected" virt="virtual"><scope>wxProtocol</scope><name>CloneRefData</name></member>
      <member refid="classwx_socket_base_1a054754d97e15427949ffa30af8ce9945" prot="public" virt="virtual"><scope>wxProtocol</scope><name>Close</name></member>
      <member refid="classwx_socket_client_1a581cdb757cce6020c8caac1ddd74a599" prot="public" virt="virtual"><scope>wxProtocol</scope><name>Connect</name></member>
      <member refid="classwx_socket_client_1a2167813338c94621a9ee0180524974a5" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Connect</name></member>
      <member refid="classwx_object_1a3f4f497c65cef611e121c41f21dd5ccc" prot="protected" virt="virtual"><scope>wxProtocol</scope><name>CreateRefData</name></member>
      <member refid="classwx_socket_base_1ab0b0926cfdfdd00b8b5c5f7f57cea861" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Destroy</name></member>
      <member refid="classwx_protocol_1a5b385ca23b57e99fd6ff41e455efe736" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>DetachLog</name></member>
      <member refid="classwx_socket_base_1a5cfc8b791cff6723dd499509d99d02be" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Discard</name></member>
      <member refid="classwx_socket_base_1a01e5ad5aa72ee502998d61530771450d" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Error</name></member>
      <member refid="classwx_object_1ae6d365f2556b26767ced8410c5e839d0" prot="public" virt="virtual"><scope>wxProtocol</scope><name>GetClassInfo</name></member>
      <member refid="classwx_socket_base_1a1f12eadaa516c9dcacb32e029d8031fc" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>GetClientData</name></member>
      <member refid="classwx_protocol_1af51b393375c8cec2eb30c85b4c92cfb6" prot="public" virt="virtual"><scope>wxProtocol</scope><name>GetContentType</name></member>
      <member refid="classwx_protocol_1a6caa8f1c508eb5602dbb21c2d3ff10d5" prot="public" virt="virtual"><scope>wxProtocol</scope><name>GetError</name></member>
      <member refid="classwx_socket_base_1aee914b014ad1eb5d7d0a3d086ae1422e" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>GetFlags</name></member>
      <member refid="classwx_protocol_1a1adc6bb4d61c1ef993cc17006562acae" prot="public" virt="pure-virtual"><scope>wxProtocol</scope><name>GetInputStream</name></member>
      <member refid="classwx_socket_base_1aec013dd4b29b88a664a4b8216c587c26" prot="public" virt="virtual"><scope>wxProtocol</scope><name>GetLocal</name></member>
      <member refid="classwx_protocol_1aeda59b8f64b04633e31a55d904ff7445" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>GetLog</name></member>
      <member refid="classwx_socket_base_1a59ed4cb9faeb84bb3a153a6609ee81d7" prot="public" virt="virtual"><scope>wxProtocol</scope><name>GetPeer</name></member>
      <member refid="classwx_object_1af3c6c76a775864832f1536d3c0de3a2b" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>GetRefData</name></member>
      <member refid="classwx_socket_base_1a419752c214a4fbf48a8dac32f8b02c32" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>GetSocket</name></member>
      <member refid="classwx_socket_base_1acb1ee9d96106f2b8424f48eb997f09f1" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>GetTimeout</name></member>
      <member refid="classwx_socket_base_1a4c4c4cc8e1fcd824ef621b0f3d17b29f" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Initialize</name></member>
      <member refid="classwx_socket_base_1a89897c3ea99e6e3d8d5daf8e26596bc3" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>InterruptWait</name></member>
      <member refid="classwx_socket_base_1abebaf946e550ca6362f84df0106ccd68" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>IsConnected</name></member>
      <member refid="classwx_socket_base_1a6703a3dd7c15fcb2eff7c7baf0b886f5" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>IsData</name></member>
      <member refid="classwx_socket_base_1a9325369173ea9d2954547df346cd74a9" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>IsDisconnected</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>IsKindOf</name></member>
      <member refid="classwx_socket_base_1aa3fd261a3358f070d87f397ab66d8d96" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>IsOk</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>IsSameAs</name></member>
      <member refid="classwx_socket_base_1ae81333cc7920ce24f0cb579f21f92ebb" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>LastCount</name></member>
      <member refid="classwx_socket_base_1a5a11a4b29d6fffb6157600e71a4a6832" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>LastError</name></member>
      <member refid="classwx_socket_base_1a91b13644fcdc43bff9d67347101642a0" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>LastReadCount</name></member>
      <member refid="classwx_socket_base_1a416a04dbfcd89aea7fe5e5aa305b64e7" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>LastWriteCount</name></member>
      <member refid="classwx_protocol_1a99159e95daa826e4b74b229f652a3766" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>LogRequest</name></member>
      <member refid="classwx_protocol_1a03c4ee18cd126eeec76fd79c016de2fb" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>LogResponse</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxProtocol</scope><name>m_refData</name></member>
      <member refid="classwx_socket_base_1acfaca539bd0fe0e9c0b1018c77e6701c" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Notify</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>operator new</name></member>
      <member refid="classwx_socket_base_1a944eb846a3849dd34f7825cfdce3bcd1" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Peek</name></member>
      <member refid="classwx_socket_base_1aa75b3c2dd051a012cfbd0596d95f80c2" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Read</name></member>
      <member refid="classwx_socket_base_1a7c16b20282272c68acfe04107d430bf6" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>ReadMsg</name></member>
      <member refid="classwx_protocol_1a98f5d494d988353de194104bd7e83fe1" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Reconnect</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Ref</name></member>
      <member refid="classwx_socket_base_1a386797430bfc9f568be388e7abf6c782" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>RestoreState</name></member>
      <member refid="classwx_socket_base_1af227621ab1ee04542063fe91ea281e49" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SaveState</name></member>
      <member refid="classwx_socket_base_1a5695e6dc7db8e4119caf3c81dcbc7306" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetClientData</name></member>
      <member refid="classwx_protocol_1ab1e5d1001c2a7b4c6cf50b8e26829985" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetDefaultTimeout</name></member>
      <member refid="classwx_socket_base_1a09819e56d36638fb6b45bf3dd7ea8742" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetEventHandler</name></member>
      <member refid="classwx_socket_base_1aa11d1db40c87c8e06e3f9849a08abafc" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetFlags</name></member>
      <member refid="classwx_socket_base_1a18b26d4201f86daf64c881433c68a1b3" prot="public" virt="virtual"><scope>wxProtocol</scope><name>SetLocal</name></member>
      <member refid="classwx_protocol_1aad66b5f4dd52e5a34fe80ef44d4fab52" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetLog</name></member>
      <member refid="classwx_socket_base_1a4a3883a253c29e0f0027d279c647dbe0" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetNotify</name></member>
      <member refid="classwx_protocol_1adde2801803a01311e8911e9f5c30607b" prot="public" virt="virtual"><scope>wxProtocol</scope><name>SetPassword</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetRefData</name></member>
      <member refid="classwx_socket_base_1ac24247e3f866154825c14de46a911e50" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>SetTimeout</name></member>
      <member refid="classwx_protocol_1ab1f11044077ce6755e17eab0b0b461a1" prot="public" virt="virtual"><scope>wxProtocol</scope><name>SetUser</name></member>
      <member refid="classwx_socket_base_1acfa7398ce7fac6e8db20caeb3a09b10e" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Shutdown</name></member>
      <member refid="classwx_socket_base_1a90d2aea95b10c68eee2656860d90e23e" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>ShutdownOutput</name></member>
      <member refid="classwx_socket_base_1a8fd912526830f7b079ac28677424d40a" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Unread</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>UnShare</name></member>
      <member refid="classwx_socket_base_1ae46d0dea0ec25af581ba3119cca4bd7e" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Wait</name></member>
      <member refid="classwx_socket_base_1a80e8a0feaed33843aa7972c02909106c" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>WaitForLost</name></member>
      <member refid="classwx_socket_base_1aab8fdd558f149d70ed265dad0f12e9f8" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>WaitForRead</name></member>
      <member refid="classwx_socket_base_1abda804254aa40c9f8ae363dbc5ebc1f2" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>WaitForWrite</name></member>
      <member refid="classwx_socket_client_1a83c92e8c27a72c3610c9eb0b60e92d74" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>WaitOnConnect</name></member>
      <member refid="classwx_socket_base_1a7676f1821d2e17db95de2438346355cd" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>Write</name></member>
      <member refid="classwx_socket_base_1a91abca66c1d5bf4237aa87b0e796464b" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>WriteMsg</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>wxObject</name></member>
      <member refid="classwx_socket_base_1a3bf32997db6732a5b053d8d52b1173f0" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>wxSocketBase</name></member>
      <member refid="classwx_socket_client_1a1eaa0a775aa619d4d04d48bd84a8212c" prot="public" virt="non-virtual"><scope>wxProtocol</scope><name>wxSocketClient</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxProtocol</scope><name>~wxObject</name></member>
      <member refid="classwx_socket_base_1a636e72242dd5550e84456c277ca31222" prot="public" virt="virtual"><scope>wxProtocol</scope><name>~wxSocketBase</name></member>
      <member refid="classwx_socket_client_1a6e55d27056f3bf22b16b25d2fadb01ad" prot="public" virt="virtual"><scope>wxProtocol</scope><name>~wxSocketClient</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
