<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_palette" kind="class" language="C++" prot="public">
    <compoundname>wxPalette</compoundname>
    <basecompoundref refid="classwx_g_d_i_object" prot="public" virt="non-virtual">wxGDIObject</basecompoundref>
    <includes local="no">wx/palette.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_palette_1aff9ca82ce8e82b801f6f119fc8887289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxPalette::wxPalette</definition>
        <argsstring>()</argsstring>
        <name>wxPalette</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1ab6e5c7d9f2fbc763120378e111dda828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxPalette::wxPalette</definition>
        <argsstring>(const wxPalette &amp;palette)</argsstring>
        <name>wxPalette</name>
        <param>
          <type>const <ref refid="classwx_palette" kindref="compound">wxPalette</ref> &amp;</type>
          <declname>palette</declname>
        </param>
        <briefdescription>
<para>Copy constructor, uses <ref refid="overview_refcount" kindref="compound">Reference Counting</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>palette</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the palette to copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1ac98e35c82e6e2e70bad9190a51067123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxPalette::wxPalette</definition>
        <argsstring>(int n, const unsigned char *red, const unsigned char *green, const unsigned char *blue)</argsstring>
        <name>wxPalette</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>red</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>green</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Creates a palette from arrays of size <emphasis>n</emphasis>, one for each red, blue or green component. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of indices in the palette. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of red values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of green values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of blue values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>wxPerl Note:</bold> In wxPerl this method takes as parameters 3 array references (they must be of the same length).</para><para><simplesect kind="see"><para><ref refid="classwx_palette_1aeb040e229b732bc46dac0dc204f005f4" kindref="member">Create()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1a2b6a3346630aa048198e8344fc7d3995" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual wxPalette::~wxPalette</definition>
        <argsstring>()</argsstring>
        <name>~wxPalette</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="overview_refcount_1overview_refcount_destruct" kindref="member">reference-counted object destruction</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1aeb040e229b732bc46dac0dc204f005f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPalette::Create</definition>
        <argsstring>(int n, const unsigned char *red, const unsigned char *green, const unsigned char *blue)</argsstring>
        <name>Create</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>red</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>green</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Creates a palette from arrays of size <emphasis>n</emphasis>, one for each red, blue or green component. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of indices in the palette. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of red values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of green values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of blue values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the creation was successful, false otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_palette_1aff9ca82ce8e82b801f6f119fc8887289" kindref="member">wxPalette()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1ae0b3f8ee520fcaffcbe4a35b4cf56c88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int wxPalette::GetColoursCount</definition>
        <argsstring>() const</argsstring>
        <name>GetColoursCount</name>
        <briefdescription>
<para>Returns number of entries in palette. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1aded666172c65ee06f45c5a2c393dd1a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxPalette::GetPixel</definition>
        <argsstring>(unsigned char red, unsigned char green, unsigned char blue) const</argsstring>
        <name>GetPixel</name>
        <param>
          <type>unsigned char</type>
          <declname>red</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>green</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Returns a pixel value (index into the palette) for the given RGB values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>Red value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>Green value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>Blue value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest palette index or <computeroutput>wxNOT_FOUND</computeroutput> for unexpected errors.</para></simplesect>
<simplesect kind="see"><para><ref refid="classwx_palette_1aaf1aee2c29a18bc3c2087cab76c09418" kindref="member">GetRGB()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1aaf1aee2c29a18bc3c2087cab76c09418" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxPalette::GetRGB</definition>
        <argsstring>(int pixel, unsigned char *red, unsigned char *green, unsigned char *blue) const</argsstring>
        <name>GetRGB</name>
        <param>
          <type>int</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>red</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>green</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Returns RGB values for a given palette index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>The palette index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the red value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the green value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the blue value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation was successful.</para></simplesect>
<bold>wxPerl Note:</bold> In wxPerl this method takes only the <emphasis>pixel</emphasis> parameter and returns a 3-element list (or the empty list upon failure).</para><para><simplesect kind="see"><para><ref refid="classwx_palette_1aded666172c65ee06f45c5a2c393dd1a9" kindref="member">GetPixel()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1a82713e81e9006f455513895e12546429" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool wxPalette::IsOk</definition>
        <argsstring>() const</argsstring>
        <name>IsOk</name>
        <briefdescription>
<para>Returns true if palette data is present. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_palette_1a69ff271555dbb2ad5ed0950840137c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_palette" kindref="compound">wxPalette</ref> &amp;</type>
        <definition>wxPalette&amp; wxPalette::operator=</definition>
        <argsstring>(const wxPalette &amp;palette)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classwx_palette" kindref="compound">wxPalette</ref> &amp;</type>
          <declname>palette</declname>
        </param>
        <briefdescription>
<para>Assignment operator, using <ref refid="overview_refcount" kindref="compound">Reference Counting</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/palette.h" line="155" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A palette is a table that maps pixel values to RGB colours. </para>    </briefdescription>
    <detaileddescription>
<para>It allows the colours of a low-depth bitmap, for example, to be mapped to the available colours in a display. The notion of palettes is becoming more and more obsolete nowadays and only the MSW port is still using a native palette. All other ports use generic code which is basically just an array of colours.</para><para>It is likely that in the future the only use for palettes within wxWidgets will be for representing colour indices from images (such as GIF or PNG). The image handlers for these formats have been modified to create a palette if there is such information in the original image file (usually 256 or less colour images). See <ref refid="classwx_image" kindref="compound">wxImage</ref> for more information.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxcore" kindref="member">wxCore</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para>Predefined objects/pointers: <ref refid="palette_8h_1a2ecbe58191b89a50dd5dd0643e29f708" kindref="member">wxNullPalette</ref></para><para><simplesect kind="see"><para><ref refid="classwx_d_c_1afc58b0f4653159e713377d38c84a120f" kindref="member">wxDC::SetPalette()</ref>, <ref refid="classwx_bitmap" kindref="compound">wxBitmap</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5107">
        <label>wxPalette</label>
        <link refid="classwx_palette"/>
        <childnode refid="5108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5109">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
      <node id="5108">
        <label>wxGDIObject</label>
        <link refid="classwx_g_d_i_object"/>
        <childnode refid="5109" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5110">
        <label>wxPalette</label>
        <link refid="classwx_palette"/>
        <childnode refid="5111" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5112">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="5113" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="5111">
        <label>wxGDIObject</label>
        <link refid="classwx_g_d_i_object"/>
        <childnode refid="5112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5113">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/palette.h" line="33" column="1" bodyfile="interface/wx/palette.h" bodystart="32" bodyend="156"/>
    <listofallmembers>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxPalette</scope><name>AllocExclusive</name></member>
      <member refid="classwx_object_1a436fc8fe68cf8a31000296d9cd3d2427" prot="protected" virt="virtual"><scope>wxPalette</scope><name>CloneRefData</name></member>
      <member refid="classwx_palette_1aeb040e229b732bc46dac0dc204f005f4" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>Create</name></member>
      <member refid="classwx_object_1a3f4f497c65cef611e121c41f21dd5ccc" prot="protected" virt="virtual"><scope>wxPalette</scope><name>CreateRefData</name></member>
      <member refid="classwx_object_1ae6d365f2556b26767ced8410c5e839d0" prot="public" virt="virtual"><scope>wxPalette</scope><name>GetClassInfo</name></member>
      <member refid="classwx_palette_1ae0b3f8ee520fcaffcbe4a35b4cf56c88" prot="public" virt="virtual"><scope>wxPalette</scope><name>GetColoursCount</name></member>
      <member refid="classwx_palette_1aded666172c65ee06f45c5a2c393dd1a9" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>GetPixel</name></member>
      <member refid="classwx_object_1af3c6c76a775864832f1536d3c0de3a2b" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>GetRefData</name></member>
      <member refid="classwx_palette_1aaf1aee2c29a18bc3c2087cab76c09418" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>GetRGB</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>IsKindOf</name></member>
      <member refid="classwx_palette_1a82713e81e9006f455513895e12546429" prot="public" virt="virtual"><scope>wxPalette</scope><name>IsOk</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>IsSameAs</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxPalette</scope><name>m_refData</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>operator new</name></member>
      <member refid="classwx_palette_1a69ff271555dbb2ad5ed0950840137c62" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>operator=</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>Ref</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>SetRefData</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>UnShare</name></member>
      <member refid="classwx_g_d_i_object_1a20ac442e0d24cf6250d7bd45f0d968d5" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>wxGDIObject</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>wxObject</name></member>
      <member refid="classwx_palette_1aff9ca82ce8e82b801f6f119fc8887289" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>wxPalette</name></member>
      <member refid="classwx_palette_1ab6e5c7d9f2fbc763120378e111dda828" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>wxPalette</name></member>
      <member refid="classwx_palette_1ac98e35c82e6e2e70bad9190a51067123" prot="public" virt="non-virtual"><scope>wxPalette</scope><name>wxPalette</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxPalette</scope><name>~wxObject</name></member>
      <member refid="classwx_palette_1a2b6a3346630aa048198e8344fc7d3995" prot="public" virt="virtual"><scope>wxPalette</scope><name>~wxPalette</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
