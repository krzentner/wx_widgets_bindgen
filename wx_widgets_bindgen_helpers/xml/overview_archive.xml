<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="overview_archive" kind="page">
    <compoundname>overview_archive</compoundname>
    <title>Archive Formats</title>
    <tableofcontents/>
    <briefdescription>
<para><linebreak/>
 The archive classes handle archive formats such as zip, tar, rar and cab. </para>    </briefdescription>
    <detaileddescription>
<para><linebreak/>
 The archive classes handle archive formats such as zip, tar, rar and cab.</para><para>Currently wxZip, wxTar and wxZlib classes are included.</para><para>For each archive type, there are the following classes (using zip here as an example):</para><para><itemizedlist>
<listitem><para><ref refid="classwx_zip_input_stream" kindref="compound">wxZipInputStream</ref>: Input stream </para></listitem>
<listitem><para><ref refid="classwx_zip_output_stream" kindref="compound">wxZipOutputStream</ref>: Output stream </para></listitem>
<listitem><para><ref refid="classwx_zip_entry" kindref="compound">wxZipEntry</ref>: Holds meta-data for an entry (e.g. filename, timestamp, etc.)</para></listitem>
</itemizedlist>
There are also abstract wxArchive classes that can be used to write code that can handle any of the archive types, see <ref refid="overview_archive_1overview_archive_generic" kindref="member">Generic Archive Programming</ref>.</para><para>Also see <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> for a higher level interface that can handle archive files in a generic way.</para><para>The classes are designed to handle archives on both seekable streams such as disk files, or non-seekable streams such as pipes and sockets (see <ref refid="overview_archive_1overview_archive_noseek" kindref="member">Archives on Non-Seekable Streams</ref>).</para><sect1 id="overview_archive_1overview_archive_create">
<title>Creating an Archive</title>
<para>Call <ref refid="classwx_archive_output_stream_1a4a5dd11b0dbd57b78a94315c9e841ceb" kindref="member">wxArchiveOutputStream::PutNextEntry()</ref> to create each new entry in the archive, then write the entry&apos;s data. Another call to PutNextEntry() closes the current entry and begins the next. For example:</para><para><programlisting><codeline><highlight class="normal">wxFFileOutputStream<sp/>out(wxT(&quot;test.zip&quot;));</highlight></codeline>
<codeline><highlight class="normal">wxZipOutputStream<sp/>zip(out);</highlight></codeline>
<codeline><highlight class="normal">wxTextOutputStream<sp/>txt(zip);</highlight></codeline>
<codeline><highlight class="normal">wxString<sp/>sep(wxFileName::GetPathSeparator());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">zip.PutNextEntry(wxT(&quot;entry1.txt&quot;));</highlight></codeline>
<codeline><highlight class="normal">txt<sp/>&lt;&lt;<sp/>wxT(&quot;Some<sp/>text<sp/>for<sp/>entry1.txt\n&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">zip.PutNextEntry(wxT(&quot;subdir&quot;)<sp/>+<sp/>sep<sp/>+<sp/>wxT(&quot;entry2.txt&quot;));</highlight></codeline>
<codeline><highlight class="normal">txt<sp/>&lt;&lt;<sp/>wxT(&quot;Some<sp/>text<sp/>for<sp/>subdir/entry2.txt\n&quot;);</highlight></codeline>
</programlisting></para><para>The name of each entry can be a full path, which makes it possible to store entries in subdirectories.</para></sect1>
<sect1 id="overview_archive_1overview_archive_extract">
<title>Extracting an Archive</title>
<para><ref refid="classwx_archive_input_stream_1a87615df48e5f57305aa360098f5dae26" kindref="member">wxArchiveInputStream::GetNextEntry()</ref> returns a pointer to entry object containing the meta-data for the next entry in the archive (and gives away ownership).</para><para>Reading from the input stream then returns the entry&apos;s data. Eof() becomes true after an attempt has been made to read past the end of the entry&apos;s data.</para><para>When there are no more entries, GetNextEntry() returns NULL and sets Eof().</para><para><programlisting><codeline><highlight class="normal">auto_ptr&lt;wxZipEntry&gt;<sp/>entry;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wxFFileInputStream<sp/>in(wxT(&quot;test.zip&quot;));</highlight></codeline>
<codeline><highlight class="normal">wxZipInputStream<sp/>zip(in);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>(entry.reset(zip.GetNextEntry()),<sp/>entry.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>access<sp/>meta-data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxString<sp/>name<sp/>=<sp/>entry-&gt;GetName();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>read<sp/>&apos;zip&apos;<sp/>to<sp/>access<sp/>the<sp/>entry&apos;s<sp/>data</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_archive_1overview_archive_modify">
<title>Modifying an Archive</title>
<para>To modify an existing archive, write a new copy of the archive to a new file, making any necessary changes along the way and transferring any unchanged entries using <ref refid="classwx_archive_output_stream_1acf19a29865cca24282fd163a20a4b137" kindref="member">wxArchiveOutputStream::CopyEntry()</ref>.</para><para>For archive types which compress entry data, CopyEntry() is likely to be much more efficient than transferring the data using Read() and Write() since it will copy them without decompressing and recompressing them.</para><para>In general modifications are not possible without rewriting the archive, though it may be possible in some limited cases. Even then, rewriting the archive is usually a better choice since a failure can be handled without losing the whole archive. <ref refid="classwx_temp_file_output_stream" kindref="compound">wxTempFileOutputStream</ref> can be helpful to do this.</para><para>For example to delete all entries matching the pattern &quot;*.txt&quot;:</para><para><programlisting><codeline><highlight class="normal">auto_ptr&lt;wxFFileInputStream&gt;<sp/>in(new<sp/>wxFFileInputStream(wxT(&quot;test.zip&quot;)));</highlight></codeline>
<codeline><highlight class="normal">wxTempFileOutputStream<sp/>out(wxT(&quot;test.zip&quot;));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">wxZipInputStream<sp/>inzip(*in);</highlight></codeline>
<codeline><highlight class="normal">wxZipOutputStream<sp/>outzip(out);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxZipEntry&gt;<sp/>entry;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>transfer<sp/>any<sp/>meta-data<sp/>for<sp/>the<sp/>archive<sp/>as<sp/>a<sp/>whole<sp/>(the<sp/>zip<sp/>comment</highlight></codeline>
<codeline><highlight class="normal">//<sp/>in<sp/>the<sp/>case<sp/>of<sp/>zip)</highlight></codeline>
<codeline><highlight class="normal">outzip.CopyArchiveMetaData(inzip);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>call<sp/>CopyEntry<sp/>for<sp/>each<sp/>entry<sp/>except<sp/>those<sp/>matching<sp/>the<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(entry.reset(inzip.GetNextEntry()),<sp/>entry.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!entry-&gt;GetName().Matches(wxT(&quot;*.txt&quot;)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!outzip.CopyEntry(entry.release(),<sp/>inzip))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>close<sp/>the<sp/>input<sp/>stream<sp/>by<sp/>releasing<sp/>the<sp/>pointer<sp/>to<sp/>it,<sp/>do<sp/>this</highlight></codeline>
<codeline><highlight class="normal">//<sp/>before<sp/>closing<sp/>the<sp/>output<sp/>stream<sp/>so<sp/>that<sp/>the<sp/>file<sp/>can<sp/>be<sp/>replaced</highlight></codeline>
<codeline><highlight class="normal">in.reset();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>you<sp/>can<sp/>check<sp/>for<sp/>success<sp/>as<sp/>follows</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>success<sp/>=<sp/>inzip.Eof()<sp/>&amp;&amp;<sp/>outzip.Close()<sp/>&amp;&amp;<sp/>out.Commit();</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_archive_1overview_archive_byname">
<title>Looking Up an Archive Entry by Name</title>
<para>Also see <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> for a higher level interface that is more convenient for accessing archive entries by name.</para><para>To open just one entry in an archive, the most efficient way is to simply search for it linearly by calling <ref refid="classwx_archive_input_stream_1a87615df48e5f57305aa360098f5dae26" kindref="member">wxArchiveInputStream::GetNextEntry()</ref> until the required entry is found. This works both for archives on seekable and non-seekable streams.</para><para>The format of filenames in the archive is likely to be different from the local filename format. For example zips and tars use unix style names, with forward slashes as the path separator, and absolute paths are not allowed. So if on Windows the file &quot;C:\MYDIR\MYFILE.TXT&quot; is stored, then when reading the entry back <ref refid="classwx_archive_entry_1a7f7c8fc858136626dcdf1865e646cef9" kindref="member">wxArchiveEntry::GetName()</ref> will return &quot;MYDIR\MYFILE.TXT&quot;. The conversion into the internal format and back has lost some information.</para><para>So to avoid ambiguity when searching for an entry matching a local name, it is better to convert the local name to the archive&apos;s internal format and search for that:</para><para><programlisting><codeline><highlight class="normal">auto_ptr&lt;wxZipEntry&gt;<sp/>entry;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>convert<sp/>the<sp/>local<sp/>name<sp/>we<sp/>are<sp/>looking<sp/>for<sp/>into<sp/>the<sp/>internal<sp/>format</highlight></codeline>
<codeline><highlight class="normal">wxString<sp/>name<sp/>=<sp/>wxZipEntry::GetInternalName(localname);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>open<sp/>the<sp/>zip</highlight></codeline>
<codeline><highlight class="normal">wxFFileInputStream<sp/>in(wxT(&quot;test.zip&quot;));</highlight></codeline>
<codeline><highlight class="normal">wxZipInputStream<sp/>zip(in);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>call<sp/>GetNextEntry()<sp/>until<sp/>the<sp/>required<sp/>internal<sp/>name<sp/>is<sp/>found</highlight></codeline>
<codeline><highlight class="normal">do</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>entry.reset(zip.GetNextEntry());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(entry.get()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>entry-&gt;GetInternalName()<sp/>!=<sp/>name);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(entry.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>read<sp/>the<sp/>entry&apos;s<sp/>data...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>To access several entries randomly, it is most efficient to transfer the entire catalogue of entries to a container such as a std::map or a <ref refid="classwx_hash_map" kindref="compound">wxHashMap</ref> then entries looked up by name can be opened using the <ref refid="classwx_archive_input_stream_1abb0e2896bbb5b50b7cef95cfdd8fb8e5" kindref="member">wxArchiveInputStream::OpenEntry()</ref> method.</para><para><programlisting><codeline><highlight class="normal">WX_DECLARE_STRING_HASH_MAP(wxZipEntry*,<sp/>ZipCatalog);</highlight></codeline>
<codeline><highlight class="normal">ZipCatalog::iterator<sp/>it;</highlight></codeline>
<codeline><highlight class="normal">wxZipEntry<sp/>*entry;</highlight></codeline>
<codeline><highlight class="normal">ZipCatalog<sp/>cat;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>open<sp/>the<sp/>zip</highlight></codeline>
<codeline><highlight class="normal">wxFFileInputStream<sp/>in(wxT(&quot;test.zip&quot;));</highlight></codeline>
<codeline><highlight class="normal">wxZipInputStream<sp/>zip(in);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>load<sp/>the<sp/>zip<sp/>catalog</highlight></codeline>
<codeline><highlight class="normal">while<sp/>((entry<sp/>=<sp/>zip.GetNextEntry())<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxZipEntry*&amp;<sp/>current<sp/>=<sp/>cat[entry-&gt;GetInternalName()];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>some<sp/>archive<sp/>formats<sp/>can<sp/>have<sp/>multiple<sp/>entries<sp/>with<sp/>the<sp/>same<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(e.g.<sp/>tar)<sp/>though<sp/>it<sp/>is<sp/>an<sp/>error<sp/>in<sp/>the<sp/>case<sp/>of<sp/>zip</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>current;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>entry;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>open<sp/>an<sp/>entry<sp/>by<sp/>name</highlight></codeline>
<codeline><highlight class="normal">if<sp/>((it<sp/>=<sp/>cat.find(wxZipEntry::GetInternalName(localname)))<sp/>!=<sp/>cat.end())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zip.OpenEntry(*it-&gt;second);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...<sp/>now<sp/>read<sp/>entry&apos;s<sp/>data</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>To open more than one entry simultaneously you need more than one underlying stream on the same archive:</para><para><programlisting><codeline><highlight class="normal">//<sp/>opening<sp/>another<sp/>entry<sp/>without<sp/>closing<sp/>the<sp/>first<sp/>requires<sp/>another</highlight></codeline>
<codeline><highlight class="normal">//<sp/>input<sp/>stream<sp/>for<sp/>the<sp/>same<sp/>file</highlight></codeline>
<codeline><highlight class="normal">wxFFileInputStream<sp/>in2(wxT(&quot;test.zip&quot;));</highlight></codeline>
<codeline><highlight class="normal">wxZipInputStream<sp/>zip2(in2);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>((it<sp/>=<sp/>cat.find(wxZipEntry::GetInternalName(local2)))<sp/>!=<sp/>cat.end())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zip2.OpenEntry(*it-&gt;second);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_archive_1overview_archive_generic">
<title>Generic Archive Programming</title>
<para>Also see <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> for a higher level interface that can handle archive files in a generic way.</para><para>The specific archive classes, such as the wxZip classes, inherit from the following abstract classes which can be used to write code that can handle any of the archive types:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_archive_input_stream" kindref="compound">wxArchiveInputStream</ref>: Input stream </para></listitem>
<listitem><para><ref refid="classwx_archive_output_stream" kindref="compound">wxArchiveOutputStream</ref>: Output stream </para></listitem>
<listitem><para><ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref>: Holds the meta-data for an entry (e.g. filename)</para></listitem>
</itemizedlist>
In order to able to write generic code it&apos;s necessary to be able to create instances of the classes without knowing which archive type is being used.</para><para>To allow this there is a class factory for each archive type, derived from <ref refid="classwx_archive_class_factory" kindref="compound">wxArchiveClassFactory</ref>, that can create the other classes.</para><para>For example, given wxArchiveClassFactory* factory, streams and entries can be created like this:</para><para><programlisting><codeline><highlight class="normal">//<sp/>create<sp/>streams<sp/>without<sp/>knowing<sp/>their<sp/>type</highlight></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxArchiveInputStream&gt;<sp/>inarc(factory-&gt;NewStream(in));</highlight></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxArchiveOutputStream&gt;<sp/>outarc(factory-&gt;NewStream(out));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>create<sp/>an<sp/>empty<sp/>entry<sp/>object</highlight></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxArchiveEntry&gt;<sp/>entry(factory-&gt;NewEntry());</highlight></codeline>
</programlisting></para><para>For the factory itself, the static member <ref refid="classwx_archive_class_factory_1ad9f083561596ee377cea71a0125d3c3b" kindref="member">wxArchiveClassFactory::Find()</ref> can be used to find a class factory that can handle a given file extension or mime type. For example, given <emphasis>filename:</emphasis> </para><para><programlisting><codeline><highlight class="normal">const<sp/>wxArchiveClassFactory<sp/>*factory;</highlight></codeline>
<codeline><highlight class="normal">factory<sp/>=<sp/>wxArchiveClassFactory::Find(filename,<sp/>wxSTREAM_FILEEXT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(factory)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>=<sp/>factory-&gt;NewStream(new<sp/>wxFFileInputStream(filename));</highlight></codeline>
</programlisting></para><para><emphasis>Find()</emphasis> does not give away ownership of the returned pointer, so it does not need to be deleted.</para><para>There are similar class factories for the filter streams that handle the compression and decompression of a single stream, such as wxGzipInputStream. These can be found using <ref refid="classwx_filter_class_factory_1a689a3e8a0ea3bd8678f020cfb723f54f" kindref="member">wxFilterClassFactory::Find()</ref>.</para><para>For example, to list the contents of archive <emphasis>filename:</emphasis> </para><para><programlisting><codeline><highlight class="normal">auto_ptr&lt;wxInputStream&gt;<sp/>in(new<sp/>wxFFileInputStream(filename));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(in-&gt;IsOk())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>look<sp/>for<sp/>a<sp/>filter<sp/>handler,<sp/>e.g.<sp/>for<sp/>&apos;.gz&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>wxFilterClassFactory<sp/>*fcf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fcf<sp/>=<sp/>wxFilterClassFactory::Find(filename,<sp/>wxSTREAM_FILEEXT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fcf)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.reset(fcf-&gt;NewStream(in.release()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pop<sp/>the<sp/>extension,<sp/>so<sp/>if<sp/>it<sp/>was<sp/>&apos;.tar.gz&apos;<sp/>it<sp/>is<sp/>now<sp/>just<sp/>&apos;.tar&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>fcf-&gt;PopExtension(filename);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>look<sp/>for<sp/>a<sp/>archive<sp/>handler,<sp/>e.g.<sp/>for<sp/>&apos;.zip&apos;<sp/>or<sp/>&apos;.tar&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>wxArchiveClassFactory<sp/>*acf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acf<sp/>=<sp/>wxArchiveClassFactory::Find(filename,<sp/>wxSTREAM_FILEEXT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(acf)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto_ptr&lt;wxArchiveInputStream&gt;<sp/>arc(acf-&gt;NewStream(in.release()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto_ptr&lt;wxArchiveEntry&gt;<sp/>entry;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>list<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>archive</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>((entry.reset(arc-&gt;GetNextEntry())),<sp/>entry.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::wcout<sp/>&lt;&lt;<sp/>entry-&gt;GetName().c_str()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxLogError(wxT(&quot;can&apos;t<sp/>handle<sp/>&apos;%s&apos;&quot;),<sp/>filename.c_str());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview_archive_1overview_archive_noseek">
<title>Archives on Non-Seekable Streams</title>
<para>In general, handling archives on non-seekable streams is done in the same way as for seekable streams, with a few caveats.</para><para>The main limitation is that accessing entries randomly using <ref refid="classwx_archive_input_stream_1abb0e2896bbb5b50b7cef95cfdd8fb8e5" kindref="member">wxArchiveInputStream::OpenEntry()</ref> is not possible, the entries can only be accessed sequentially in the order they are stored within the archive.</para><para>For each archive type, there will also be other limitations which will depend on the order the entries&apos; meta-data is stored within the archive. These are not too difficult to deal with, and are outlined below.</para><sect2 id="overview_archive_1overview_archive_noseek_entrysize">
<title>PutNextEntry and the Entry Size</title>
<para>When writing archives, some archive formats store the entry size before the entry&apos;s data (tar has this limitation, zip doesn&apos;t). In this case the entry&apos;s size must be passed to <ref refid="classwx_archive_output_stream_1a4a5dd11b0dbd57b78a94315c9e841ceb" kindref="member">wxArchiveOutputStream::PutNextEntry()</ref> or an error occurs.</para><para>This is only an issue on non-seekable streams, since otherwise the archive output stream can seek back and fix up the header once the size of the entry is known.</para><para>For generic programming, one way to handle this is to supply the size whenever it is known, and rely on the error message from the output stream when the operation is not supported.</para></sect2>
<sect2 id="overview_archive_1overview_archive_noseek_weak">
<title>GetNextEntry and the Weak Reference Mechanism</title>
<para>Some archive formats do not store all an entry&apos;s meta-data before the entry&apos;s data (zip is an example). In this case, when reading from a non-seekable stream, <ref refid="classwx_archive_input_stream_1a87615df48e5f57305aa360098f5dae26" kindref="member">wxArchiveInputStream::GetNextEntry()</ref> can only return a partially populated <ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref> object - not all the fields are set.</para><para>The input stream then keeps a weak reference to the entry object and updates it when more meta-data becomes available. A weak reference being one that does not prevent you from deleting the <ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref> object - the input stream only attempts to update it if it is still around.</para><para>The documentation for each archive entry type gives the details of what meta-data becomes available and when. For generic programming, when the worst case must be assumed, you can rely on all the fields of <ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref> being fully populated when GetNextEntry() returns, with the following exceptions:</para><para><itemizedlist>
<listitem><para><ref refid="classwx_archive_entry_1a05d8c0618a80cb1ada5c37a58042ec32" kindref="member">wxArchiveEntry::GetSize()</ref>: Guaranteed to be available after the entry has been read to <ref refid="classwx_input_stream_1a632ef01c45abc66f6e39db9b25f5ebde" kindref="member">wxInputStream::Eof()</ref>, or <ref refid="classwx_archive_input_stream_1a091c14b91d891de1014a53251dc7835e" kindref="member">wxArchiveInputStream::CloseEntry()</ref> has been called. </para></listitem>
<listitem><para><ref refid="classwx_archive_entry_1abe30c2532550d23136cf6e1390007073" kindref="member">wxArchiveEntry::IsReadOnly()</ref>: Guaranteed to be available after the end of the archive has been reached, i.e. after GetNextEntry() returns NULL and Eof() is true.</para></listitem>
</itemizedlist>
This mechanism allows <ref refid="classwx_archive_output_stream_1acf19a29865cca24282fd163a20a4b137" kindref="member">wxArchiveOutputStream::CopyEntry()</ref> to always fully preserve entries&apos; meta-data. No matter what order order the meta-data occurs within the archive, the input stream will always have read it before the output stream must write it.</para></sect2>
<sect2 id="overview_archive_1overview_archive_noseek_notifier">
<title>wxArchiveNotifier</title>
<para>Notifier objects can be used to get a notification whenever an input stream updates a <ref refid="classwx_archive_entry" kindref="compound">wxArchiveEntry</ref> object&apos;s data via the weak reference mechanism.</para><para>Consider the following code which renames an entry in an archive. This is the usual way to modify an entry&apos;s meta-data, simply set the required field before writing it with <ref refid="classwx_archive_output_stream_1acf19a29865cca24282fd163a20a4b137" kindref="member">wxArchiveOutputStream::CopyEntry()</ref>:</para><para><programlisting><codeline><highlight class="normal">auto_ptr&lt;wxArchiveInputStream&gt;<sp/>arc(factory-&gt;NewStream(in));</highlight></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxArchiveOutputStream&gt;<sp/>outarc(factory-&gt;NewStream(out));</highlight></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxArchiveEntry&gt;<sp/>entry;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">outarc-&gt;CopyArchiveMetaData(*arc);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>(entry.reset(arc-&gt;GetNextEntry()),<sp/>entry.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(entry-&gt;GetName()<sp/>==<sp/>from)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;SetName(to);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!outarc-&gt;CopyEntry(entry.release(),<sp/>*arc))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>success<sp/>=<sp/>arc-&gt;Eof()<sp/>&amp;&amp;<sp/>outarc-&gt;Close();</highlight></codeline>
</programlisting></para><para>However, for non-seekable streams, this technique cannot be used for fields such as <ref refid="classwx_archive_entry_1abe30c2532550d23136cf6e1390007073" kindref="member">wxArchiveEntry::IsReadOnly()</ref>, which are not necessarily set when <ref refid="classwx_archive_input_stream_1a87615df48e5f57305aa360098f5dae26" kindref="member">wxArchiveInputStream::GetNextEntry()</ref> returns.</para><para>In this case a <ref refid="classwx_archive_notifier" kindref="compound">wxArchiveNotifier</ref> can be used:</para><para><programlisting><codeline><highlight class="normal">class<sp/>MyNotifier<sp/>:<sp/>public<sp/>wxArchiveNotifier</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>OnEntryUpdated(wxArchiveEntry&amp;<sp/>entry)<sp/>{<sp/>entry.SetIsReadOnly(false);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>The meta-data changes are done in your notifier&apos;s <ref refid="classwx_archive_notifier_1aabc8d85fc2f85b38a761e3b4ccf74f5a" kindref="member">wxArchiveNotifier::OnEntryUpdated()</ref> method, then <ref refid="classwx_archive_entry_1a14fe1a270dbb1d0e9a76e2c3c8dd32a8" kindref="member">wxArchiveEntry::SetNotifier()</ref> is called before CopyEntry():</para><para><programlisting><codeline><highlight class="normal">auto_ptr&lt;wxArchiveInputStream&gt;<sp/>arc(factory-&gt;NewStream(in));</highlight></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxArchiveOutputStream&gt;<sp/>outarc(factory-&gt;NewStream(out));</highlight></codeline>
<codeline><highlight class="normal">auto_ptr&lt;wxArchiveEntry&gt;<sp/>entry;</highlight></codeline>
<codeline><highlight class="normal">MyNotifier<sp/>notifier;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">outarc-&gt;CopyArchiveMetaData(*arc);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>(entry.reset(arc-&gt;GetNextEntry()),<sp/>entry.get()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>entry-&gt;SetNotifier(notifier);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!outarc-&gt;CopyEntry(entry.release(),<sp/>*arc))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>success<sp/>=<sp/>arc-&gt;Eof()<sp/>&amp;&amp;<sp/>outarc-&gt;Close();</highlight></codeline>
</programlisting></para><para>SetNotifier() calls OnEntryUpdated() immediately, then the input stream calls it again whenever it sets more fields in the entry. Since OnEntryUpdated() will be called at least once, this technique always works even when it is not strictly necessary to use it. For example, changing the entry name can be done this way too and it works on seekable streams as well as non-seekable. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
