<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="overview_mbconv" kind="page">
    <compoundname>overview_mbconv</compoundname>
    <title>wxMBConv Overview</title>
    <tableofcontents/>
    <briefdescription>
<para><linebreak/>
 The <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> classes in wxWidgets enable an Unicode-aware application to easily convert between Unicode and the variety of 8-bit encoding systems still in use. </para>    </briefdescription>
    <detaileddescription>
<para><linebreak/>
 The <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> classes in wxWidgets enable an Unicode-aware application to easily convert between Unicode and the variety of 8-bit encoding systems still in use.</para><para><simplesect kind="see"><para><ref refid="group__group__class__conv" kindref="compound">Text Conversion</ref></para></simplesect>
</para><sect1 id="overview_mbconv_1overview_mbconv_need">
<title>Background: The Need for Conversion</title>
<para>As programs are becoming more and more globalized, and users exchange documents across country boundaries as never before, applications increasingly need to take into account all the different character sets in use around the world. It is no longer enough to just depend on the default byte-sized character set that computers have traditionally used.</para><para>A few years ago, a solution was proposed: the Unicode standard. Able to contain the complete set of characters in use in one unified global coding system, it would resolve the character set problems once and for all.</para><para>But it hasn&apos;t happened yet, and the migration towards Unicode has created new challenges, resulting in &quot;compatibility encodings&quot; such as UTF-8. A large number of systems out there still depends on the old 8-bit encodings, hampered by the huge amounts of legacy code still widely deployed. Even sending Unicode data from one Unicode-aware system to another may need encoding to an 8-bit multibyte encoding (UTF-7 or UTF-8 is typically used for this purpose), to pass unhindered through any traditional transport channels.</para></sect1>
<sect1 id="overview_mbconv_1overview_mbconv_string">
<title>Background: The wxString Class</title>
<para><xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>rewrite this overview; it&apos;s not up2date with <ref refid="classwx_string" kindref="compound">wxString</ref> changes</para></xrefdescription></xrefsect></para><para>If you have compiled wxWidgets in Unicode mode, the wxChar type will become identical to wchar_t rather than char, and a <ref refid="classwx_string" kindref="compound">wxString</ref> stores wxChars. Hence, all <ref refid="classwx_string" kindref="compound">wxString</ref> manipulation in your application will then operate on Unicode strings, and almost as easily as working with ordinary char strings (you just need to remember to use the <ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref> macro to encapsulate any string literals).</para><para>But often, your environment doesn&apos;t want Unicode strings. You could be sending data over a network, or processing a text file for some other application. You need a way to quickly convert your easily-handled Unicode data to and from a traditional 8-bit encoding. And this is what the <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> classes do.</para></sect1>
<sect1 id="overview_mbconv_1overview_mbconv_classes">
<title>wxMBConv Classes</title>
<para>The base class for all these conversions is the <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> class (which itself implements standard libc locale conversion). Derived classes include wxMBConvLibc, several different wxMBConvUTFxxx classes, and <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref>, which implement different kinds of conversions. You can also derive your own class for your own custom encoding and use it, should you need it. All you need to do is override the MB2WC and WC2MB methods.</para></sect1>
<sect1 id="overview_mbconv_1overview_mbconv_objects">
<title>wxMBConv Objects</title>
<para>Several of the wxWidgets-provided <ref refid="classwx_m_b_conv" kindref="compound">wxMBConv</ref> classes have predefined instances (wxConvLibc, wxConvFileName, wxConvUTF7, wxConvUTF8, wxConvLocal). You can use these predefined objects directly, or you can instantiate your own objects.</para><para>A variable, wxConvCurrent, points to the conversion object that the user interface is supposed to use, in the case that the user interface is not Unicode-based (like with GTK+ 1.2). By default, it points to wxConvLibc or wxConvLocal, depending on which works best on the current platform.</para></sect1>
<sect1 id="overview_mbconv_1overview_mbconv_csconv">
<title>wxCSConv</title>
<para>The <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref> class is special because when it is instantiated, you can tell it which character set it should use, which makes it meaningful to keep many instances of them around, each with a different character set (or you can create a <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref> instance on the fly).</para><para>The predefined <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref> instance, wxConvLocal, is preset to use the default user character set, but you should rarely need to use it directly, it is better to go through wxConvCurrent.</para></sect1>
<sect1 id="overview_mbconv_1overview_mbconv_converting">
<title>Converting Strings</title>
<para>Once you have chosen which object you want to use to convert your text, here is how you would use them with <ref refid="classwx_string" kindref="compound">wxString</ref>. These examples all assume that you are using a Unicode build of wxWidgets, although they will still compile in a non-Unicode build (they just won&apos;t convert anything).</para><para>Example 1: Constructing a <ref refid="classwx_string" kindref="compound">wxString</ref> from input in current encoding.</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>str(input_data,<sp/>*wxConvCurrent);</highlight></codeline>
</programlisting></para><para>Example 2: Input in UTF-8 encoding.</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>str(input_data,<sp/>wxConvUTF8);</highlight></codeline>
</programlisting></para><para>Example 3: Input in KOI8-R. Construction of <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref> instance on the fly.</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>str(input_data,<sp/>wxCSConv(wxT(&quot;koi8-r&quot;)));</highlight></codeline>
</programlisting></para><para>Example 4: Printing a <ref refid="classwx_string" kindref="compound">wxString</ref> to stdout in UTF-8 encoding.</para><para><programlisting><codeline><highlight class="normal">puts(str.mb_str(wxConvUTF8));</highlight></codeline>
</programlisting></para><para>Example 5: Printing a <ref refid="classwx_string" kindref="compound">wxString</ref> to stdout in custom encoding. Using preconstructed <ref refid="classwx_c_s_conv" kindref="compound">wxCSConv</ref> instance.</para><para><programlisting><codeline><highlight class="normal">wxCSConv<sp/>cust(user_encoding);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Data:<sp/>%s\n&quot;,<sp/>(const<sp/>char*)<sp/>str.mb_str(cust));</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Since mb_str() returns a temporary <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref> to hold the result of the conversion, you need to explicitly cast it to const char* if you use it in a vararg context (like with printf).</para></simplesect>
</para></sect1>
<sect1 id="overview_mbconv_1overview_mbconv_buffers">
<title>Converting Buffers</title>
<para>If you have specialized needs, or just don&apos;t want to use <ref refid="classwx_string" kindref="compound">wxString</ref>, you can also use the conversion methods of the conversion objects directly. This can even be useful if you need to do conversion in a non-Unicode build of wxWidgets; converting a string from UTF-8 to the current encoding should be possible by doing this:</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>str(wxConvUTF8.cMB2WC(input_data),<sp/>*wxConvCurrent);</highlight></codeline>
</programlisting></para><para>Here, cMB2WC of the UTF8 object returns a <ref refid="classwx_w_char_buffer" kindref="compound">wxWCharBuffer</ref> containing a Unicode string. The <ref refid="classwx_string" kindref="compound">wxString</ref> constructor then converts it back to an 8-bit character set using the passed conversion object, *wxConvCurrent. (In a Unicode build of wxWidgets, the constructor ignores the passed conversion object and retains the Unicode data.)</para><para>This could also be done by first making a <ref refid="classwx_string" kindref="compound">wxString</ref> of the original data:</para><para><programlisting><codeline><highlight class="normal">wxString<sp/>input_str(input_data);</highlight></codeline>
<codeline><highlight class="normal">wxString<sp/>str(input_str.wc_str(wxConvUTF8),<sp/>*wxConvCurrent);</highlight></codeline>
</programlisting></para><para>To print a wxChar buffer to a non-Unicode stdout:</para><para><programlisting><codeline><highlight class="normal">printf(&quot;Data:<sp/>%s\n&quot;,<sp/>(const<sp/>char*)<sp/>wxConvCurrent-&gt;cWX2MB(unicode_data));</highlight></codeline>
</programlisting></para><para>If you need to do more complex processing on the converted data, you may want to store the temporary buffer in a local variable:</para><para><programlisting><codeline><highlight class="normal">const<sp/>wxWX2MBbuf<sp/>tmp_buf<sp/>=<sp/>wxConvCurrent-&gt;cWX2MB(unicode_data);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char<sp/>*tmp_str<sp/>=<sp/>(const<sp/>char*)<sp/>tmp_buf;</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Data:<sp/>%s\n&quot;,<sp/>tmp_str);</highlight></codeline>
<codeline><highlight class="normal">process_data(tmp_str);</highlight></codeline>
</programlisting></para><para>If a conversion had taken place in cWX2MB (i.e. in a Unicode build), the buffer will be deallocated as soon as tmp_buf goes out of scope. The macro wxWX2MBbuf reflects the correct return value of cWX2MB (either char* or <ref refid="classwx_char_buffer" kindref="compound">wxCharBuffer</ref>), except for the const. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
