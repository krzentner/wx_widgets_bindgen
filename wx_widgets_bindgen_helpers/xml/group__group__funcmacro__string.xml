<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="group__group__funcmacro__string" kind="group">
    <compoundname>group_funcmacro_string</compoundname>
    <title>Strings</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" prot="public" static="no">
        <type>wxUSE_UNICODE_dependent</type>
        <definition>typedef wxUSE_UNICODE_dependent wxChar</definition>
        <argsstring></argsstring>
        <name>wxChar</name>
        <briefdescription>
<para>wxChar is defined to be - <computeroutput>char</computeroutput> when <computeroutput>wxUSE_UNICODE==0</computeroutput> - <computeroutput>wchar_t</computeroutput> when <computeroutput>wxUSE_UNICODE==1</computeroutput> (the default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="105" column="1" bodyfile="interface/wx/chartype.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__funcmacro__string_1ga8e3a080c0791e25bc023ae714000b857" prot="public" static="no">
        <type>wxUSE_UNICODE_dependent</type>
        <definition>typedef wxUSE_UNICODE_dependent wxSChar</definition>
        <argsstring></argsstring>
        <name>wxSChar</name>
        <briefdescription>
<para>wxSChar is defined to be - <computeroutput>signed char</computeroutput> when <computeroutput>wxUSE_UNICODE==0</computeroutput> - <computeroutput>wchar_t</computeroutput> when <computeroutput>wxUSE_UNICODE==1</computeroutput> (the default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="112" column="1" bodyfile="interface/wx/chartype.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__funcmacro__string_1gae3ec56a3be7315129896a206d06963db" prot="public" static="no">
        <type>wxUSE_UNICODE_dependent</type>
        <definition>typedef wxUSE_UNICODE_dependent wxUChar</definition>
        <argsstring></argsstring>
        <name>wxUChar</name>
        <briefdescription>
<para>wxUChar is defined to be - <computeroutput>unsigned char</computeroutput> when <computeroutput>wxUSE_UNICODE==0</computeroutput> - <computeroutput>wchar_t</computeroutput> when <computeroutput>wxUSE_UNICODE==1</computeroutput> (the default). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="119" column="1" bodyfile="interface/wx/chartype.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__funcmacro__string_1gaf558f1d34fbf3cf5e3258e42a40875fd" prot="public" static="no">
        <type>wxUSE_UNICODE_WCHAR_dependent</type>
        <definition>typedef wxUSE_UNICODE_WCHAR_dependent wxStringCharType</definition>
        <argsstring></argsstring>
        <name>wxStringCharType</name>
        <briefdescription>
<para>wxStringCharType is defined to be: - <computeroutput>char</computeroutput> when <computeroutput>wxUSE_UNICODE==0</computeroutput> - <computeroutput>char</computeroutput> when <computeroutput>wxUSE_UNICODE_WCHAR==0</computeroutput> and <computeroutput>wxUSE_UNICODE==1</computeroutput> - <computeroutput>wchar_t</computeroutput> when <computeroutput>wxUSE_UNICODE_WCHAR==1</computeroutput> and <computeroutput>wxUSE_UNICODE==1</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>wxUSE_UNICODE_WCHAR</computeroutput> symbol is defined to <computeroutput>1</computeroutput> when building on Windows while it&apos;s defined to <computeroutput>0</computeroutput> when building on Unix, Linux or OS X. (Note that <computeroutput>wxUSE_UNICODE_UTF8</computeroutput> symbol is defined as the opposite of <computeroutput>wxUSE_UNICODE_WCHAR</computeroutput>.)</para><para>Note that wxStringCharType (as the name says) is the type used by <ref refid="classwx_string" kindref="compound">wxString</ref> for internal storage of the characters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="135" column="1" bodyfile="interface/wx/chartype.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__funcmacro__string_1ga85fc91fd1a0744673e65d48cbfbaeb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref></type>
        <definition>wxArrayString wxSplit</definition>
        <argsstring>(const wxString &amp;str, const wxChar sep, const wxChar escape=&apos;\\&apos;)</argsstring>
        <name>wxSplit</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref></type>
          <declname>sep</declname>
        </param>
        <param>
          <type>const <ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref></type>
          <declname>escape</declname>
          <defval>&apos;\\&apos;</defval>
        </param>
        <briefdescription>
<para>Splits the given <ref refid="classwx_string" kindref="compound">wxString</ref> object using the separator <emphasis>sep</emphasis> and returns the result as a <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the <emphasis>escape</emphasis> character is non-NULL, then the occurrences of <emphasis>sep</emphasis> immediately prefixed with <emphasis>escape</emphasis> are not considered as separators. Note that empty tokens will be generated if there are two or more adjacent separators.</para><para><simplesect kind="see"><para><ref refid="group__group__funcmacro__string_1gac199d7b96fb5b8b0e38ea46516c83cea" kindref="member">wxJoin()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/arrstr.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__string_1gac199d7b96fb5b8b0e38ea46516c83cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxJoin</definition>
        <argsstring>(const wxArrayString &amp;arr, const wxChar sep, const wxChar escape=&apos;\\&apos;)</argsstring>
        <name>wxJoin</name>
        <param>
          <type>const <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const <ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref></type>
          <declname>sep</declname>
        </param>
        <param>
          <type>const <ref refid="group__group__funcmacro__string_1gad42f64d8c82f1ce4ae58773a89b2d6a7" kindref="member">wxChar</ref></type>
          <declname>escape</declname>
          <defval>&apos;\\&apos;</defval>
        </param>
        <briefdescription>
<para>Concatenate all lines of the given <ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> object using the separator <emphasis>sep</emphasis> and returns the result as a <ref refid="classwx_string" kindref="compound">wxString</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the <emphasis>escape</emphasis> character is non-NULL, then it&apos;s used as prefix for each occurrence of <emphasis>sep</emphasis> in the strings contained in <emphasis>arr</emphasis> before joining them which is necessary in order to be able to recover the original array contents from the string later using <ref refid="group__group__funcmacro__string_1ga85fc91fd1a0744673e65d48cbfbaeb8d" kindref="member">wxSplit()</ref>.</para><para><simplesect kind="see"><para><ref refid="group__group__funcmacro__string_1ga85fc91fd1a0744673e65d48cbfbaeb8d" kindref="member">wxSplit()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/arrstr.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/arrstr.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__string_1ga0332cedcef776c7c55443612b12c5bef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool(T)(const <ref refid="classwx_uni_char" kindref="compound">wxUniChar</ref> &amp;c)</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool wxStringCheck</definition>
        <argsstring>(const wxString &amp;val)</argsstring>
        <name>wxStringCheck</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Allows to extend a function with the signature: </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">bool<sp/>SomeFunc(const<sp/>wxUniChar&amp;<sp/>c)<sp/></highlight></codeline>
</programlisting> which operates on a single character, to an entire <ref refid="classwx_string" kindref="compound">wxString</ref>.</para><para>E.g. if you want to check if an entire string contains only digits, you can do: <programlisting><codeline><highlight class="normal">if<sp/>(wxStringCheck&lt;wxIsdigit&gt;(myString))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/>//<sp/>the<sp/>entire<sp/>string<sp/>contains<sp/>only<sp/>digits!</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/>//<sp/>at<sp/>least<sp/>one<sp/>character<sp/>of<sp/>myString<sp/>is<sp/>not<sp/>a<sp/>digit</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>true if the given function returns a non-zero value for all characters of the <emphasis>val</emphasis> string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/string.h" line="2050" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__string_1ga2c25293c0f273b78001e02313ca20d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref></type>
        <definition>wxArrayString wxStringTokenize</definition>
        <argsstring>(const wxString &amp;str, const wxString &amp;delims=wxDEFAULT_DELIMITERS, wxStringTokenizerMode mode=wxTOKEN_DEFAULT)</argsstring>
        <name>wxStringTokenize</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>delims</declname>
          <defval><ref refid="tokenzr_8h_1a58f42335052e241a3ee01fd735263922" kindref="member">wxDEFAULT_DELIMITERS</ref></defval>
        </param>
        <param>
          <type><ref refid="tokenzr_8h_1a8203239377764e04822e52b33ee02f9f" kindref="member">wxStringTokenizerMode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="tokenzr_8h_1a8203239377764e04822e52b33ee02f9fa47d7692cd4311164d35b0b7a0770f533" kindref="member">wxTOKEN_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>This is a convenience function wrapping <ref refid="classwx_string_tokenizer" kindref="compound">wxStringTokenizer</ref> which simply returns all tokens found in the given <emphasis>str</emphasis> as an array. </para>        </briefdescription>
        <detaileddescription>
<para>Please see <ref refid="classwx_string_tokenizer_1a59aa6a8673730d97a235c9a77ee93866" kindref="member">wxStringTokenizer::wxStringTokenizer</ref> for the description of the other parameters.</para><para><simplesect kind="return"><para>The array with the parsed tokens.</para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/tokenzr.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/tokenzr.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString&amp; wxGetTranslation</definition>
        <argsstring>(const wxString &amp;string, const wxString &amp;domain=wxEmptyString)</argsstring>
        <name>wxGetTranslation</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>domain</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <briefdescription>
<para>This function returns the translation of <emphasis>string</emphasis> in the current <computeroutput>locale()</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If the string is not found in any of the loaded message catalogs (see <ref refid="overview_i18n" kindref="compound">Internationalization</ref>), the original string is returned. In debug build, an error message is logged <ndash/> this should help to find the strings which were not yet translated. If <emphasis>domain</emphasis> is specified then only that domain/catalog is searched for a matching string. As this function is used very often, an alternative (and also common in Unix world) syntax is provided: the <ref refid="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" kindref="member">_()</ref> macro is defined to do the same thing as <ref refid="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" kindref="member">wxGetTranslation()</ref>.</para><para>This function is thread-safe.</para><para><simplesect kind="note"><para>This function is not suitable for literal strings in Unicode builds since the literal strings must be enclosed in <ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref> macro which makes them unrecognised by <computeroutput>xgettext</computeroutput>, and so they are not extracted to the message catalog. Instead, use the <ref refid="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" kindref="member">_()</ref> and <ref refid="group__group__funcmacro__string_1gadc7c2f1bab3914af93feb47945003409" kindref="member">wxPLURAL()</ref> macro for all literal strings.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__group__funcmacro__string_1ga6810b710e8860fa7088fc454feb9ecb1" kindref="member">wxGetTranslation(const wxString&amp;, const wxString&amp;, unsigned, const wxString&amp;)</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/intl.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/translation.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__string_1ga6810b710e8860fa7088fc454feb9ecb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString&amp; wxGetTranslation</definition>
        <argsstring>(const wxString &amp;string, const wxString &amp;plural, unsigned n, const wxString &amp;domain=wxEmptyString)</argsstring>
        <name>wxGetTranslation</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>plural</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>domain</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded version of <ref refid="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" kindref="member">wxGetTranslation(const wxString&amp;, const wxString&amp;)</ref>, please see its documentation for general information. </para>        </briefdescription>
        <detaileddescription>
<para>This version is used when retrieving translation of string that has different singular and plural forms in English or different plural forms in some other language. Like <ref refid="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" kindref="member">wxGetTranslation(const wxString&amp;,const wxString&amp;)</ref>, the <emphasis>string</emphasis> parameter must contain the singular form of the string to be converted and is used as the key for the search in the catalog. The <emphasis>plural</emphasis> parameter is the plural form (in English). The parameter <emphasis>n</emphasis> is used to determine the plural form. If no message catalog is found, <emphasis>string</emphasis> is returned if &quot;n == 1&quot;, otherwise <emphasis>plural</emphasis> is returned.</para><para>See GNU gettext Manual for additional information on plural forms handling: <ulink url="http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms">http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms</ulink> For a shorter alternative see the <ref refid="group__group__funcmacro__string_1gadc7c2f1bab3914af93feb47945003409" kindref="member">wxPLURAL()</ref> macro.</para><para>This function is thread-safe.</para><para>Include file:<linebreak/>
 <verbatim>#include &lt;wx/intl.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/translation.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
        <definition>const wxString&amp; _</definition>
        <argsstring>(const wxString &amp;string)</argsstring>
        <name>_</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Macro to be used around all literal strings that should be translated. </para>        </briefdescription>
        <detaileddescription>
<para>This macro expands into a call to <ref refid="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" kindref="member">wxGetTranslation()</ref>, so it marks the message for the extraction by <computeroutput>xgettext</computeroutput> just as <ref refid="group__group__funcmacro__string_1gab8862de0f74049708bfea75ae9e14c45" kindref="member">wxTRANSLATE()</ref> does, but also returns the translation of the string for the current locale during execution.</para><para>This macro is thread-safe.</para><para>Include file:<linebreak/>
 <verbatim>#include &lt;wx/intl.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/translation.h" line="573" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" prot="public" static="no">
        <name>wxT</name>
        <param><defname>string</defname></param>
        <briefdescription>
<para>This macro can be used with character and string literals (in other words, <computeroutput>&apos;x&apos;</computeroutput> or <computeroutput>&quot;foo&quot;</computeroutput>) to automatically convert them to wide strings in Unicode builds of wxWidgets. </para>        </briefdescription>
        <detaileddescription>
<para>This macro simply returns the value passed to it without changes in ASCII build. In fact, its definition is:</para><para><programlisting><codeline><highlight class="normal">#ifdef<sp/>UNICODE</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>define<sp/>wxT(x)<sp/><sp/>L##x</highlight></codeline>
<codeline><highlight class="normal">#else<sp/>//<sp/>!Unicode</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>define<sp/>wxT(x)<sp/><sp/>x</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
</programlisting></para><para>Note that since wxWidgets 2.9.0 you shouldn&apos;t use <ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref> anymore in your program sources (it was previously required if you wanted to support Unicode).</para><para><simplesect kind="see"><para><ref refid="overview_unicode" kindref="compound">Unicode Support in wxWidgets</ref>, <ref refid="group__group__funcmacro__string_1ga0a06701ea0e6bb00c5171ace1b1f5691" kindref="member">wxS()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/chartype.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="32" column="9" bodyfile="interface/wx/chartype.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__string_1ga2e7c1f911a731a4b98a85fa44f1d9fbc" prot="public" static="no">
        <name>wxT_2</name>
        <param><defname>string</defname></param>
        <briefdescription>
<para>Compatibility macro which expands to <ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref> in wxWidgets 2 only. </para>        </briefdescription>
        <detaileddescription>
<para>This macro can be used in code which needs to compile with both wxWidgets 2 and 3 versions, in places where the wx2 API requires a Unicode string (in Unicode build) but the wx3 API only accepts a standard narrow string, as in e.g. <ref refid="structwx_cmd_line_entry_desc" kindref="compound">wxCmdLineEntryDesc</ref> structure objects initializers.</para><para>Example of use: <programlisting><codeline><highlight class="normal">const<sp/>wxCmdLineEntryDesc<sp/>cmdLineDesc[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>wxCMD_LINE_SWITCH,<sp/>wxT_2(&quot;q&quot;),<sp/>wxT_2(&quot;quiet&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxT_2(&quot;Don&apos;t<sp/>output<sp/>verbose<sp/>messages&quot;)<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxCMD_LINE_DESC_END</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Without <computeroutput>wxT_2</computeroutput> the code above wouldn&apos;t compile with wxWidgets 2, but using <computeroutput>wxT</computeroutput> instead, it wouldn&apos;t compile with wxWidgets 3.</para><para><simplesect kind="see"><para><ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref></para></simplesect>
<simplesect kind="since"><para>2.8.12, 2.9.2</para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/chartype.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="61" column="9" bodyfile="interface/wx/chartype.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__string_1ga0a06701ea0e6bb00c5171ace1b1f5691" prot="public" static="no">
        <name>wxS</name>
        <param><defname>string</defname></param>
        <briefdescription>
<para>wxS is a macro which can be used with character and string literals (in other words, <computeroutput>&apos;x&apos;</computeroutput> or <computeroutput>&quot;foo&quot;</computeroutput>) to convert them either to wide characters or wide strings in <computeroutput>wchar_t-based</computeroutput> (UTF-16) builds, or to keep them unchanged in <computeroutput>char-based</computeroutput> (UTF-8) builds. </para>        </briefdescription>
        <detaileddescription>
<para>Basically this macro produces characters or strings of type wxStringCharType.</para><para>The use of this macro is optional as the translation will always be done at run-time even if there is a mismatch between the kind of the literal used and the string or character type used in the current build. However using it can be beneficial in <bold>performance-sensitive code</bold> to do the conversion at compile-time instead.</para><para><simplesect kind="see"><para><ref refid="overview_unicode" kindref="compound">Unicode Support in wxWidgets</ref>, <ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/chartype.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="81" column="9" bodyfile="interface/wx/chartype.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__string_1ga7dfc2888539861afe6c4337ef315472b" prot="public" static="no">
        <name>_T</name>
        <param><defname>string</defname></param>
        <briefdescription>
<para>This macro is exactly the same as <ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref> and is defined in wxWidgets simply because it may be more intuitive for Windows programmers as the standard Win32 headers also define it (as well as yet another name for the same macro which is _TEXT()). </para>        </briefdescription>
        <detaileddescription>
<para>Don&apos;t confuse this macro with <ref refid="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" kindref="member">_()</ref>!</para><para>Note that since wxWidgets 2.9.0 the use of <ref refid="group__group__funcmacro__string_1ga7dfc2888539861afe6c4337ef315472b" kindref="member">_T()</ref> is discouraged just like for <ref refid="group__group__funcmacro__string_1ga437ea6ba615b75dac8603e96ec864160" kindref="member">wxT()</ref> and also that this macro may conflict with identifiers defined in standard headers of some compilers (such as Sun CC) so its use should really be avoided.</para><para>Include file:<linebreak/>
 <verbatim>#include &lt;wx/chartype.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/chartype.h" line="98" column="9" bodyfile="interface/wx/chartype.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__string_1gadc7c2f1bab3914af93feb47945003409" prot="public" static="no">
        <name>wxPLURAL</name>
        <param><defname>string</defname></param>
        <param><defname>plural</defname></param>
        <param><defname>n</defname></param>
        <briefdescription>
<para>This macro is identical to <ref refid="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" kindref="member">_()</ref> but for the plural variant of <ref refid="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" kindref="member">wxGetTranslation()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const <ref refid="classwx_string" kindref="compound">wxString</ref>.</para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/intl.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/translation.h" line="464" column="9" bodyfile="interface/wx/translation.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__funcmacro__string_1gab8862de0f74049708bfea75ae9e14c45" prot="public" static="no">
        <name>wxTRANSLATE</name>
        <param><defname>string</defname></param>
        <briefdescription>
<para>This macro doesn&apos;t do anything in the program code <ndash/> it simply expands to the value of its argument. </para>        </briefdescription>
        <detaileddescription>
<para>However it does have a purpose which is to mark the literal strings for the extraction into the message catalog created by <computeroutput>xgettext</computeroutput> program. Usually this is achieved using <ref refid="group__group__funcmacro__string_1ga8a02b8875a521df57263a9e6f090f2d0" kindref="member">_()</ref> but that macro not only marks the string for extraction but also expands into a <ref refid="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" kindref="member">wxGetTranslation()</ref> call which means that it cannot be used in some situations, notably for static array initialization.</para><para>Here is an example which should make it more clear: suppose that you have a static array of strings containing the weekday names and which have to be translated (note that it is a bad example, really, as <ref refid="classwx_date_time" kindref="compound">wxDateTime</ref> already can be used to get the localized week day names already). If you write:</para><para><programlisting><codeline><highlight class="normal">static<sp/>const<sp/>char<sp/>*<sp/>const<sp/>weekdays[]<sp/>=<sp/>{<sp/>_(&quot;Mon&quot;),<sp/>...,<sp/>_(&quot;Sun&quot;)<sp/>};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">//<sp/>use<sp/>weekdays[n]<sp/>as<sp/>usual</highlight></codeline>
</programlisting></para><para>The code wouldn&apos;t compile because the function calls are forbidden in the array initializer. So instead you should do this:</para><para><programlisting><codeline><highlight class="normal">static<sp/>const<sp/>char<sp/>*<sp/>const<sp/>weekdays[]<sp/>=<sp/>{<sp/>wxTRANSLATE(&quot;Mon&quot;),<sp/>...,</highlight></codeline>
<codeline><highlight class="normal">wxTRANSLATE(&quot;Sun&quot;)<sp/>};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">//<sp/>use<sp/>wxGetTranslation(weekdays[n])</highlight></codeline>
</programlisting></para><para>Note that although the code <bold>would</bold> compile if you simply omit <ref refid="group__group__funcmacro__string_1gab8862de0f74049708bfea75ae9e14c45" kindref="member">wxTRANSLATE()</ref> in the above, it wouldn&apos;t work as expected because there would be no translations for the weekday names in the program message catalog and <ref refid="group__group__funcmacro__string_1ga223e9aea5b1a2252c7e632613c7b9a74" kindref="member">wxGetTranslation()</ref> wouldn&apos;t find them.</para><para><simplesect kind="return"><para>A const wxChar*.</para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/intl.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/translation.h" line="507" column="9" bodyfile="interface/wx/translation.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><linebreak/>
</para><para>Global string functions and macros. </para>    </briefdescription>
    <detaileddescription>
<para>See <ref refid="classwx_string" kindref="compound">wxString</ref> for the wxWidgets string class.</para><para>Please note that all functions of this group which are documented to take <computeroutput>char*</computeroutput> arrays are overloaded with <computeroutput>wchar_t*</computeroutput> variants.</para><para>Note also that wxWidgets wraps all standard CRT functions, even if the wrappers are not (all) documented. </para>    </detaileddescription>
  </compounddef>
</doxygen>
