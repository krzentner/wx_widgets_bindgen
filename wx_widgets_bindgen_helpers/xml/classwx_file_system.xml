<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classwx_file_system" kind="class" language="C++" prot="public">
    <compoundname>wxFileSystem</compoundname>
    <basecompoundref refid="classwx_object" prot="public" virt="non-virtual">wxObject</basecompoundref>
    <includes local="no">wx/filesys.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classwx_file_system_1a4ced950173a56647beb221ab289632f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>wxFileSystem::wxFileSystem</definition>
        <argsstring>()</argsstring>
        <name>wxFileSystem</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The initial current path of this object will be empty (i.e. <ref refid="classwx_file_system_1a2a2aa4f04017b44e2bb40464dbc6b07e" kindref="member">GetPath()</ref> == wxEmptyString) which means that e.g. <ref refid="classwx_file_system_1a01c6b989e86e34da21e94c802e516b16" kindref="member">OpenFile()</ref> or <ref refid="classwx_file_system_1a93f5d9fc8fe388213f8ed7dddc55db71" kindref="member">FindFirst()</ref> functions will use current working directory as current path (see also wxGetCwd). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1ad491d9cb899dcdd3b9960c1974e34da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxFileSystem::ChangePathTo</definition>
        <argsstring>(const wxString &amp;location, bool is_dir=false)</argsstring>
        <name>ChangePathTo</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dir</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets the current location. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>location</emphasis> parameter passed to <ref refid="classwx_file_system_1a01c6b989e86e34da21e94c802e516b16" kindref="member">OpenFile()</ref> is relative to this path.</para><para><simplesect kind="remark"><para>Unless <emphasis>is_dir</emphasis> is true the <emphasis>location</emphasis> parameter is not the directory name but the name of the file in this directory.</para></simplesect>
All these commands change the path to &quot;dir/subdir/&quot;:</para><para><programlisting><codeline><highlight class="normal">ChangePathTo(&quot;dir/subdir/xh.htm&quot;);</highlight></codeline>
<codeline><highlight class="normal">ChangePathTo(&quot;dir/subdir&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">ChangePathTo(&quot;dir/subdir/&quot;,<sp/>true);</highlight></codeline>
</programlisting></para><para>Example: <programlisting><codeline><highlight class="normal">f<sp/>=<sp/>fs-&gt;OpenFile(&quot;hello.htm&quot;);<sp/>//<sp/>opens<sp/>file<sp/>&apos;hello.htm&apos;</highlight></codeline>
<codeline><highlight class="normal">fs-&gt;ChangePathTo(&quot;subdir/folder&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">f<sp/>=<sp/>fs-&gt;OpenFile(&quot;hello.htm&quot;);<sp/>//<sp/>opens<sp/>file<sp/>&apos;subdir/folder/hello.htm&apos;<sp/>!!</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>the new location. Its meaning depends on the value of is_dir </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>if true location is new directory. If false (the default) location is file in the new directory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1aa398cf786d93b2033782eb31efb6d63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxFileSystem::FindFileInPath</definition>
        <argsstring>(wxString *pStr, const wxString &amp;path, const wxString &amp;file)</argsstring>
        <name>FindFileInPath</name>
        <param>
          <type><ref refid="classwx_string" kindref="compound">wxString</ref> *</type>
          <declname>pStr</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Looks for the file with the given name <emphasis>file</emphasis> in a colon or semi-colon (depending on the current platform) separated list of directories in <emphasis>path</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If the file is found in any directory, returns true and the full path of the file in <emphasis>str</emphasis>, otherwise returns false and doesn&apos;t modify <emphasis>str</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the full path of the file, must not be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>wxPATH_SEP-separated list of directories </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to look for </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1a93f5d9fc8fe388213f8ed7dddc55db71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxFileSystem::FindFirst</definition>
        <argsstring>(const wxString &amp;wildcard, int flags=0)</argsstring>
        <name>FindFirst</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>wildcard</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Works like <ref refid="group__group__funcmacro__file_1gab136c4ed6c3d71262d12780b723479ce" kindref="member">wxFindFirstFile()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the name of the first filename (within filesystem&apos;s current path) that matches <emphasis>wildcard</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wildcard</parametername>
</parameternamelist>
<parameterdescription>
<para>The wildcard that the filename must match </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>One of wxFILE (only files), wxDIR (only directories) or 0 (both). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1ae654ed12023c1a1776fdaf340f9012ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxFileSystem::FindNext</definition>
        <argsstring>()</argsstring>
        <name>FindNext</name>
        <briefdescription>
<para>Returns the next filename that matches the parameters passed to <ref refid="classwx_file_system_1a93f5d9fc8fe388213f8ed7dddc55db71" kindref="member">FindFirst()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1a2a2aa4f04017b44e2bb40464dbc6b07e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>wxString wxFileSystem::GetPath</definition>
        <argsstring>() const</argsstring>
        <name>GetPath</name>
        <briefdescription>
<para>Returns the actual path (set by <ref refid="classwx_file_system_1ad491d9cb899dcdd3b9960c1974e34da0" kindref="member">wxFileSystem::ChangePathTo</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1a01c6b989e86e34da21e94c802e516b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_f_s_file" kindref="compound">wxFSFile</ref> *</type>
        <definition>wxFSFile* wxFileSystem::OpenFile</definition>
        <argsstring>(const wxString &amp;location, int flags=wxFS_READ)</argsstring>
        <name>OpenFile</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="filesys_8h_1abe38fc3ba01ed25545f0c841da8c2942a05297883347433d9f47427abbbee8211" kindref="member">wxFS_READ</ref></defval>
        </param>
        <briefdescription>
<para>Opens the file and returns a pointer to a <ref refid="classwx_f_s_file" kindref="compound">wxFSFile</ref> object or NULL if failed. </para>        </briefdescription>
        <detaileddescription>
<para>It first tries to open the file in relative scope (based on value passed to <ref refid="classwx_file_system_1ad491d9cb899dcdd3b9960c1974e34da0" kindref="member">ChangePathTo()</ref> method) and then as an absolute path.</para><para>Note that the user is responsible for deleting the returned <ref refid="classwx_f_s_file" kindref="compound">wxFSFile</ref>. <emphasis>flags</emphasis> can be one or more of the <ref refid="filesys_8h_1abe38fc3ba01ed25545f0c841da8c2942" kindref="member">wxFileSystemOpenFlags</ref> values combined together.</para><para>A stream opened with just the default <emphasis>wxFS_READ</emphasis> flag may or may not be seekable depending on the underlying source.</para><para>Passing <emphasis>&quot;wxFS_READ | wxFS_SEEKABLE&quot;</emphasis> for <emphasis>flags</emphasis> will back a stream that is not natively seekable with memory or a file and return a stream that is always seekable.</para><para><simplesect kind="note"><para>The <emphasis>location</emphasis> argument is, despite this method&apos;s name <emphasis>not</emphasis> a filename. It is a &quot;location&quot;, aka <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref> URL (see <ref refid="overview_fs" kindref="compound">wxFileSystem Overview</ref>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="173" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classwx_file_system_1a442d841b2baa5a0eb83c3a985b1e3119" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wxFileSystem::AddHandler</definition>
        <argsstring>(wxFileSystemHandler *handler)</argsstring>
        <name>AddHandler</name>
        <param>
          <type><ref refid="classwx_file_system_handler" kindref="compound">wxFileSystemHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>This static function adds new handler into the list of handlers (see <ref refid="classwx_file_system_handler" kindref="compound">wxFileSystemHandler</ref>) which provide access to virtual FS. </para>        </briefdescription>
        <detaileddescription>
<para>Note that if two handlers for the same protocol are added, the last added one takes precedence.</para><para><simplesect kind="note"><para>You can call: <programlisting><codeline><highlight class="normal">wxFileSystem::AddHandler(new<sp/>My_FS_Handler);</highlight></codeline>
</programlisting> This is because (a) AddHandler is a static method, and (b) the handlers are deleted in <ref refid="classwx_file_system" kindref="compound">wxFileSystem</ref>&apos;s destructor so that you don&apos;t have to care about it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1a4dfed1274580f8fcbfd02e27bcb920d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_file_system_handler" kindref="compound">wxFileSystemHandler</ref> *</type>
        <definition>static wxFileSystemHandler* wxFileSystem::RemoveHandler</definition>
        <argsstring>(wxFileSystemHandler *handler)</argsstring>
        <name>RemoveHandler</name>
        <param>
          <type><ref refid="classwx_file_system_handler" kindref="compound">wxFileSystemHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Remove a filesystem handler from the list of handlers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1a616610cafdb14b841940d5e6b08a9615" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_string" kindref="compound">wxString</ref></type>
        <definition>static wxString wxFileSystem::FileNameToURL</definition>
        <argsstring>(const wxFileName &amp;filename)</argsstring>
        <name>FileNameToURL</name>
        <param>
          <type>const <ref refid="classwx_file_name" kindref="compound">wxFileName</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Converts a <ref refid="classwx_file_name" kindref="compound">wxFileName</ref> into an URL. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classwx_file_system_1a4c8dfb97bf9fdc0c6c1f89050d3c1974" kindref="member">URLToFileName()</ref>, <ref refid="classwx_file_name" kindref="compound">wxFileName</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1ac6d225954ea267ae5a6808aa61c86175" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool wxFileSystem::HasHandlerForPath</definition>
        <argsstring>(const wxString &amp;location)</argsstring>
        <name>HasHandlerForPath</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>This static function returns true if there is a registered handler which can open the given location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classwx_file_system_1a4c8dfb97bf9fdc0c6c1f89050d3c1974" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classwx_file_name" kindref="compound">wxFileName</ref></type>
        <definition>static wxFileName wxFileSystem::URLToFileName</definition>
        <argsstring>(const wxString &amp;url)</argsstring>
        <name>URLToFileName</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Converts URL into a well-formed filename. </para>        </briefdescription>
        <detaileddescription>
<para>The URL must use the <computeroutput>file</computeroutput> protocol. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/filesys.h" line="180" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class provides an interface for opening files on different file systems. </para>    </briefdescription>
    <detaileddescription>
<para>It can handle absolute and/or local filenames.</para><para>It uses a system of handlers (see <ref refid="classwx_file_system_handler" kindref="compound">wxFileSystemHandler</ref>) to provide access to user-defined virtual file systems.</para><para><heading level="2"></heading>
</para><para>Library:<nonbreakablespace/><nonbreakablespace/><ref refid="page_libs_1page_libs_wxbase" kindref="member">wxBase</ref> &lt;&gt;&lt; =&apos;&apos;&gt;:&lt;/&gt;&amp;;&amp;;&lt; =&apos;&apos;&gt;\ &lt;/&gt;&lt;/&gt;</para><para><simplesect kind="see"><para><ref refid="classwx_file_system_handler" kindref="compound">wxFileSystemHandler</ref>, <ref refid="classwx_f_s_file" kindref="compound">wxFSFile</ref>, <ref refid="overview_fs" kindref="compound">wxFileSystem Overview</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2415">
        <label>wxFileSystem</label>
        <link refid="classwx_file_system"/>
        <childnode refid="2416" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2416">
        <label>wxObject</label>
        <link refid="classwx_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2417">
        <label>wxFileSystem</label>
        <link refid="classwx_file_system"/>
        <childnode refid="2418" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2418">
        <label>wxObject</label>
        <link refid="classwx_object"/>
        <childnode refid="2419" relation="usage">
          <edgelabel>m_refData</edgelabel>
        </childnode>
      </node>
      <node id="2419">
        <label>wxObjectRefData</label>
        <link refid="classwx_object_ref_data"/>
      </node>
    </collaborationgraph>
    <location file="interface/wx/filesys.h" line="34" column="1" bodyfile="interface/wx/filesys.h" bodystart="33" bodyend="181"/>
    <listofallmembers>
      <member refid="classwx_file_system_1a442d841b2baa5a0eb83c3a985b1e3119" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>AddHandler</name></member>
      <member refid="classwx_object_1a60204063f3cc3aa2fa1c7ff5bda9eb13" prot="protected" virt="non-virtual"><scope>wxFileSystem</scope><name>AllocExclusive</name></member>
      <member refid="classwx_file_system_1ad491d9cb899dcdd3b9960c1974e34da0" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>ChangePathTo</name></member>
      <member refid="classwx_object_1a436fc8fe68cf8a31000296d9cd3d2427" prot="protected" virt="virtual"><scope>wxFileSystem</scope><name>CloneRefData</name></member>
      <member refid="classwx_object_1a3f4f497c65cef611e121c41f21dd5ccc" prot="protected" virt="virtual"><scope>wxFileSystem</scope><name>CreateRefData</name></member>
      <member refid="classwx_file_system_1a616610cafdb14b841940d5e6b08a9615" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>FileNameToURL</name></member>
      <member refid="classwx_file_system_1aa398cf786d93b2033782eb31efb6d63e" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>FindFileInPath</name></member>
      <member refid="classwx_file_system_1a93f5d9fc8fe388213f8ed7dddc55db71" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>FindFirst</name></member>
      <member refid="classwx_file_system_1ae654ed12023c1a1776fdaf340f9012ec" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>FindNext</name></member>
      <member refid="classwx_object_1ae6d365f2556b26767ced8410c5e839d0" prot="public" virt="virtual"><scope>wxFileSystem</scope><name>GetClassInfo</name></member>
      <member refid="classwx_file_system_1a2a2aa4f04017b44e2bb40464dbc6b07e" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>GetPath</name></member>
      <member refid="classwx_object_1af3c6c76a775864832f1536d3c0de3a2b" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>GetRefData</name></member>
      <member refid="classwx_file_system_1ac6d225954ea267ae5a6808aa61c86175" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>HasHandlerForPath</name></member>
      <member refid="classwx_object_1a3c7115ef4132dcee0c4fc34e84d7fced" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>IsKindOf</name></member>
      <member refid="classwx_object_1a059373c494c2369d7db2a556efef8ecf" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>IsSameAs</name></member>
      <member refid="classwx_object_1a9e31954530a0abd54982effc443ed2b8" prot="protected" virt="non-virtual"><scope>wxFileSystem</scope><name>m_refData</name></member>
      <member refid="classwx_file_system_1a01c6b989e86e34da21e94c802e516b16" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>OpenFile</name></member>
      <member refid="classwx_object_1a07b8f34f5afc5743195c5fed052f55d3" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>operator delete</name></member>
      <member refid="classwx_object_1a96fa423a1dbc212c8227a5d83825971f" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>operator new</name></member>
      <member refid="classwx_object_1a2f6f1aa51fe9fc2b1415ca4211a90e9e" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>Ref</name></member>
      <member refid="classwx_file_system_1a4dfed1274580f8fcbfd02e27bcb920d1" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>RemoveHandler</name></member>
      <member refid="classwx_object_1afab780710f2adc1bb33310e27590140b" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>SetRefData</name></member>
      <member refid="classwx_object_1af51efc6b1ae632fc7f0cd7ebbce9fa36" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>UnRef</name></member>
      <member refid="classwx_object_1a74b40e42d19a4b9e9bec0b57d62a5725" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>UnShare</name></member>
      <member refid="classwx_file_system_1a4c8dfb97bf9fdc0c6c1f89050d3c1974" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>URLToFileName</name></member>
      <member refid="classwx_file_system_1a4ced950173a56647beb221ab289632f2" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>wxFileSystem</name></member>
      <member refid="classwx_object_1acaa378363a28af421ab56ad7b46eadf0" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a4721b4dc9b7aff0f30904ba2ea3954cf" prot="public" virt="non-virtual"><scope>wxFileSystem</scope><name>wxObject</name></member>
      <member refid="classwx_object_1a2a51aa8bfbab47ca2f051bcf84b3f35b" prot="public" virt="virtual"><scope>wxFileSystem</scope><name>~wxObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
