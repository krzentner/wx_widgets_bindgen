<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="group__group__funcmacro__procctrl" kind="group">
    <compoundname>group_funcmacro_procctrl</compoundname>
    <title>Process Control</title>
    <innerclass refid="structwx_execute_env" prot="public">wxExecuteEnv</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__group__funcmacro__procctrl_1ga1be3860693af99a6c1da72580097294c" prot="public" static="no" strong="no">
        <type></type>
        <name>@55</name>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca457bddfa2a7ce4927358680893910cc8" prot="public">
          <name>wxEXEC_ASYNC</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Execute the process asynchronously. </para>          </briefdescription>
          <detaileddescription>
<para>Notice that, due to its value, this is the default. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca412f75e022e82e7d8415109a6712be36" prot="public">
          <name>wxEXEC_SYNC</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Execute the process synchronously. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca433c517e46d1dd61a5dda1ffeb750552" prot="public">
          <name>wxEXEC_SHOW_CONSOLE</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Always show the child process console under MSW. </para>          </briefdescription>
          <detaileddescription>
<para>The child console is hidden by default if the child IO is redirected, this flag allows to change this and show it nevertheless.</para><para>This flag is ignored under the other platforms. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294cafd7547e6ac65800275cdffc7be65fd74" prot="public">
          <name>wxEXEC_MAKE_GROUP_LEADER</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Make the new process a group leader. </para>          </briefdescription>
          <detaileddescription>
<para>Under Unix, if the process is the group leader then passing wxKILL_CHILDREN to <ref refid="group__group__funcmacro__procctrl_1gae3a7de5a29e70c77463dd1bc38fb98cf" kindref="member">wxKill()</ref> kills all children as well as pid.</para><para>Under MSW, applies only to console applications and is only supported under NT family (i.e. not under Windows 9x). It corresponds to the native <computeroutput>CREATE_NEW_PROCESS_GROUP</computeroutput> and, in particular, ensures that Ctrl-Break signals will be sent to all children of this process as well to the process itself. Support for this flag under MSW was added in version 2.9.4 of wxWidgets. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca8d51ac2386c10f6f5eb7c7a0704addb1" prot="public">
          <name>wxEXEC_NODISABLE</name>
          <initializer>= 8</initializer>
          <briefdescription>
<para>Don&apos;t disable the program UI while running the child synchronously. </para>          </briefdescription>
          <detaileddescription>
<para>By default synchronous execution disables all program windows to avoid that the user interacts with the program while the child process is running, you can use this flag to prevent this from happening.</para><para>This flag can only be used with <ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca412f75e022e82e7d8415109a6712be36" kindref="member">wxEXEC_SYNC</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca00bae6530ff099a5ead1c80f81d5a5c9" prot="public">
          <name>wxEXEC_NOEVENTS</name>
          <initializer>= 16</initializer>
          <briefdescription>
<para>Don&apos;t dispatch events while the child process is executed. </para>          </briefdescription>
          <detaileddescription>
<para>By default, the event loop is run while waiting for synchronous execution to complete and this flag can be used to simply block the main process until the child process finishes</para><para>This flag can only be used with <ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca412f75e022e82e7d8415109a6712be36" kindref="member">wxEXEC_SYNC</ref>. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca6eb92c81a5e49ef172b9d74528be55a0" prot="public">
          <name>wxEXEC_HIDE_CONSOLE</name>
          <initializer>= 32</initializer>
          <briefdescription>
<para>Hide child process console under MSW. </para>          </briefdescription>
          <detaileddescription>
<para>Under MSW, hide the console of the child process if it has one, even if its IO is not redirected.</para><para>This flag is ignored under the other platforms. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca81dbb296e5efdd73668a1570e7af5716" prot="public">
          <name>wxEXEC_BLOCK</name>
          <initializer>= wxEXEC_SYNC | wxEXEC_NOEVENTS</initializer>
          <briefdescription>
<para>Convenient synonym for flags given system()-like behaviour. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bit flags that can be used with <ref refid="group__group__funcmacro__procctrl_1gaa276e9e676e26bafeec3141b73399b33" kindref="member">wxExecute()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="969" column="1" bodyfile="interface/wx/utils.h" bodystart="968" bodyend="1043"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1ga3770f7ff142dab558f10ae354350874d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wxExit</definition>
        <argsstring>()</argsstring>
        <name>wxExit</name>
        <briefdescription>
<para>Exits application after calling <ref refid="classwx_app_console_1a5ee60051c92b0b2933258799626a0485" kindref="member">wxApp::OnExit</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be used in an emergency: normally the top-level frame should be deleted (after deleting all other frames) to terminate the application. See <ref refid="classwx_close_event" kindref="compound">wxCloseEvent</ref> and <ref refid="classwx_app" kindref="compound">wxApp</ref>.</para><para>Include file:<linebreak/>
 <verbatim>#include &lt;wx/app.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/app.h" line="1119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1gaa276e9e676e26bafeec3141b73399b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxExecute</definition>
        <argsstring>(const wxString &amp;command, int flags=wxEXEC_ASYNC, wxProcess *callback=NULL, const wxExecuteEnv *env=NULL)</argsstring>
        <name>wxExecute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca457bddfa2a7ce4927358680893910cc8" kindref="member">wxEXEC_ASYNC</ref></defval>
        </param>
        <param>
          <type><ref refid="classwx_process" kindref="compound">wxProcess</ref> *</type>
          <declname>callback</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="structwx_execute_env" kindref="compound">wxExecuteEnv</ref> *</type>
          <declname>env</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Executes another program in Unix or Windows. </para>        </briefdescription>
        <detaileddescription>
<para>In the overloaded versions of this function, if <emphasis>flags</emphasis> parameter contains <computeroutput>wxEXEC_ASYNC</computeroutput> flag (the default), flow of control immediately returns. If it contains <computeroutput>wxEXEC_SYNC</computeroutput>, the current application waits until the other program has terminated.</para><para>In the case of synchronous execution, the return value is the exit code of the process (which terminates by the moment the function returns) and will be -1 if the process couldn&apos;t be started and typically 0 if the process terminated successfully. Also, while waiting for the process to terminate, <ref refid="group__group__funcmacro__procctrl_1gaa276e9e676e26bafeec3141b73399b33" kindref="member">wxExecute()</ref> will call <ref refid="group__group__funcmacro__appinitterm_1gac386c89a04e364afc07edce6d848c27a" kindref="member">wxYield()</ref>. Because of this, by default this function disables all application windows to avoid unexpected reentrancies which could result from the users interaction with the program while the child process is running. If you are sure that it is safe to not disable the program windows, you may pass <computeroutput>wxEXEC_NODISABLE</computeroutput> flag to prevent this automatic disabling from happening.</para><para>For asynchronous execution, however, the return value is the process id and zero value indicates that the command could not be executed. As an added complication, the return value of -1 in this case indicates that we didn&apos;t launch a new process, but connected to the running one (this can only happen when using DDE under Windows for command execution). In particular, in this case only, the calling code will not get the notification about process termination.</para><para>If <emphasis>callback</emphasis> isn&apos;t NULL and if execution is asynchronous, <ref refid="classwx_process_1aa378b7e705c9191431cad51a81581836" kindref="member">wxProcess::OnTerminate()</ref> will be called when the process finishes. Specifying this parameter also allows you to redirect the standard input and/or output of the process being launched by calling <ref refid="classwx_process_1a9d1fc94d98e373c26dbb128516c2c348" kindref="member">wxProcess::Redirect()</ref>.</para><para>Under Windows, when launching a console process its console is shown by default but hidden if its IO is redirected. Both of these default behaviours may be overridden: if <ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca6eb92c81a5e49ef172b9d74528be55a0" kindref="member">wxEXEC_HIDE_CONSOLE</ref> is specified, the console will never be shown. If <ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca433c517e46d1dd61a5dda1ffeb750552" kindref="member">wxEXEC_SHOW_CONSOLE</ref> is used, the console will be shown even if the child process IO is redirected. Neither of these flags affect non-console Windows applications or does anything under the other systems.</para><para>Under Unix the flag <computeroutput>wxEXEC_MAKE_GROUP_LEADER</computeroutput> may be used to ensure that the new process is a group leader (this will create a new session if needed). Calling <ref refid="group__group__funcmacro__procctrl_1gae3a7de5a29e70c77463dd1bc38fb98cf" kindref="member">wxKill()</ref> passing wxKILL_CHILDREN will kill this process as well as all of its children (except those which have started their own session). Under MSW, this flag can be used with console processes only and corresponds to the native <computeroutput>CREATE_NEW_PROCESS_GROUP</computeroutput> flag.</para><para>The <computeroutput>wxEXEC_NOEVENTS</computeroutput> flag prevents processing of any events from taking place while the child process is running. It should be only used for very short-lived processes as otherwise the application windows risk becoming unresponsive from the users point of view. As this flag only makes sense with <computeroutput>wxEXEC_SYNC</computeroutput>, <computeroutput>wxEXEC_BLOCK</computeroutput> equal to the sum of both of these flags is provided as a convenience.</para><para><simplesect kind="note"><para>Currently <ref refid="group__group__funcmacro__procctrl_1gaa276e9e676e26bafeec3141b73399b33" kindref="member">wxExecute()</ref> can only be used from the main thread, calling this function from another thread will result in an assert failure in debug build and won&apos;t work.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute and any parameters to pass to it as a single string, i.e. &quot;emacs file.txt&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Must include either wxEXEC_ASYNC or wxEXEC_SYNC and can also include wxEXEC_SHOW_CONSOLE, wxEXEC_HIDE_CONSOLE, wxEXEC_MAKE_GROUP_LEADER (in either case) or wxEXEC_NODISABLE and wxEXEC_NOEVENTS or wxEXEC_BLOCK, which is equal to their combination, in wxEXEC_SYNC case. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to <ref refid="classwx_process" kindref="compound">wxProcess</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to additional parameters for the child process, such as its initial working directory and environment variables. This parameter is available in wxWidgets 2.9.2 and later only.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__group__funcmacro__procctrl_1gad7f2f357f592f8c786ab05f516578023" kindref="member">wxShell()</ref>, <ref refid="classwx_process" kindref="compound">wxProcess</ref>, <ref refid="page_samples_1page_samples_exec" kindref="member">External Program Execution Sample</ref>, <ref refid="group__group__funcmacro__misc_1ga04038d4c78e4c111d018b8f82b2d66c3" kindref="member">wxLaunchDefaultApplication()</ref>, <ref refid="group__group__funcmacro__misc_1ga3ff36fe489da2a779248b56f283615ca" kindref="member">wxLaunchDefaultBrowser()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim></para><para><bold>wxPerl Note:</bold> In wxPerl this function is called <computeroutput>Wx::ExecuteCommand</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1ga8116ca17aec4eea74b848f1544805960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxExecute</definition>
        <argsstring>(char **argv, int flags=wxEXEC_ASYNC, wxProcess *callback=NULL, const wxExecuteEnv *env=NULL)</argsstring>
        <name>wxExecute</name>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca457bddfa2a7ce4927358680893910cc8" kindref="member">wxEXEC_ASYNC</ref></defval>
        </param>
        <param>
          <type><ref refid="classwx_process" kindref="compound">wxProcess</ref> *</type>
          <declname>callback</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="structwx_execute_env" kindref="compound">wxExecuteEnv</ref> *</type>
          <declname>env</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>This is an overloaded version of wxExecute(const wxString&amp;,int,wxProcess*), please see its documentation for general information. </para>        </briefdescription>
        <detaileddescription>
<para>This version takes an array of values: a command, any number of arguments, terminated by NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute should be the first element of this array, any additional ones are the command parameters and the array must be terminated with a NULL pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Same as for wxExecute(const wxString&amp;,int,wxProcess*) overload. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to <ref refid="classwx_process" kindref="compound">wxProcess</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to additional parameters for the child process, such as its initial working directory and environment variables. This parameter is available in wxWidgets 2.9.2 and later only.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__group__funcmacro__procctrl_1gad7f2f357f592f8c786ab05f516578023" kindref="member">wxShell()</ref>, <ref refid="classwx_process" kindref="compound">wxProcess</ref>, <ref refid="page_samples_1page_samples_exec" kindref="member">External Program Execution Sample</ref>, <ref refid="group__group__funcmacro__misc_1ga04038d4c78e4c111d018b8f82b2d66c3" kindref="member">wxLaunchDefaultApplication()</ref>, <ref refid="group__group__funcmacro__misc_1ga3ff36fe489da2a779248b56f283615ca" kindref="member">wxLaunchDefaultBrowser()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim></para><para><bold>wxPerl Note:</bold> In wxPerl this function is called <computeroutput>Wx::ExecuteArgs</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1gabba679a024d6a4a084fc8d16220c4d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxExecute</definition>
        <argsstring>(wchar_t **argv, int flags=wxEXEC_ASYNC, wxProcess *callback=NULL, const wxExecuteEnv *env=NULL)</argsstring>
        <name>wxExecute</name>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca457bddfa2a7ce4927358680893910cc8" kindref="member">wxEXEC_ASYNC</ref></defval>
        </param>
        <param>
          <type><ref refid="classwx_process" kindref="compound">wxProcess</ref> *</type>
          <declname>callback</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="structwx_execute_env" kindref="compound">wxExecuteEnv</ref> *</type>
          <declname>env</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1ga8f0c6749817ce450eae22290194c812e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxExecute</definition>
        <argsstring>(const wxString &amp;command, wxArrayString &amp;output, int flags=0, const wxExecuteEnv *env=NULL)</argsstring>
        <name>wxExecute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structwx_execute_env" kindref="compound">wxExecuteEnv</ref> *</type>
          <declname>env</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>This is an overloaded version of wxExecute(const wxString&amp;,int,wxProcess*), please see its documentation for general information. </para>        </briefdescription>
        <detaileddescription>
<para>This version can be used to execute a process (always synchronously, the contents of <emphasis>flags</emphasis> is or&apos;d with <computeroutput>wxEXEC_SYNC</computeroutput>) and capture its output in the array <emphasis>output</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute and any parameters to pass to it as a single string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The string array where the stdout of the executed process is saved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Combination of flags to which <ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca412f75e022e82e7d8415109a6712be36" kindref="member">wxEXEC_SYNC</ref> is always implicitly added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to additional parameters for the child process, such as its initial working directory and environment variables. This parameter is available in wxWidgets 2.9.2 and later only.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__group__funcmacro__procctrl_1gad7f2f357f592f8c786ab05f516578023" kindref="member">wxShell()</ref>, <ref refid="classwx_process" kindref="compound">wxProcess</ref>, <ref refid="page_samples_1page_samples_exec" kindref="member">External Program Execution Sample</ref>, <ref refid="group__group__funcmacro__misc_1ga04038d4c78e4c111d018b8f82b2d66c3" kindref="member">wxLaunchDefaultApplication()</ref>, <ref refid="group__group__funcmacro__misc_1ga3ff36fe489da2a779248b56f283615ca" kindref="member">wxLaunchDefaultBrowser()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim></para><para><bold>wxPerl Note:</bold> This function is called <computeroutput>Wx::ExecuteStdout:</computeroutput> it only takes the <emphasis>command</emphasis> argument, and returns a 2-element list (<computeroutput>status</computeroutput>, <computeroutput>output</computeroutput>), where <computeroutput>output</computeroutput> in an array reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1ga481a6f4eb3783d38e022aaca1b6ed757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long wxExecute</definition>
        <argsstring>(const wxString &amp;command, wxArrayString &amp;output, wxArrayString &amp;errors, int flags=0, const wxExecuteEnv *env=NULL)</argsstring>
        <name>wxExecute</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classwx_array_string" kindref="compound">wxArrayString</ref> &amp;</type>
          <declname>errors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structwx_execute_env" kindref="compound">wxExecuteEnv</ref> *</type>
          <declname>env</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>This is an overloaded version of wxExecute(const wxString&amp;,int,wxProcess*), please see its documentation for general information. </para>        </briefdescription>
        <detaileddescription>
<para>This version adds the possibility to additionally capture the messages from standard error output in the <emphasis>errors</emphasis> array. As with the above overload capturing standard output only, execution is always synchronous.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute and any parameters to pass to it as a single string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The string array where the stdout of the executed process is saved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errors</parametername>
</parameternamelist>
<parameterdescription>
<para>The string array where the stderr of the executed process is saved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Combination of flags to which <ref refid="group__group__funcmacro__procctrl_1gga1be3860693af99a6c1da72580097294ca412f75e022e82e7d8415109a6712be36" kindref="member">wxEXEC_SYNC</ref> is always implicitly added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to additional parameters for the child process, such as its initial working directory and environment variables. This parameter is available in wxWidgets 2.9.2 and later only.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__group__funcmacro__procctrl_1gad7f2f357f592f8c786ab05f516578023" kindref="member">wxShell()</ref>, <ref refid="classwx_process" kindref="compound">wxProcess</ref>, <ref refid="page_samples_1page_samples_exec" kindref="member">External Program Execution Sample</ref>, <ref refid="group__group__funcmacro__misc_1ga04038d4c78e4c111d018b8f82b2d66c3" kindref="member">wxLaunchDefaultApplication()</ref>, <ref refid="group__group__funcmacro__misc_1ga3ff36fe489da2a779248b56f283615ca" kindref="member">wxLaunchDefaultBrowser()</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim></para><para><bold>wxPerl Note:</bold> This function is called <computeroutput>Wx::ExecuteStdoutStderr:</computeroutput> it only takes the <emphasis>command</emphasis> argument, and returns a 3-element list (<computeroutput>status</computeroutput>, <computeroutput>output</computeroutput>, <computeroutput>errors</computeroutput>), where <computeroutput>output</computeroutput> and <computeroutput>errors</computeroutput> are array references. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1gab50b6a7e83f7a59d4c1d08d52505f8c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long wxGetProcessId</definition>
        <argsstring>()</argsstring>
        <name>wxGetProcessId</name>
        <briefdescription>
<para>Returns the number uniquely identifying the current process in the system. </para>        </briefdescription>
        <detaileddescription>
<para>If an error occurs, 0 is returned.</para><para>Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1gae3a7de5a29e70c77463dd1bc38fb98cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wxKill</definition>
        <argsstring>(long pid, wxSignal sig=wxSIGTERM, wxKillError *rc=NULL, int flags=wxKILL_NOCHILDREN)</argsstring>
        <name>wxKill</name>
        <param>
          <type>long</type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="utils_8h_1a20679c5ff68fdf39b9ea552b0d94c314" kindref="member">wxSignal</ref></type>
          <declname>sig</declname>
          <defval><ref refid="utils_8h_1a20679c5ff68fdf39b9ea552b0d94c314ae53272781ce284433c1aed7d4457b951" kindref="member">wxSIGTERM</ref></defval>
        </param>
        <param>
          <type><ref refid="utils_8h_1af9655b6ab587e0a65ad6f63eb32d814f" kindref="member">wxKillError</ref> *</type>
          <declname>rc</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="utils_8h_1a03a0fc5862f90668a6d4cf968445b272a6daac111081c4e551647bd00c898c42c" kindref="member">wxKILL_NOCHILDREN</ref></defval>
        </param>
        <briefdescription>
<para>Equivalent to the Unix kill function: send the given signal <emphasis>sig</emphasis> to the process with PID <emphasis>pid</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The valid signal values are:</para><para><programlisting><codeline><highlight class="normal">enum<sp/>wxSignal</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGNONE<sp/>=<sp/>0,<sp/>//<sp/>verify<sp/>if<sp/>the<sp/>process<sp/>exists<sp/>under<sp/>Unix</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGHUP,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGINT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGQUIT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGILL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGTRAP,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGABRT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGEMT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGFPE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGKILL,<sp/><sp/><sp/><sp/><sp/>//<sp/>forcefully<sp/>kill,<sp/>dangerous!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGBUS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGSEGV,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGSYS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGPIPE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGALRM,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxSIGTERM<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>terminate<sp/>the<sp/>process<sp/>gently</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para><computeroutput>wxSIGNONE</computeroutput>, <computeroutput>wxSIGKILL</computeroutput> and <computeroutput>wxSIGTERM</computeroutput> have the same meaning under both Unix and Windows but all the other signals are equivalent to <computeroutput>wxSIGTERM</computeroutput> under Windows. Moreover, under Windows, <computeroutput>wxSIGTERM</computeroutput> is implemented by posting a message to the application window, so it only works if the application does have windows. If it doesn&apos;t, as is notably always the case for the console applications, you need to use <computeroutput>wxSIGKILL</computeroutput> to actually kill the process. Of course, this doesn&apos;t allow the process to shut down gracefully and so should be avoided if possible.</para><para>Returns 0 on success, -1 on failure. If the <emphasis>rc</emphasis> parameter is not NULL, it will be filled with a value from the <computeroutput>wxKillError</computeroutput> enum:</para><para><programlisting><codeline><highlight class="normal">enum<sp/>wxKillError</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxKILL_OK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>no<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxKILL_BAD_SIGNAL,<sp/><sp/><sp/><sp/>//<sp/>no<sp/>such<sp/>signal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxKILL_ACCESS_DENIED,<sp/>//<sp/>permission<sp/>denied</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxKILL_NO_PROCESS,<sp/><sp/><sp/><sp/>//<sp/>no<sp/>such<sp/>process</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>wxKILL_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>another,<sp/>unspecified<sp/>error</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>The <emphasis>flags</emphasis> parameter can be wxKILL_NOCHILDREN (the default), or wxKILL_CHILDREN, in which case the child processes of this process will be killed too. Note that under Unix, for wxKILL_CHILDREN to work you should have created the process by passing wxEXEC_MAKE_GROUP_LEADER to <ref refid="group__group__funcmacro__procctrl_1gaa276e9e676e26bafeec3141b73399b33" kindref="member">wxExecute()</ref>.</para><para><simplesect kind="see"><para><ref refid="classwx_process_1a6b3ff71a9d026d93600add4cbb72a172" kindref="member">wxProcess::Kill()</ref>, <ref refid="classwx_process_1a3c81aa4ef5b6b76018e245f0b004f51b" kindref="member">wxProcess::Exists()</ref>, <ref refid="page_samples_1page_samples_exec" kindref="member">External Program Execution Sample</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1gad7f2f357f592f8c786ab05f516578023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxShell</definition>
        <argsstring>(const wxString &amp;command=wxEmptyString)</argsstring>
        <name>wxShell</name>
        <param>
          <type>const <ref refid="classwx_string" kindref="compound">wxString</ref> &amp;</type>
          <declname>command</declname>
          <defval><ref refid="interface_2wx_2string_8h_1a9a321d587166a30017b608dd2d234033" kindref="member">wxEmptyString</ref></defval>
        </param>
        <briefdescription>
<para>Executes a command in an interactive shell window. </para>        </briefdescription>
        <detaileddescription>
<para>If no command is specified, then just the shell is spawned.</para><para><simplesect kind="see"><para><ref refid="group__group__funcmacro__procctrl_1gaa276e9e676e26bafeec3141b73399b33" kindref="member">wxExecute()</ref>, <ref refid="page_samples_1page_samples_exec" kindref="member">External Program Execution Sample</ref></para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__funcmacro__procctrl_1ga3177c2a68564921806525f8fefa7e5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wxShutdown</definition>
        <argsstring>(int flags=wxSHUTDOWN_POWEROFF)</argsstring>
        <name>wxShutdown</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="utils_8h_1abacc7b19c541b5353890c078f734d291a6e11ecb7aca7a0d1c19a83ac87693a25" kindref="member">wxSHUTDOWN_POWEROFF</ref></defval>
        </param>
        <briefdescription>
<para>This function shuts down or reboots the computer depending on the value of the <emphasis>flags</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Note that performing the shutdown requires the corresponding access rights (superuser under Unix, SE_SHUTDOWN privilege under Windows NT) and that this function is only implemented under Unix and MSW.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>One of <computeroutput>wxSHUTDOWN_POWEROFF</computeroutput>, <computeroutput>wxSHUTDOWN_REBOOT</computeroutput> or <computeroutput>wxSHUTDOWN_LOGOFF</computeroutput> (currently implemented only for MSW) possibly combined with <computeroutput>wxSHUTDOWN_FORCE</computeroutput> which forces shutdown under MSW by forcefully terminating all the applications. As doing this can result in a data loss, this flag shouldn&apos;t be used unless really necessary.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false if an error occurred.</para></simplesect>
Include file:<linebreak/>
 <verbatim>#include &lt;wx/utils.h&gt; </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interface/wx/utils.h" line="1346" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><linebreak/>
</para><para>The functions in this section are used to launch or terminate the other processes. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
